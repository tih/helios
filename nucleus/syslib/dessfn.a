-- File:	desSfn.a
-- Subsystem:	syslib
-- Author:	Nick Garnet
-- 		P.A.Beskeen - ARM/C40 versions
-- Date:	25/9/90
--
-- Description: Assembler function that implements the lowest level of the DES
--		encryption algorithm.
--
--		N.B. For example C function see Sfn() in des.c
--
--
-- RcsId: $Id: dessfn.a,v 1.8 1993/08/06 12:46:26 paul Exp $
--
-- (C) Copyright 1991 Perihelion Software Ltd.



include basic.m
_test _defp 'helios.TRAN [
	include procs.m
][
	include module.m
]

rcsid[ $Id: dessfn.a,v 1.8 1993/08/06 12:46:26 paul Exp $ ]

_test _defp 'helios.C40 [

	include c40.m

	Function Sfn		-- bits_t Sfn(int n, bits_b B);

	tstb	1, R_A2
	bZd	notone
		-- uword tmp = (B & 0x1e) >> 1;
		and	0x1e, R_A2, R_TMP1
		lsh	-1, R_TMP1
		nop
	-- if (B & 1) /* tstb/bZd above */
	--	tmp |= 0x10;
	or	0x10, R_TMP1
notone:
	-- tmp |= B & 0x20;
	and	0x20, R_A2
	or	R_A2, R_TMP1

	-- return ..S[n][tmp];
	ldi	R_LR, R_TMP2			-- save link reg
	laj	4
		nop				-- dont corrupt R_LR
		addi	..S - 3, R_LR, R_ATMP	-- get address of ..S
		ldi	R_TMP2, R_LR		-- restore link reg

		-- index into table ..S[n]
	lsh	-6, R_A2		-- n * 64
	bUd	R_LR
		addi	R_A1, R_TMP1		-- tmp = (n * 64) + tmp
		addi	R_TMP1, R_ATMP		-- ..S + tmp
		-- get item out of ..S table
		ldi	*R_ATMP, R_A1result
		-- delayed branch return

	-- For speed and simplicty, the C40 version
	-- stores the table as a word NOT byte array.
..S:
	word	14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7
	word	0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8
	word	4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0
	word	15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13

	word	15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10
	word	3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5
	word	0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15
	word	13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9
	
	word	10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8
	word	13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1
	word	13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7
	word	1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12
	
	word	7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15
	word	13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9
	word	10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4
	word	3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14
	
	word	2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9
	word	14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6
	word	4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14
	word	11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3
	
	word	12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11
	word	10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8
	word	9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6
	word	4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13
	
	word	4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1
	word	13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6
	word	1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2
	word	6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12
	
	word	13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7
	word	1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2
	word	7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8
	word	2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11
][
	_test _defp 'helios.arm [

		include arm.m

		Function Sfn

		-- adr	a4,..S
		-- add	a4, pc, ..S - 8
		lea	a4, ..S
	
	
		and     a3,a2,#0x0000001E
		mov     a3,a3 asr #1
		ands    ip,a2,#0x00000001
		orrne   a3,a3,#0x00000010
		and     a2,a2,#0x00000020
		orr     a2,a2,a3
		add     a1,a2,a1 lsl #6
		ldrb    a1,(a4,a1)
	
		movs    pc,lk

	][
		proc Sfn
		[
			word		n	-- apply Sn
			word		B	-- ls 6 bits are input
		]
		[
			word		ix	-- table index
			word		S	-- ptr to S table
		]
		[
			ldc	..S-2		-- pickup ptr to Sfn
			ldpi	store S		-- table

			B 			-- get B
			ldc #1e and		-- isolate middle 4 bits
			ldc 1 shr		-- shift down to bottom
			store ix		-- put in ix

			if[ B ldc 1 and ]	-- if ls bit of B is set
			[ ix ldc #10 or store ix ] -- set bit 4 of ix
	
			B ldc #20 and		-- isolate bit 5 of B
			ix or store ix		-- set as bit 5 of ix

			n ldc 64 prod		-- index to Sn[0]
			ix add			-- add ix
			S			-- get base of table
			bsub lb			-- get value from table

			-- return with value
		]
	]

	-- standard packed byte table for processors other
	-- than the 'C40
..S:
	byte	14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7
	byte	0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8
	byte	4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0
	byte	15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13
	
	byte	15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10
	byte	3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5
	byte	0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15
	byte	13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9
	
	byte	10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8
	byte	13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1
	byte	13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7
	byte	1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12
	
	byte	7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15
	byte	13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9
	byte	10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4
	byte	3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14
	
	byte	2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9
	byte	14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6
	byte	4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14
	byte	11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3
	
	byte	12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11
	byte	10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8
	byte	9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6
	byte	4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13
	
	byte	4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1
	byte	13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6
	byte	1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2
	byte	6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12
	
	byte	13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7
	byte	1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2
	byte	7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8
	byte	2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11
]
