rpc_clntout.c: 	f_print(fout, "\nstatic struct timeval TIMEOUT = { %d, 0 };\n",
rpc_clntout.c: 			f_print(fout, "\n");
rpc_clntout.c: 			f_print(fout, "*\n");
rpc_clntout.c: 			f_print(fout, "(argp, clnt)\n");
rpc_clntout.c: 			f_print(fout, "\t");
rpc_clntout.c: 			f_print(fout, "*argp;\n");
rpc_clntout.c: 			f_print(fout, "\tCLIENT *clnt;\n");
rpc_clntout.c: 			f_print(fout, "{\n");
rpc_clntout.c: 			f_print(fout, "}\n\n");
rpc_clntout.c: 	f_print(fout, "\tstatic ");
rpc_clntout.c: 		f_print(fout, "char ");
rpc_clntout.c: 	f_print(fout, "res;\n");
rpc_clntout.c: 	f_print(fout, "\n");
rpc_clntout.c: 	f_print(fout, "\tbzero(%sres, sizeof(res));\n", ampr(proc->res_type));
rpc_clntout.c: 	f_print(fout,
rpc_clntout.c: 	f_print(fout, "\t\treturn (NULL);\n");
rpc_clntout.c: 	f_print(fout, "\t}\n");
rpc_clntout.c: 		f_print(fout, "\treturn ((void *)%sres);\n",
rpc_clntout.c: 		f_print(fout, "\treturn (%sres);\n", ampr(proc->res_type));
rpc_cout.c: 	f_print(fout, "bool_t\n");
rpc_cout.c: 	f_print(fout, "xdr_%s(xdrs, objp)\n", def->def_name);
rpc_cout.c: 	f_print(fout, "\tXDR *xdrs;\n");
rpc_cout.c: 	f_print(fout, "\t%s ", def->def_name);
rpc_cout.c: 		f_print(fout, "*");
rpc_cout.c: 	f_print(fout, "objp;\n");
rpc_cout.c: 	f_print(fout, "{\n");
rpc_cout.c: 	f_print(fout, "\treturn (TRUE);\n");
rpc_cout.c: 	f_print(fout, "}\n");
rpc_cout.c: 	f_print(fout, "if (!xdr_%s(xdrs", name);
rpc_cout.c: 	f_print(fout, ", %s", arg);
rpc_cout.c: 		f_print(fout, ", sizeof(bool_t), xdr_bool");
rpc_cout.c: 		f_print(fout, ", sizeof(");
rpc_cout.c: 			f_print(fout, "%s ", prefix);
rpc_cout.c: 		f_print(fout, "%s), xdr_%s", type, type);
rpc_cout.c: 	f_print(fout, ")) {\n");
rpc_cout.c: 	f_print(fout, "\treturn (FALSE);\n");
rpc_cout.c: 	f_print(fout, "}\n");
rpc_cout.c: 	f_print(fout, "\n\n");
rpc_cout.c: 		f_print(fout, "%s", objname);
rpc_cout.c: 			f_print(fout, "%s", objname);
rpc_cout.c: 				f_print(fout, "%s.%s_val, (u_int *)%s.%s_len",
rpc_cout.c: 				f_print(fout, "&%s->%s_val, (u_int *)&%s->%s_len",
rpc_cout.c: 	f_print(fout, "\tswitch (objp->%s) {\n", def->def.un.enum_decl.name);
rpc_cout.c: 		f_print(fout, "\tcase %s:\n", cl->case_name);
rpc_cout.c: 		f_print(fout, "\t\tbreak;\n");
rpc_cout.c: 			f_print(fout, "\tdefault:\n");
rpc_cout.c: 			f_print(fout, "\t\tbreak;\n");
rpc_cout.c: 		f_print(fout, "\tdefault:\n");
rpc_cout.c: 		f_print(fout, "\t\treturn (FALSE);\n");
rpc_cout.c: 	f_print(fout, "\t}\n");
rpc_hout.c: 		f_print(fout, "\n");
rpc_hout.c: 		f_print(fout, "bool_t xdr_%s();\n", def->def_name);
rpc_hout.c: 		f_print(fout, "\n");
rpc_hout.c: 	f_print(fout, "struct %s {\n", name);
rpc_hout.c: 	f_print(fout, "};\n");
rpc_hout.c: 	f_print(fout, "typedef struct %s %s;\n", name, name);
rpc_hout.c: 	f_print(fout, "struct %s {\n", name);
rpc_hout.c: 		f_print(fout, "\tbool_t %s;\n", decl->name);
rpc_hout.c: 		f_print(fout, "\t%s %s;\n", decl->type, decl->name);
rpc_hout.c: 	f_print(fout, "\tunion {\n");
rpc_hout.c: 	f_print(fout, "\t} %s_u;\n", name);
rpc_hout.c: 	f_print(fout, "};\n");
rpc_hout.c: 	f_print(fout, "typedef struct %s %s;\n", name, name);
rpc_hout.c: 	f_print(fout, "#define %s %s\n", name, num);
rpc_hout.c: 	f_print(fout, "#define %s ((u_long)%s)\n", name, num);
rpc_hout.c: 	f_print(fout, "extern ");
rpc_hout.c: 			f_print(fout, "enum ");
rpc_hout.c: 			f_print(fout, "struct ");
rpc_hout.c: 		f_print(fout, "bool_t *");
rpc_hout.c: 		f_print(fout, "char **");
rpc_hout.c: 		f_print(fout, "%s *", fixtype(proc->res_type));
rpc_hout.c: 	f_print(fout, "();\n");
rpc_hout.c: 	f_print(fout, "enum %s {\n", name);
rpc_hout.c: 		f_print(fout, "\t%s", l->name);
rpc_hout.c: 			f_print(fout, " = %s", l->assignment);
rpc_hout.c: 				f_print(fout, " = %d", count++);
rpc_hout.c: 				f_print(fout, " = %s + %d", last, count++);
rpc_hout.c: 		if (l->next) f_print(fout, ",\n");
rpc_hout.c: 		else f_print(fout, "\n");
rpc_hout.c: 	f_print(fout, "};\n");
rpc_hout.c: 	f_print(fout, "typedef enum %s %s;\n", name, name);
rpc_hout.c: 		f_print(fout, "typedef ");
rpc_hout.c: 			f_print(fout, "struct {\n");
rpc_hout.c: 			f_print(fout, "\tu_int %s_len;\n", name);
rpc_hout.c: 			f_print(fout, "\t%s%s *%s_val;\n", prefix, old, name);
rpc_hout.c: 			f_print(fout, "} %s", name);
rpc_hout.c: 			f_print(fout, "%s%s *%s", prefix, old, name);
rpc_hout.c: 			f_print(fout, "%s%s %s[%s]", prefix, old, name,
rpc_hout.c: 			f_print(fout, "%s%s *%s", prefix, old, name);
rpc_hout.c: 		f_print(fout, ";\n");
rpc_hout.c: 		f_print(fout, "struct ");
rpc_hout.c: 		f_print(fout, "char *%s", dec->name);
rpc_hout.c: 			f_print(fout, "%s%s %s", prefix, type, dec->name);
rpc_hout.c: 			f_print(fout, "%s%s %s[%s]", prefix, type, dec->name,
rpc_hout.c: 			f_print(fout, "%s%s *%s", prefix, type, dec->name);
rpc_hout.c: 			f_print(fout, "struct {\n");
rpc_hout.c: 			f_print(fout, "\tu_int %s_len;\n", dec->name);
rpc_hout.c: 			f_print(fout, "\t%s%s *%s_val;\n", prefix, type, dec->name);
rpc_hout.c: 			f_print(fout, "} %s", dec->name);
rpc_hout.c: 	f_print(fout, ";\n");
rpc_main.c: 		f_print(stderr,
rpc_main.c: 		f_print(stderr,
rpc_main.c: 		f_print(stderr,
rpc_main.c: 		f_print(stderr, "%s: output would overwrite %s\n", cmdname,
rpc_main.c: 		f_print(stderr, "%s: unable to open ", cmdname);
rpc_main.c: 		f_print(stderr, "%s: ", cmdname);
rpc_main.c: 	f_print(fout, "#include <rpc/rpc.h>\n");
rpc_main.c: 		f_print(fout, "#include \"%s\"\n", include);
rpc_main.c: 	f_print(fout, "#include <stdio.h>\n");
rpc_main.c: 	f_print(fout, "#include <rpc/rpc.h>\n");
rpc_main.c: 		f_print(fout, "#include \"%s\"\n", include);
rpc_main.c: 	f_print(fout, "#include <rpc/rpc.h>\n");
rpc_main.c: 	f_print(fout, "#include <sys/time.h>\n");
rpc_main.c: 		f_print(fout, "#include \"%s\"\n", include);
rpc_util.c: 			f_print(fout, "enum ");
rpc_util.c: 			f_print(fout, "struct ");
rpc_util.c: 		f_print(fout, "bool_t ");
rpc_util.c: 		f_print(fout, "char *");
rpc_util.c: 		f_print(fout, "%s ", follow ? fixtype(type) : type);
rpc_util.c: 	f_print(fout, "%s_%s", locase(pname), vnum);
rpc_util.c: 	f_print(stderr, "%s, line %d: ", infilename, linenum);
rpc_util.c: 	f_print(stderr, "%s\n", msg);
rpc_util.c: 		f_print(stderr, "too many files!\n");
rpc_scan.c: 	f_print(fout, "%s", line + 1);
rpc_svcout.c: 				f_print(fout, "\nstatic void ");
rpc_svcout.c: 				f_print(fout, "();");
rpc_svcout.c: 	f_print(fout, "\n\n");
rpc_svcout.c: 	f_print(fout, "main()\n");
rpc_svcout.c: 	f_print(fout, "{\n");
rpc_svcout.c: 	f_print(fout, "\tSVCXPRT *%s;\n", TRANSP);
rpc_svcout.c: 	f_print(fout, "\n");
rpc_svcout.c: 			f_print(fout, "\tpmap_unset(%s, %s);\n", def->def_name, vp->vers_name);
rpc_svcout.c: 	f_print(fout, "\n");
rpc_svcout.c: 	f_print(fout, "\t%s = svc%s_create(RPC_ANYSOCK", TRANSP, transp);
rpc_svcout.c: 		f_print(fout, ", 0, 0");
rpc_svcout.c: 	f_print(fout, ");\n");
rpc_svcout.c: 	f_print(fout, "\tif (%s == NULL) {\n", TRANSP);
rpc_svcout.c: 	f_print(fout, "\t\tfprintf(stderr, \"cannot create %s service.\\n\");\n", transp);
rpc_svcout.c: 	f_print(fout, "\t\texit(1);\n");
rpc_svcout.c: 	f_print(fout, "\t}\n");
rpc_svcout.c: 			f_print(fout,
rpc_svcout.c: 			f_print(fout, ", IPPROTO_%s)) {\n",
rpc_svcout.c: 			f_print(fout,
rpc_svcout.c: 			f_print(fout, "\t\texit(1);\n");
rpc_svcout.c: 			f_print(fout, "\t}\n");
rpc_svcout.c: 	f_print(fout, "\tsvc_run();\n");
rpc_svcout.c: 	f_print(fout, "\tfprintf(stderr, \"svc_run returned\\n\");\n");
rpc_svcout.c: 	f_print(fout, "\texit(1);\n");
rpc_svcout.c: 	f_print(fout, "}\n");
rpc_svcout.c: 		f_print(fout, "\n");
rpc_svcout.c: 			f_print(fout, "%s ", storage);
rpc_svcout.c: 		f_print(fout, "void\n");
rpc_svcout.c: 		f_print(fout, "(%s, %s)\n", RQSTP, TRANSP);
rpc_svcout.c: 		f_print(fout, "	struct svc_req *%s;\n", RQSTP);
rpc_svcout.c: 		f_print(fout, "	SVCXPRT *%s;\n", TRANSP);
rpc_svcout.c: 		f_print(fout, "{\n");
rpc_svcout.c: 		f_print(fout, "\tunion {\n");
rpc_svcout.c: 			f_print(fout, "\t\t");
rpc_svcout.c: 			f_print(fout, "_arg;\n");
rpc_svcout.c: 			f_print(fout, "\t\tint fill;\n");
rpc_svcout.c: 		f_print(fout, "\t} %s;\n", ARG);
rpc_svcout.c: 		f_print(fout, "\tchar *%s;\n", RESULT);
rpc_svcout.c: 		f_print(fout, "\tbool_t (*xdr_%s)(), (*xdr_%s)();\n", ARG, RESULT);
rpc_svcout.c: 		f_print(fout, "\tchar *(*%s)();\n", ROUTINE);
rpc_svcout.c: 		f_print(fout, "\n");
rpc_svcout.c: 		f_print(fout, "\tswitch (%s->rq_proc) {\n", RQSTP);
rpc_svcout.c: 			f_print(fout, "\tcase NULLPROC:\n");
rpc_svcout.c: 			f_print(fout, "\t\tsvc_sendreply(%s, xdr_void, NULL);\n", TRANSP);
rpc_svcout.c: 			f_print(fout, "\t\treturn;\n\n");
rpc_svcout.c: 			f_print(fout, "\tcase %s:\n", proc->proc_name);
rpc_svcout.c: 			f_print(fout, "\t\txdr_%s = xdr_%s;\n", ARG, 
rpc_svcout.c: 			f_print(fout, "\t\txdr_%s = xdr_%s;\n", RESULT, 
rpc_svcout.c: 			f_print(fout, "\t\t%s = (char *(*)()) ", ROUTINE);
rpc_svcout.c: 			f_print(fout, ";\n");
rpc_svcout.c: 			f_print(fout, "\t\tbreak;\n\n");
rpc_svcout.c: 		f_print(fout, "\tdefault:\n");
rpc_svcout.c: 		f_print(fout, "\t\treturn;\n");
rpc_svcout.c: 		f_print(fout, "\t}\n");
rpc_svcout.c: 		f_print(fout, "\tbzero(&%s, sizeof(%s));\n", ARG, ARG);
rpc_svcout.c: 		f_print(fout, "\t\treturn;\n");
rpc_svcout.c: 		f_print(fout, "\t}\n");
rpc_svcout.c: 		f_print(fout, "\t%s = (*%s)(&%s, %s);\n", RESULT, ROUTINE, ARG,
rpc_svcout.c: 		f_print(fout, 
rpc_svcout.c: 		f_print(fout, "\t}\n");
rpc_svcout.c: 		f_print(fout, "\t\tfprintf(stderr, \"unable to free arguments\\n\");\n");
rpc_svcout.c: 		f_print(fout, "\t\texit(1);\n");
rpc_svcout.c: 		f_print(fout, "\t}\n");
rpc_svcout.c: 		f_print(fout, "}\n\n");
rpc_svcout.c: 	f_print(fout, "\t\tsvcerr_%s(%s);\n", err, transp);
rpc_svcout.c: 	f_print(fout, "\tif (!svc_%s(%s, xdr_%s, %s%s)) {\n",
