/*{{{  Introductory Comment */

/*--------------------------------------------------------------*/
/* Helios V1.3.1 release description file			*/
/*								*/
/* This file contains the names of all the files which		*/
/* constitute a release of Helios. Only the files named here	*/
/* should be on a release master disc. 				*/
/*								*/
/* This file is written as input to cpp, the output will be a	*/
/* shell script which will perform the required actions when	*/
/* sourced.							*/
/* 								*/
/* The possible commands are:					*/
/*								*/
/* $(CPP) -DHELIOS=XXX [-DHPROC=YYY] ...			*/
/*		Test that all release files exist		*/
/*								*/
/* $(CPP) -DCOPY -DHELIOS=XXX -DRELDIR=ZZZ [-DHPROC=YYY] ...	*/
/* 		Copy release to given RELease DIRectory		*/
/*								*/
/* $(CPP) -DTAR -DHELIOS=XXX -DTARFILE=ZZZ [-DHPROC=YYY] ...	*/
/*		Generate a TAR file of the release		*/
/*								*/
/* $(CPP) -DEXTRAS -DHELIOS=XXX -DTARFILE=ZZZ [-DHPROC=YYY] ...	*/
/*		Test that no extra files exist		    	*/
/*								*/
/* Defines:							*/
/*								*/
/* HELIOS	- pathname of helios system to release		*/
/* RELDIR	- pathname of destination release directory	*/
/* TARFILE	- pathname of destination tar file		*/
/* HPROC	- optional processor type (default = TRAN)	*/
/*								*/
/* Any further -D options define the components to be released	*/
/*								*/
/* SYSTEM	- Standard system, multi-user multi-processor	*/
/* BASIC	- Cut down system without any network software	*/
/* TINY		- Tiny Helios, single-user single-processor	*/
/* MULTI_SINGLE - multi-user single-processor			*/
/* DEBUG	- debugger					*/
/* FS		- File System					*/
/* TCPIP	- TCP/IP system					*/
/* X11R4	- X Windows V11 Release 4			*/
/* PC		- Include PC specific files			*/
/*								*/
/*--------------------------------------------------------------*/
/* $Id: Files,v 1.48 1994/01/07 17:51:34 nickc Exp $ */

/*}}}*/
/*{{{  Setup */

#ifdef unix
#undef unix
#endif

#ifndef HELIOS
# ifdef HPROC
#  define HELIOS /hrel/V1.3.1/HPROC/Binaries
# else
#  error Must define the HELIOS parameter
# endif
#endif

/* NB/ must use $dir rather than HELIOS in macros below as we
 * define C40 and TRAN and these will be substituted into any
 * use of HELIOS.
 */

set dir = HELIOS

/*}}}*/
/*{{{  RELEASE macros */

#ifdef COPY
#  ifndef RELDIR
#    error Must define a RELDIR parameter when creating COPY script
#  endif
   set reldir = RELDIR
   echo Copying Helios 1.3.1 files from $dir to $reldir
#  define RELEASE(x) cp $dir/x  $reldir/x
#  define RELEASE2(x,y) cp $dir/x $reldir/y
#  define RELEASEDIR(x) mkdir $reldir/x
#elif defined TAR
#  define RELEASE(x) echo x >> relfiles
#  define RELEASE2(x,y) cp $dir/x $dir/y ; echo y >> relfiles
#  define RELEASEDIR(x) echo Processing x ...
#elif defined LIST 
   echo Creating \"listfiles\" of expected contents of Helios 1.3.1 release
#  define RELEASE(x) echo x >> listfiles
#  define RELEASE2(x,y) echo x y >> listfiles
#  define RELEASEDIR(x) echo Processing x ...
#elif defined EXTRAS
   echo Creating \"extrafiles\" containing a list of non-Helios 1.3.1 files in $dir
#  define RELEASE(x)    rm -f found/x
#  define RELEASE2(x,y) rm -f found/x ; rm -f found/y
#  define RELEASEDIR(x) 
#  define SYSTEM
#  define DEBUG
#  define CC
#  define TCPIP
#  define MULTI_SINGLE
#else
   echo Testing for omissions of Helios 1.3.1 files in $dir
#  define RELEASE(x) test -f $dir/x || echo File $dir/x does not exist
#  define RELEASE2(x,y) test -f $dir/x || echo File $dir/x does not exist
#  define RELEASEDIR(x) test -d $dir/x || echo Directory $dir/x does not exist
#endif

/*}}}*/
/*{{{  Pre Processing */

#ifdef TAR
rm -f relfiles
#endif

#if defined LIST
rm -f listfiles list.rel
#endif

#ifdef EXTRAS
rm -f expected
rm -fr found
mkdir found
lndir -silent $dir found
#endif

#if defined(SYSTEM) || defined(BASIC) || defined(TINY) || defined(MULTI_SINGLE)
#  define BIN
#  define LIB
#  define ETC
#  define LOCAL
#  define MISC
#  define EXAMPLES
#  define HELP
#endif

#define TRAN 1
#define C40  2

#ifdef HPROC
# if HPROC != TRAN && HPROC != C40 
   echo Unknown processor type in HPROC parameter
# endif
#else
# define HPROC TRAN
  echo Assuming that processor type is Transputer
#endif

#if defined(CC)
#  define SA
#  define INCLUDE
#endif

/*}}}*/
/*{{{  Directories */

#ifdef BIN
/*{{{  bin */

RELEASEDIR(bin)

/* Standard commands						*/

RELEASE(bin/ascii)
RELEASE(bin/atob)
RELEASE(bin/basename)
RELEASE(bin/bsplit)
RELEASE(bin/btoa)
RELEASE(bin/c)
RELEASE(bin/cache)
RELEASE(bin/cal)
RELEASE(bin/cat)
RELEASE(bin/chmod)
RELEASE(bin/clear)
RELEASE(bin/cmp)
RELEASE(bin/colrm)
RELEASE(bin/comm)
RELEASE(bin/compress)
RELEASE(bin/compress.14)
RELEASE(bin/cp)
RELEASE(bin/date)
RELEASE(bin/df)
RELEASE(bin/diff)
RELEASE(bin/dirname)
RELEASE(bin/du)
RELEASE(bin/dump)
RELEASE(bin/egrep)
RELEASE(bin/emacs)
RELEASE(bin/emacs.old)
RELEASE(bin/false)
RELEASE(bin/fgrep)
RELEASE(bin/find)
RELEASE(bin/fold)
RELEASE(bin/gdi)
RELEASE(bin/grep)
RELEASE(bin/head)
RELEASE(bin/join)
RELEASE(bin/leave)
#ifndef BASIC
RELEASE(bin/lb)
#endif
RELEASE(bin/ln)
RELEASE(bin/loadpac)
RELEASE(bin/ls)
RELEASE(bin/make)
RELEASE(bin/map)
RELEASE(bin/mem)
RELEASE(bin/mkdir)
RELEASE(bin/more)
RELEASE(bin/mv)
RELEASE(bin/remote.nrm)
RELEASE(bin/objed)
RELEASE(bin/od)
RELEASE(bin/pr)
RELEASE(bin/refine)
RELEASE(bin/rev)
RELEASE(bin/rm)
RELEASE(bin/rmdir)
RELEASE(bin/shell)
RELEASE(bin/sleep)
RELEASE(bin/sort)
RELEASE(bin/split)
RELEASE(bin/strings)
RELEASE(bin/sysbuild)
RELEASE(bin/sysbreak)
RELEASE(bin/tail)
RELEASE(bin/tcp)
RELEASE(bin/tee)
RELEASE(bin/test)
RELEASE(bin/touch)
RELEASE(bin/true)
RELEASE(bin/uniq)
RELEASE(bin/waitfor)
RELEASE(bin/wc)
RELEASE(bin/which)
RELEASE(bin/xlatecr)
RELEASE(bin/yes)

/* Network commands						*/

RELEASE(bin/stopio)
RELEASE(bin/rebootio)
RELEASE(bin/logname)
RELEASE(bin/tty)
RELEASE(bin/id)
RELEASE(bin/uptime)
RELEASE(bin/run)
RELEASE(bin/passadm)

#if HPROC == TRAN
RELEASE(bin/access)
RELEASE(bin/asm)
RELEASE(bin/matrix)
#endif

#if HPROC == C40
RELEASE(bin/idrom)
RELEASE(bin/slice)
RELEASE(bin/threadps)
#endif

#ifdef BASIC
RELEASE2(bin/login.ss,bin/login)
RELEASE2(bin/newuser.su,bin/newuser)
RELEASE2(bin/ps.sp,bin/ps)
RELEASE2(bin/loaded.sp,bin/loaded)
RELEASE2(bin/wsh.sp,bin/wsh)
RELEASE2(bin/kill.sp,bin/kill)
#endif

#ifdef TINY
RELEASE(bin/cdl)
RELEASE(bin/diag_tfm)
RELEASE(bin/findtfm)
RELEASE2(bin/login.ss,bin/login)
RELEASE2(bin/newuser.su,bin/newuser)
RELEASE2(bin/ps.sp,bin/ps)
RELEASE2(bin/loaded.sp,bin/loaded)
RELEASE2(bin/wsh.sp,bin/wsh)
RELEASE2(bin/kill.sp,bin/kill)
#endif

#ifdef MULTI_SINGLE
RELEASE(bin/cdl)
RELEASE(bin/diag_tfm)
RELEASE(bin/findtfm)
RELEASE2(bin/login.sp,bin/login)
RELEASE2(bin/ps.sp,bin/ps)
RELEASE2(bin/loaded.sp,bin/loaded)
RELEASE2(bin/wsh.sp,bin/wsh)
RELEASE2(bin/kill.sp,bin/kill)
RELEASE2(bin/startns.sp,bin/startns)
RELEASE(bin/newuser)
RELEASE(bin/write)
RELEASE(bin/wall)
RELEASE(bin/users)
RELEASE(bin/whoami)
RELEASE(bin/who)
RELEASE(bin/sendto)
RELEASE(bin/findsm)
#endif

#ifdef SYSTEM
RELEASE(bin/cdl)
RELEASE(bin/diag_tfm)
RELEASE(bin/diag_sm)
RELEASE(bin/findtfm)
RELEASE(bin/login)
RELEASE(bin/ps)
RELEASE(bin/loaded)
RELEASE(bin/wsh)
RELEASE(bin/kill)
RELEASE(bin/startns)
RELEASE(bin/newuser)
RELEASE(bin/write)
RELEASE(bin/wall)
RELEASE(bin/users)
RELEASE(bin/whoami)
RELEASE(bin/who)
RELEASE(bin/sendto)
RELEASE(bin/diag_ns)
RELEASE(bin/findsm)
RELEASE(bin/findns)
RELEASE(bin/domain)
RELEASE(bin/network)
RELEASE(bin/elink)
RELEASE(bin/plink)
RELEASE(bin/dlink)
RELEASE(bin/lstatus)
RELEASE(bin/rmgen)
RELEASE(bin/remote)
RELEASE(bin/joinnet)
RELEASE(bin/clink)
RELEASE(bin/rboot)
#if HPROC == TRAN
RELEASE(bin/pa_rboot)
RELEASE(bin/tr_reset)
RELEASE(bin/pa_reset)
#endif
#endif

#ifdef TCPIP
RELEASE(bin/ftp)
RELEASE(bin/lpc)
RELEASE(bin/lpq)
RELEASE(bin/lpr)
RELEASE(bin/lprm)
RELEASE(bin/lptest)
RELEASE(bin/mail)
RELEASE(bin/pall)
RELEASE(bin/ping)
RELEASE(bin/rcp)
RELEASE(bin/rlogin)
RELEASE(bin/route)
RELEASE(bin/rsh)
RELEASE(bin/setterm)
RELEASE(bin/telnet)
#endif

#ifdef HELP
RELEASE(bin/dbbuild)
RELEASE(bin/dbdump)
RELEASE(bin/dbprint)
RELEASE(bin/help)
RELEASE(bin/truncate)
#endif
  
#ifdef CC
RELEASEDIR(bin)
RELEASE(bin/cc)
RELEASE(bin/ncc)
RELEASE(bin/ld)
RELEASE(bin/imdump)
RELEASE(bin/objdump)
RELEASE(bin/as)
RELEASE(bin/disas)
#endif
  

/*}}}*/
#endif /* BIN */

#ifdef LIB
/*{{{  lib */

RELEASEDIR(lib)

/* System files							*/

RELEASE(lib/alias)
RELEASE(lib/bsd.lib)
RELEASE(lib/c.lib)
RELEASE(lib/c0.o)
RELEASE(lib/Clib)
RELEASE(lib/clib.def)
RELEASE(lib/cstart.o)
RELEASE(lib/Fault)
RELEASE(lib/fault.def)
RELEASE(lib/fifo)
RELEASE(lib/fplib.def)
RELEASE(lib/helios.lib)
RELEASE(lib/init)
RELEASE(lib/kernel.def)
RELEASE(lib/nucleus)
RELEASE(lib/null)
RELEASE(lib/pipe)
RELEASE(lib/Posix)
RELEASE(lib/posix.def)
RELEASE(lib/ram)
RELEASE(lib/s0.o)
RELEASE(lib/servlib.def)
RELEASE(lib/sstart.o)
RELEASE(lib/syslib.def)
RELEASE(lib/termcap.lib)
RELEASE(lib/util)
RELEASE(lib/util.def)
RELEASE(lib/vect.lib)

#if HPROC == TRAN
RELEASE(lib/nboot.i)
RELEASE(lib/fpclib)
RELEASE(lib/fpclib.def)
RELEASE(lib/FpLib.t4)
RELEASE(lib/FpLib.t8)
#else
RELEASE(lib/FpLib)
#endif

#if HPROC == C40
RELEASE(lib/IEEE64.lib)
RELEASE(lib/c40boot.i)
RELEASE(lib/c40aboot.i)
RELEASE(lib/c40hboot.i)
RELEASE(lib/c40mboot.i)
RELEASE(lib/c40rombt.i)
RELEASE(lib/c40sboot.i)
RELEASE(lib/nucleus.sml)
#endif

#ifdef DEBUG
RELEASE(lib/dlib)
RELEASE(lib/dlib.def)
#endif

#ifdef TCPIP
RELEASE(lib/curses.lib)
RELEASE(lib/ether.d)
RELEASE(lib/ftpd)
RELEASE(lib/inetd)
RELEASE(lib/lpd)
RELEASE(lib/lpd_aux)
RELEASE(lib/nfs)
RELEASE(lib/pc-ether.d)
RELEASE(lib/rexecd)
RELEASE(lib/rlogind)
RELEASE(lib/rshd)
RELEASE(lib/sendmail)
RELEASE(lib/smtp)
RELEASE(lib/telnetd)
RELEASE(lib/tcpip)
RELEASE(lib/tpseudo.d)
RELEASE(lib/tserial.d)
RELEASE(lib/ttyserv)
#endif

#if defined(TINY) || defined(MULTI_SINGLE) || defined(SYSTEM)
RELEASE(lib/RmLib)
RELEASE(lib/RmLib.def)
RELEASE(lib/farm.lib)
#endif

#ifdef TINY
RELEASE2(lib/tfm.sp,lib/tfm)
#endif

#ifdef MULTI_SINGLE
RELEASE2(lib/tfm.sp,lib/tfm)
RELEASE2(lib/session.sp,lib/session)
RELEASE(lib/session.lib)
#endif

#ifdef SYSTEM
RELEASE(lib/netagent)
RELEASE(lib/netserv)
RELEASE(lib/null_ra.d)
RELEASE(lib/session)
RELEASE(lib/session.lib)
RELEASE(lib/tfm)
#if HPROC == TRAN
RELEASE(lib/tram_ra.d)
RELEASE(lib/pa_ra.d)
#endif
#endif

#ifdef DEBUG
RELEASE(lib/tla)
#endif

/* Others							*/

#ifdef HELP
RELEASE(lib/help0.dct)
RELEASE(lib/help0.txt)
#endif

/*}}}*/
#endif /* LIB */

#ifdef INCLUDE
/*{{{  include */

RELEASEDIR(include)

/* Helios headers						*/
RELEASE(include/asm.h)
RELEASE(include/attrib.h)
RELEASE(include/bytblt.h)
RELEASE(include/c40.h)
RELEASE(include/codes.h)
RELEASE(include/config.h)
RELEASE(include/cpustate.h)
RELEASE(include/dbm.h)
RELEASE(include/device.h)
RELEASE(include/environ.h)
RELEASE(include/event.h)
RELEASE(include/fault.h)
RELEASE(include/gsp.h)
RELEASE(include/helios.h)
RELEASE(include/ioevents.h)
RELEASE(include/lb.h)
RELEASE(include/link.h)
RELEASE(include/memory.h)
RELEASE(include/message.h)
RELEASE(include/module.h)
RELEASE(include/netdb.h)
RELEASE(include/nonansi.h)
RELEASE(include/process.h)
RELEASE(include/protect.h)
RELEASE(include/queue.h)
RELEASE(include/root.h)
RELEASE(include/sem.h)
RELEASE(include/servlib.h)
RELEASE(include/syslib.h)
RELEASE(include/task.h)
RELEASE(include/vectlib.h)
#if HPROC == C40
RELEASE(include/IEEE64.h)
#endif

/* ANSI C Headers						*/
RELEASE(include/assert.h)
RELEASE(include/ctype.h)
RELEASE(include/float.h)
RELEASE(include/limits.h)
RELEASE(include/locale.h)
RELEASE(include/math.h)
RELEASE(include/setjmp.h)
RELEASE(include/stdarg.h)
RELEASE(include/stddef.h)
RELEASE(include/stdio.h)
RELEASE(include/stdlib.h)
RELEASE(include/string.h)
RELEASE(include/time.h)

/* POSIX headers						*/
RELEASE(include/dirent.h)
RELEASE(include/errno.h)
RELEASE(include/fcntl.h)
RELEASE(include/grp.h)
RELEASE(include/posix.h)
RELEASE(include/pwd.h)
RELEASE(include/signal.h)
RELEASE(include/termios.h)
RELEASE(include/unistd.h)


/* BSD compatibility 						*/
RELEASE(include/getopt.h)
RELEASE(include/sgtty.h)
RELEASE(include/strings.h)
RELEASE(include/sysexits.h)
RELEASE(include/syslog.h)
RELEASE(include/termcap.h)
RELEASE(include/utime.h)
RELEASE(include/varargs.h)

/* Networking headers 						*/
RELEASE(include/rmlib.h)
RELEASE(include/session.h)
RELEASE(include/farmlib.h)

/* INCLUDE/SYS directory					*/

RELEASEDIR(include/sys)

/* POSIX headers						*/
RELEASE(include/sys/dir.h)
RELEASE(include/sys/hel.h)
RELEASE(include/sys/stat.h)
RELEASE(include/sys/types.h)
RELEASE(include/sys/utsname.h)
RELEASE(include/sys/wait.h)

/* BSD compatibility						*/
RELEASE(include/sys/errno.h)
RELEASE(include/sys/file.h)
RELEASE(include/sys/ioctl.h)
RELEASE(include/sys/param.h)
RELEASE(include/sys/resource.h)
RELEASE(include/sys/signal.h)
RELEASE(include/sys/socket.h)
RELEASE(include/sys/times.h)
RELEASE(include/sys/ttychars.h)
RELEASE(include/sys/ttydev.h)
RELEASE(include/sys/time.h)
RELEASE(include/sys/uio.h)
RELEASE(include/sys/un.h)

/* TCPIP support */
RELEASEDIR(include/arpa)
RELEASE(include/arpa/ftp.h)
RELEASE(include/arpa/inet.h)
RELEASE(include/arpa/nameser.h)
RELEASE(include/arpa/telnet.h)
RELEASE(include/arpa/tftp.h)
RELEASEDIR(include/net)
RELEASE(include/net/if.h)
RELEASE(include/net/if_arp.h)
RELEASEDIR(include/netinet)
RELEASE(include/netinet/icmp_var.h)
RELEASE(include/netinet/if_ether.h)
RELEASE(include/netinet/in.h)
RELEASE(include/netinet/in_pcb.h)
RELEASE(include/netinet/in_systm.h)
RELEASE(include/netinet/in_var.h)
RELEASE(include/netinet/ip.h)
RELEASE(include/netinet/ip_icmp.h)
RELEASE(include/netinet/ip_var.h)
RELEASE(include/netinet/tcp.h)
RELEASE(include/netinet/tcp_debug.h)
RELEASE(include/netinet/tcp_fsm.h)
RELEASE(include/netinet/tcp_seq.h)
RELEASE(include/netinet/tcp_timer.h)
RELEASE(include/netinet/tcp_var.h)
RELEASE(include/netinet/tcpip.h)
RELEASE(include/netinet/udp.h)
RELEASE(include/netinet/udp_var.h)

/*}}}*/
#endif /* INCLUDE */

#ifdef ETC
/*{{{  etc */

RELEASEDIR(etc)

RELEASE(etc/default.map)
RELEASE(etc/default.rm)
RELEASE(etc/emacs.hlp)
RELEASE(etc/faults)
RELEASE(etc/motd)
RELEASE(etc/passwd)
RELEASE(etc/sayhash)
RELEASE(etc/sayings)
  
#if HPROC == C40
  RELEASE(etc/README)
  RELEASE(etc/flaws)
  RELEASE(etc/dsp1.rom)
  
  RELEASEDIR(etc/hepc)
  RELEASE(etc/hepc/hepc.rm)
  RELEASE(etc/hepc/hepc.map)
  
  RELEASEDIR(spirit40)
  RELEASE(etc/spirit40/spirit40.rm)
  RELEASE(etc/spirit40/spirit40.rom)
  RELEASE(etc/spirit40/spirit40.map)
#endif

#ifdef DEBUG
  RELEASE(etc/debug.hlp)
  RELEASE(etc/debugrc)
#endif

#ifdef TCPIP
  RELEASE(etc/devinfo.net)
  RELEASE(etc/hosts)
  RELEASE(etc/hosts.equiv)
  RELEASE(etc/inetd.conf)
  RELEASE(etc/networks)
  RELEASE(etc/printcap)
  RELEASE(etc/protocols)
  RELEASE(etc/sendmail.hf)
  RELEASE(etc/services)
  RELEASE(etc/socket.conf)
  RELEASE(etc/termcap)
#endif
  
#if defined(BASIC) || defined(TINY)
 RELEASE2(etc/initrc.tin,etc/initrc)
#else
 RELEASE(etc/initrc)
#endif
#if defined(MULTI_SINGLE) || defined(SYSTEM)
 RELEASE(etc/nsrc)
#endif

/*}}}*/
#endif /* ETC */

#ifdef LOCAL
/*{{{  local */

/* LOCAL							*/

RELEASEDIR(local)

/* LOCAL/BIN							*/

RELEASEDIR(local/bin)
RELEASE(local/bin/gmake)
RELEASE(local/bin/tar)
RELEASE(local/bin/LICENCE)
RELEASE(local/bin/README)

#ifdef TCPIP
RELEASE(local/bin/laserpri)
RELEASE(local/bin/laserp)
RELEASE(local/lib/tinybiff)
#endif
  
/* LOCAL/LIB							*/

RELEASEDIR(local/lib)

/*}}}*/
#endif /* LOCAL */

#ifdef MISC
/*{{{  Miscellaneous directories */

#if defined(SUN3) || defined(SUN4) || defined(SUN386)
RELEASEDIR(tmp0)
RELEASE2(tmp/dummy,tmp0/dummy)
RELEASEDIR(tmp1)
RELEASE2(tmp/dummy,tmp1/dummy)
RELEASEDIR(tmp2)
RELEASE2(tmp/dummy,tmp2/dummy)
RELEASEDIR(tmp3)
RELEASE2(tmp/dummy,tmp3/dummy)
#else
RELEASEDIR(tmp)
RELEASE(tmp/dummy)
#endif
RELEASEDIR(system)
RELEASE(system/in)

RELEASE(pdreadme.Z)
  
/* IO Server and host.con					*/

#ifdef PC
  RELEASE(host.con)
  RELEASE(server.exe)
  RELEASE(winsrvr.exe)
#else
  RELEASE(template.con)
  RELEASE2(unixhost.con,host.con)
  RELEASE(hydra.con)
  RELEASE2(hydra.sun4,hydra)
  RELEASE2(hydramon.sun4,hydramon)
  RELEASE2(server.sun4,server)
  RELEASE2(serverwinxv.sun4,serverwinxv)
  RELEASE2(serverwinxt.sun4,serverwinxt)
  RELEASE2(serverwinxaw.sun4,serverwinxaw)
  RELEASE2(serverwinsv.sun4,serverwindow.sun4)
  RELEASE2(hydra.sun3,hydra)
  RELEASE2(hydramon.sun3,hydramon)
  RELEASE2(server.sun3,server)
  RELEASE2(serverwinsv.sun3,serverwinsv)
  RELEASE2(serverwinxt.sun3,serverwinxt)
  RELEASE2(serverwinxaw.sun3,serverwinxaw)
# if HPROC == C40
   RELEASE(hev40.con)
# endif
#endif

/* USERS							*/

RELEASEDIR(users)

RELEASEDIR(users/root)
RELEASE(users/root/login)
RELEASE(users/root/cshrc)
#ifndef PC
RELEASE(users/root/.login)
RELEASE(users/root/.cshrc)
#endif

RELEASEDIR(users/guest)
RELEASE(users/guest/login)
RELEASE(users/guest/cshrc)
#ifndef PC
RELEASE(users/guest/.login)
RELEASE(users/guest/.cshrc)
#endif

RELEASEDIR(users/shutdown)
RELEASE(users/shutdown/login)
RELEASE(users/shutdown/cshrc)
#ifndef PC
RELEASE(users/shutdown/.login)
RELEASE(users/shutdown/.cshrc)
#endif

/*}}}*/
#endif /* MISC */

#ifdef EXAMPLES
/*{{{  examples */

RELEASEDIR(users/guest/examples)

RELEASE(users/guest/examples/README)

/* CONVOLUTION example						*/

#if 0
RELEASEDIR(users/guest/examples/convol)
RELEASE(users/guest/examples/convol/convol.cdl)
RELEASE(users/guest/examples/convol/decode.c)
RELEASE(users/guest/examples/convol/encode.c)
RELEASE(users/guest/examples/convol/hist.c)
RELEASE(users/guest/examples/convol/length.c)
RELEASE(users/guest/examples/convol/makefile)
RELEASE(users/guest/examples/convol/master.c)
RELEASE(users/guest/examples/convol/phobos1)
RELEASE(users/guest/examples/convol/phobos2)
RELEASE(users/guest/examples/convol/readme)
RELEASE(users/guest/examples/convol/show.c)
RELEASE(users/guest/examples/convol/slave.c)
#endif

/* FACTORING example						*/

RELEASEDIR(users/guest/examples/factor)
RELEASE(users/guest/examples/factor/factor.cdl)
RELEASE(users/guest/examples/factor/makefile)
RELEASE(users/guest/examples/factor/master.c)
RELEASE(users/guest/examples/factor/worker.c)

/* Hello World							*/

RELEASEDIR(users/guest/examples/hello)
RELEASE(users/guest/examples/hello/hello.c)
RELEASE(users/guest/examples/hello/makefile)

#if HPROC == C40
RELEASE(users/guest/examples/hello/hello2.s)
#endif
  
/* Load Balancer						*/

RELEASEDIR(users/guest/examples/lb)
RELEASE(users/guest/examples/lb/lb.c)
RELEASE(users/guest/examples/lb/makefile)

/* Calculation of Pi						*/

RELEASEDIR(users/guest/examples/pi)

RELEASEDIR(users/guest/examples/pi/pi_farm)
RELEASE(users/guest/examples/pi/pi_farm/control.c)
RELEASE(users/guest/examples/pi/pi_farm/makefile)
RELEASE(users/guest/examples/pi/pi_farm/pifarm.cdl)
RELEASE(users/guest/examples/pi/pi_farm/worker.c)

RELEASEDIR(users/guest/examples/pi/pi_fast)
RELEASE(users/guest/examples/pi/pi_fast/control.c)
RELEASE(users/guest/examples/pi/pi_fast/eval.c)
RELEASE(users/guest/examples/pi/pi_fast/makefile)
RELEASE(users/guest/examples/pi/pi_fast/pi.cdl)
RELEASE(users/guest/examples/pi/pi_fast/worker.c)

RELEASEDIR(users/guest/examples/pi/pi_fort)
RELEASE(users/guest/examples/pi/pi_fort/control.f)
RELEASE(users/guest/examples/pi/pi_fort/makefile)
RELEASE(users/guest/examples/pi/pi_fort/pi.cdl)
RELEASE(users/guest/examples/pi/pi_fort/worker.f)

#if HPROC == TRAN
RELEASEDIR(users/guest/examples/pi/pi_mix)
RELEASE(users/guest/examples/pi/pi_mix/pi.cdl)

RELEASEDIR(users/guest/examples/pi/pi_mod2)
RELEASE(users/guest/examples/pi/pi_mod2/control.mod)
RELEASE(users/guest/examples/pi/pi_mod2/makefile)
RELEASE(users/guest/examples/pi/pi_mod2/pi.cdl)
RELEASE(users/guest/examples/pi/pi_mod2/termbase.mod)
RELEASE(users/guest/examples/pi/pi_mod2/worker.mod)

RELEASEDIR(users/guest/examples/pi/pi_pasc)
RELEASE(users/guest/examples/pi/pi_pasc/control.pas)
RELEASE(users/guest/examples/pi/pi_pasc/makefile)
RELEASE(users/guest/examples/pi/pi_pasc/pi.cdl)
RELEASE(users/guest/examples/pi/pi_pasc/worker.pas)
#endif /* HPROC == TRAN */

RELEASEDIR(users/guest/examples/pi/pi_ring)
RELEASE(users/guest/examples/pi/pi_ring/control.c)
RELEASE(users/guest/examples/pi/pi_ring/makefile)
RELEASE(users/guest/examples/pi/pi_ring/pi.cdl)
RELEASE(users/guest/examples/pi/pi_ring/worker.c)

RELEASEDIR(users/guest/examples/tut)
RELEASE(users/guest/examples/tut/testa1)
RELEASE(users/guest/examples/tut/testa2)
RELEASE(users/guest/examples/tut/testb1)
RELEASE(users/guest/examples/tut/testb2)
RELEASE(users/guest/examples/tut/testc1)
RELEASE(users/guest/examples/tut/testc2)

RELEASEDIR(users/guest/examples/rmlib)
RELEASE(users/guest/examples/rmlib/readme)

RELEASEDIR(users/guest/examples/rmlib/mappipe)
RELEASE(users/guest/examples/rmlib/mappipe/mappipe.c)
RELEASE(users/guest/examples/rmlib/mappipe/mappipe2.c)
RELEASE(users/guest/examples/rmlib/mappipe/readme)
RELEASE(users/guest/examples/rmlib/mappipe/makefile)

RELEASEDIR(users/guest/examples/rmlib/buildrm)
RELEASE(users/guest/examples/rmlib/buildrm/buildrm.c)
RELEASE(users/guest/examples/rmlib/buildrm/readme)
RELEASE(users/guest/examples/rmlib/buildrm/makefile)

RELEASEDIR(users/guest/examples/rmlib/owners)
RELEASE(users/guest/examples/rmlib/owners/owners.c)
RELEASE(users/guest/examples/rmlib/owners/readme)
RELEASE(users/guest/examples/rmlib/owners/makefile)

RELEASEDIR(users/guest/examples/servers)

RELEASEDIR(users/guest/examples/servers/lock)
RELEASE(users/guest/examples/servers/lock/lockserv.c)
RELEASE(users/guest/examples/servers/lock/locklib.h)
RELEASE(users/guest/examples/servers/lock/locklib.c)
RELEASE(users/guest/examples/servers/lock/locktest.c)
RELEASE(users/guest/examples/servers/lock/makefile)
RELEASE(users/guest/examples/servers/lock/readme)

RELEASEDIR(users/guest/examples/servers/include)
RELEASE(users/guest/examples/servers/include/include.c)
RELEASE(users/guest/examples/servers/include/include.h)
RELEASE(users/guest/examples/servers/include/buildinc.c)
RELEASE(users/guest/examples/servers/include/stopinc.c)
RELEASE(users/guest/examples/servers/include/makefile)
RELEASE(users/guest/examples/servers/include/readme)

RELEASEDIR(users/guest/examples/servers/keyboard)
RELEASE(users/guest/examples/servers/keyboard/keyboard.c)
RELEASE(users/guest/examples/servers/keyboard/keyboard.h)
RELEASE(users/guest/examples/servers/keyboard/linkdev.c)
RELEASE(users/guest/examples/servers/keyboard/eventdev.c)
RELEASE(users/guest/examples/servers/keyboard/makefile)
RELEASE(users/guest/examples/servers/keyboard/readme)
RELEASE(users/guest/examples/servers/keyboard/device.a)
RELEASE(users/guest/examples/servers/keyboard/modend.a)

RELEASEDIR(users/guest/examples/farmlib)
RELEASE(users/guest/examples/farmlib/makefile)
RELEASE(users/guest/examples/farmlib/mandcalc.c)
RELEASE(users/guest/examples/farmlib/mandel.c)
RELEASE(users/guest/examples/farmlib/mandel.h)
RELEASE(users/guest/examples/farmlib/mandelx.c)
RELEASE(users/guest/examples/farmlib/pi.c)
RELEASE(users/guest/examples/farmlib/pi.h)
RELEASE(users/guest/examples/farmlib/pi2.c)
RELEASE(users/guest/examples/farmlib/pi2.h)
RELEASE(users/guest/examples/farmlib/pi2calc.c)
RELEASE(users/guest/examples/farmlib/pi3.c)
RELEASE(users/guest/examples/farmlib/pi3.h)
RELEASE(users/guest/examples/farmlib/pi3calc.c)
RELEASE(users/guest/examples/farmlib/readme)

#ifdef DEBUG
RELEASEDIR(users/guest/examples/tiddles)
RELEASE(users/guest/examples/tiddles/tiddles.c)
RELEASE(users/guest/examples/tiddles/makefile)
#endif

#if HPROC == C40
RELEASEDIR(local/c40-dma)
RELEASE(local/c40-dma/COPYING)
RELEASE(local/c40-dma/cats_c40.c)
RELEASE(local/c40-dma/cats_c40.h)
RELEASE(local/c40-dma/catsutil.c)
RELEASE(local/c40-dma/catsutil.h)
RELEASE(local/c40-dma/main.c)
RELEASE(local/c40-dma/makefile)
RELEASE(local/c40-dma/README)
#endif
  
#ifdef TCPIP
RELEASEDIR(local/tcpip)
RELEASEDIR(local/tcpip/example)
RELEASE(local/tcpip/example/socket.c)
RELEASEDIR(local/tcpip/pc-ether)
RELEASE(local/tcpip/pc-ether/netdev.c)
RELEASE(local/tcpip/pc-ether/devs.a)
RELEASE(local/tcpip/pc-ether/modend.a)
RELEASE(local/tcpip/pc-ether/makefile)
RELEASEDIR(local/tcpip/laserp)
RELEASE(local/tcpip/laserp/laserpri.c)
RELEASE(local/tcpip/laserp/readme)
RELEASE(local/tcpip/laserp/laserp)
RELEASE(local/tcpip/laserp/makefile)
RELEASEDIR(local/tcpip/tinybiff)
RELEASE(local/tcpip/tinybiff/tinybiff.c)
RELEASE(local/tcpip/tinybiff/readme)
RELEASE(local/tcpip/tinybiff/makefile)
#endif
  

/*}}}*/
#endif /* EXAMPLES */

#ifdef SA
/*{{{  Stand Alone */

RELEASEDIR(bin)
RELEASE(bin/sarun)
RELEASE(bin/salink)

RELEASEDIR(lib)
RELEASE(lib/salib)
RELEASE(lib/sainit)
RELEASE(lib/samath.t4)
RELEASE(lib/samath.t8)
RELEASE(lib/sa0.o)
RELEASE(lib/sasup.o)
RELEASE(lib/kernel.sa)
RELEASE(lib/syslib.sa)
RELEASE(lib/posix.sa)

RELEASEDIR(include)
RELEASE(include/linkio.h)
RELEASE(include/chanio.h)
RELEASE(include/thread.h)
RELEASE(include/trace.h)
RELEASE(include/salib.h)
RELEASE(include/sysinfo.h)

RELEASEDIR(users/guest/examples/sa)
RELEASE(users/guest/examples/sa/explore.c)
RELEASE(users/guest/examples/sa/worm.c)
RELEASE(users/guest/examples/sa/worm.h)
RELEASE(users/guest/examples/sa/sarun.c)
RELEASE(users/guest/examples/sa/makefile)

/*}}}*/
#endif

/*}}}*/
/*{{{  Post Processing */

#ifdef TAR
cd $dir
tar cvf /hsrc/TARFILE -I /hsrc/relfiles
#endif

#ifdef EXTRAS
cd found
find . -type l -print > ../extrafiles
cd ..
rm -fr found
#endif

/*}}}*/
/*{{{  Emacs Customisation */

/* Local Variables: */
/* mode: c */
/* folded-file: t */
/* End: */

/*}}}*/
