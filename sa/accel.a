----------------------------------------------------------
-- Accelerate						--
--							--
-- Run a procedure in fast RAM				--
--							--
----------------------------------------------------------

include module.m
include procs.m
include structs.m

	StartModule Accelerate -1 1000

	static
	[
		extern func	Accelerate
	]

proc Accelerate
[
	word		carrier		-- fast RAM carrier
	word		func		-- function to run
	word		nargs		-- number of arg bytes
	word		arg0		-- first argument
]
[
	word		wptr		-- pointer to entry workspace
	word		disp		-- pointer to procs display
]
[
--	carrier adc -Memory.sizeof
--	store carrier

	carrier Carrier.Addr
	carrier Carrier.Size add	-- stack top

	ldnlp -3			-- display space
	store disp
	
	disp				-- step down from display
	nargs sub			-- space for args
	ldnlp -2			-- linkage space
	store wptr			-- save it

	ptr arg0			-- source
	wptr ldnlp 2			-- dest
	nargs				-- bytes to move
	move				-- and copy
	
	ldc ..accret-2 ldpi
	wptr stnl 0			-- return address

	disp				-- module table pointer
	wptr stnl 1			-- set display
	
	ldl _ModTab ldnl 0		-- module table
	disp stnl 0

	carrier Carrier.Addr		-- vsp
	disp stnl 1

	ldlp 0
	disp stnl 2			-- and old wsp

	func				-- function to call
	wptr				-- its workspace

	gajw				-- swap into fast ram
	rev				-- get rid of old wsp
	gcall				-- and enter function

..accret:
	ajw -4			-- back to entry frame
	ldl 1			-- display
	ldnl 2			-- old wsp

	gajw			-- switch back

	rev			-- get result on top

	return			-- and quit
]

	EndModule
