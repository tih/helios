--------------------------------------------------------------------------
--                                                                      --
--                      H E L I O S   K E R N E L                       --
--                      -------------------------                       --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- sastart.a								--
--                                                                      --
--	Startup code for standalone program				--
--                                                                      --
--	Author:  NHG 28/7/87						--
--                                                                      --
--------------------------------------------------------------------------


include basic.m
include procs.m
include structs.m
include debug.m
include module.m
include tasks.m
include message.m

	-- Program structure

        align
        module  -1
.ModStart:
        word    T.Program
        word    .ModEnd-.ModStart
        blkb    31,"SStart" byte 0
        word    modnum
	word	1001
        word    .MaxData
        init
.stacksize:
	word	#2000			-- stacksize
	word 	0			-- heap size
	word	.Server

--	sccsid [%W%	%G% Copyright (C) 1987, Perihelion Software Ltd.]

----------------------------------------------------------
-- Server						--
--							--
-- entry point						--
--							--
----------------------------------------------------------

	procsym .Server
.Server:
--Mark
	ajw -2				-- space for display

	ldl 3
	stl 0				-- modtab to display

--	ldl 4 				-- set static task pointer
--	ldl 0
--	ldnl 0
--	ldnl @_MyTask
--	stnl _MyTask

	ldlp 0				-- current stack posn
	ldc .stacksize-2
	ldpi
	ldnl 0				-- get stack size
	sub				-- subtract from present pos
	ldnlp 10			-- allow for linkage + safety
	stl 1				-- set vector pointer

	ldl  4				-- bootlink
	ldlp 0				-- display address

	call .main

	-- a return from main will terminate the process
	-- (see TaskInit)
	ajw 2
	ret

.main:	
	ldl 1				-- display
	ldnl 0				-- module table
	ldnl @_main			-- module of main
	ldnl _main			-- get pointer to main
	gcall				-- enter

	EndModule


-- End of sstart.a
