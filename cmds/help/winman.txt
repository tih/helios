#000001
*p Welcome to Helios Help for MS-Windows Graphics Library
*p Use the arrow keys to select one of the options below and then press RETURN to complete your selection.  To exit Help, type Q or select "Quit".
*p
*L General enquiry
*p
*L Table of contents
*p
*L Helios Help tutorial
#000002
*p
Welcome to Helios Help for MS-Windows Graphics Library.
By using Helios Help, you can find and display
reference information on
most aspects of the Helios parallel operating system.
*p
Help is interactive; it always
provides you with
an opportunity to request further actions by presenting
you with a number of highlighted boxes for you to select.
The ones on this page are Forward, Go back, and Quit. Type G,
or select Go back, to see what happens. Re-select the tutorial and
press SPACEBAR for more information.
*N
Notice that you could have achieved the same effect by selecting Forward
or by pressing the F key.
*p
Although Help always gives you an opportunity to select
Quit to get out, the other actions you can select will depend on
the reference information being displayed. You
will now notice that you have Back as well as Forward; this is because you
are on the second screen and can review the first screen if you wish.
Select Back to review and then select Forward twice to continue this tutorial.
*N
Information can be displayed in two ways, one of these types of
display is known as
a %stitle list%s. A title list contains all the titles associated with the
topic you have requested. Each title will have a highlighted
box that you can select for further information.
By presenting you with a title list, Help can give you a
quick overview of a large number of possible choices for you to review and
choose between.
The second of the two types of display is %sreference entry text%s.
*p
If you wish to try out both types of display, Go Back to the beginning and
select "Table of contents". Help will then list all the topics
it currently holds information on. Move the cursor until it points at
"Helios command" and then press RETURN. The title list that Help will then
display in response to this selection will show
all the commands in the current version of Helios. To display the reference
entry text for a particular command,
move the cursor until it is pointing at the command you are interested
in and then press RETURN.
*N
In the "Table of Contents", one more search option is available. If you wish to look for a particular function or topic within one of the title groups in the table of contents list, move the cursor to the title group of interest and press 's'. You will be prompted for a search term to be used within the selected group - any matching items in other groups will be excluded from the search.
*p
Other keys worth remembering are :
*l ^L (CTRL-L)
*t Resize and refresh screen
*l ESC (Escape)
*t Same as Go back, but can be used to cancel search term entry
*p
For more information on the help system, search for %shelp%s.
#
*n MS-Windows Graphics Library\General interest
*P Provides API functions for use with the Microsoft Windows I/O server
*I <windows.h>
*D The %swindows.lib%s provides an API which is closely compatible with the
standard Microsoft Windows 3.1 API.  The help pages on %sWM_XXXX%s callback
messages describe all supported messages and any differences that may exist.
*p
A Helios Microsoft Windows application differs in a number of small ways.
Firstly, the %shInstance%s and %shPrevInstance%s parameters to %sWinMain%s
differ, in that the %shInstance%s parameter is the same for all applications
(the I/O server's instance handle) and %shPrevInstance%s is always NULL.
Secondly, there is no resource file associated with an application, so all
resource related API functions are not available.  Finally, the API library
functions are sharable between concurrent tasks, but it is the developer's
responsibility to ensure that any access to shared variables is handled
correctly.
*p
The following is a list of all supported API functions (there are additional
help pages for functions marked with * to clarify some minor compatibility
issues):
*c=
*c= void AdjustWindowRect(LPRECT lprc, DWORD dwStyle, BOOL bMenu)
*c=
*c= BOOL AppendMenu(HMENU hMenu, UINT uFlags, UINT ID, LPCSTR lpText)
*c=
*c= BOOL Arc(HDC hDC, int nLeftRect, int nTopRect,
*c=          int nRightRect, int nBottomRect,
*c=          int nXStartArc, int nYStartArc,
*c=          int nXEndArc,   int nYEndArc)
*c=
*c= HDC BeginPaint(HWND hWnd, PAINTSTRUCT *lpps)
*c=
*c= BOOL BitBlt(HDC hDC, int XDest, int YDest,
*c=          int width, int height,
*c=          HDC hSrc, int XSrc, int YSrc, DWORD dwRop)
*c=
*c= BOOL CheckMenuItem(HMENU hMenu, UINT idCheck, UINT uCheck)
*c=
*c= BOOL Chord(HDC hDC, int nLeftRect, int nTopRect,
*c=          int nRightRect, int nBottomRect,
*c=          int nXStartLine, int nYStartLine,
*c=          int nXEndLine,   int nYEndLine)
*c=
*c= void ClientToScreen(HWND hWnd, LPPOINT lppt)
*c=
*c= HBITMAP CreateBitmap(int nWidth, int nHeight, UINT planes,
*c=          UINT bpp, const VOID *lpvBits)
*c=
*c= HBITMAP CreateCompatibleBitmap(HDC hDC, int nWidth, int nHeight)
*c=
*c= HDC CreateCompatibleDC(HDC hDC)
*c=
*c= HBITMAP CreateDIBitmap(HDC hDC, BITMAPINFOHEADER *lpbih,
*c=          DWORD dwInit, const void *lpvBits,
*c=          BITMAPINFO *lpbi, UINT ColorUse)
*c=
*c= HFONT CreateFont(int height, int width, int escape,
*c=          int orientation, int weight, BYTE italic,
*c=          BYTE underline, BYTE strikeout, BYTE charset,
*c=          BYTE precision, BYTE clipprecision, BYTE quality,
*c=          BYTE pitch, LPCSTR lpszFace)
*c=
*c= HBRUSH CreateHatchBrush(int style, COLORREF cr)
*c=
*c= HMENU CreateMenu(void)
*c=
*c= HPALETTE CreatePalette(const LOGPALETTE *lplgpl)
*c=
*c= HBRUSH CreatePatternBrush(HBITMAP hBitmap)
*c=
*c= HPEN CreatePen(int style, int width, COLORREF color)
*c=
*c= HMENU CreatePopupMenu(void)
*c=
*c= HBRUSH CreateSolidBrush(COLORREF color)
*c=
*c= (*)HWND CreateWindow(LPCSTR lpszClassName, LPCSTR lpszWindowName,
*c=          DWORD style, int x, int y, int nWidth, int nHeight,
*c=          HWND hWndParent, HMENU hMenu, HINSTANCE hInst,
*c=          void *lpvParam)
*c=
*c= LRESULT DefWindowProc(HWND hWnd, UINT msg, WPARAM wParam,
*c=          LPARAM lParam)
*c=
*c= BOOL DeleteDC(HDC hDC)
*c=
*c= BOOL DeleteMenu(HMENU hMenu, UINT ID, UINT flags)
*c=
*c= BOOL DeleteObject(HGDIOBJ hObject)
*c=
*c= BOOL DestroyMenu(HMENU hMenu)
*c=
*c= BOOL DestroyWindow(HWND hWnd)
*c=
*c= LONG DispatchMessage(const MSG *msg)
*c=
*c= BOOL DPtoLP(HDC hDC, LPPOINT lppt, int cPoints)
*c=
*c= void DrawMenuBar(HWND hWnd)
*c=
*c= BOOL Ellipse(HDC hDC, int nLeft, int nTop,
*c=          int nRight, int nBottom)
*c=
*c= BOOL EnableMenuItem(HMENU hMenu, UINT ID, UINT flags)
*c=
*c= BOOL EnableWindow(HWND hWnd, BOOL bEnable)
*c=
*c= void EndPaint(HWND hWnd, const PAINTSTRUCT *lpps)
*c=
*c= int FillRect(HDC hDC, const RECT *lprc, HBRUSH hbr)
*c=
*c= HWND FindWindow(LPCSTR lpszClassName, LPCSTR lpszWindow)
*c=
*c= BOOL FloodFill(HDC hDC, int X, int Y, COLORREF cr)
*c=
*c= HWND GetActiveWindow(void)
*c=
*c= LONG GetBitmapBits(HBITMAP hBitmap, LONG cbBuffer,
*c=          void *lpvBits)
*c=
*c= COLORREF GetBkColor(HDC hDC)
*c=
*c= int GetBkMode(HDC hDC)
*c=
*c= LONG GetClassLong(HWND hWnd, int offset)
*c=
*c= WORD GetClassWord(HWND hWnd, int offset)
*c=
*c= void GetClientRect(HWND hWnd, LPRECT lprc)
*c=
*c= DWORD GetCurrentPosition(HDC hDC)
*c=
*c= HDC GetDC(HWND hWnd)
*c=
*c= HWND GetDesktopWindow(void)
*c=
*c= int GetDeviceCaps(HDC hDC, int index)
*c=
*c= int GetDIBits(HDC hDC, HBITMAP hBitmap,
*c=          UINT start, UINT lines,
*c=          void *lpvBits, BITMAPINFO *lpbi,
*c=          UINT fuColorUse)
*c=
*c= HWND GetFocus(void)
*c=
*c= int GetMapMode(HDC hDC)
*c=
*c= HMENU GetMenu(HWND hWnd)
*c=
*c= int GetMenuItemCount(HMENU hMenu)
*c=
*c= UINT GetMenuItemID(HMENU hMenu, int pos)
*c=
*c= UINT GetMenuState(HMENU hMenu, UINT ID, UINT flags)
*c=
*c= int GetMenuString(HMENU hMenu, UINT ID, LPSTR str,
*c=          int max, UINT flags)
*c=
*c= BOOL GetMessage(LPMSG msg, HWND hWnd,
*c=          UINT msgMin, UINT msgMax)
*c=
*c= COLORREF GetNearestColor(HDC hDC, COLORREF cr)
*c=
*c= UINT GetNearestPaletteIndex(HPALETTE hPal, COLORREF cr)
*c=
*c= HWND GetNextWindow(HWND hWnd, UINT uFlag)
*c=
*c= int GetObject(HGDIOBJ hObj, int cbBuffer,
*c=          void *lpvBuffer)
*c=
*c= UINT GetPaletteEntries(HPALETTE hPal, UINT iStart,
*c=          UINT iNo, PALETTEENTRY *lppe)
*c=
*c= HWND GetParent(HWND hWnd)
*c=
*c= COLORREF GetPixel(HDC hDC, int X, int Y)
*c=
*c= int GetPolyFillMode(HDC hDC)
*c=
*c= int GetROP2(HDC hDC)
*c=
*c= HGDIOBJ GetStockObject(int obj_no)
*c=
*c= HMENU GetSubMenu(HMENU hMenu, int pos)
*c=
*c= HMENU GetSystemMenu(HWND hWnd, BOOL bRevert)
*c=
*c= int GetSystemMetrics(int index)
*c=
*c= UINT GetTextAlign(HDC hDC)
*c=
*c= COLORREF GetTextColor(HDC hDC)
*c=
*c= DWORD GetTextExtent(HDC hDC, LPCSTR lpszString, int cb)
*c=
*c= BOOL GetTextMetrics(HDC hDC, TEXTMETRIC *lptm)
*c=
*c= HWND GetTopWindow(HWND hWnd)
*c=
*c= BOOL GetUpdateRect(HWND hWnd, LPRECT lprc, BOOL bErase)
*c=
*c= HWND GetWindow(HWND hWnd, UINT uRel)
*c=
*c= LONG GetWindowLong(HWND hWnd, int offset)
*c=
*c= void GetWindowRect(HWND hWnd, LPRECT lprc)
*c=
*c= WORD GetWindowWord(HWND hWnd, int offset)
*c=
*c= BOOL InsertMenu(HMENU hMenu, UINT ID, UINT flags,
*c=          UINT NewID, LPCSTR lpString)
*c=
*c= void InvalidateRect(HWND hWnd, const RECT *lprc,
*c=          BOOL bErase)
*c=
*c= void InvertRect(HWND hWnd, const RECT *lprc)
*c=
*c= BOOL IsChild(HWND hParent, HWND hChild)
*c=
*c= BOOL IsWindow(HWND hWnd)
*c=
*c= BOOL IsWindowEnabled(HWND hWnd)
*c=
*c= BOOL IsWindowVisible(HWND hWnd)
*c=
*c= BOOL LineTo(HDC hDC, int xEnd, int yEnd)
*c=
*c= (*)HCURSOR LoadCursor(HINSTANCE hInst, LPCSTR lpszName)
*c=
*c= BOOL LPtoDP(HDC hDC, LPPOINT lppt, int cPoints)
*c=
*c= DWORD MoveTo(HDC hDC, int x, int y)
*c=
*c= BOOL MoveWindow(HWND hWnd, int x, int y,
*c=          int width, int height, BOOL bRepaint)
*c=
*c= BOOL Pie(HDC hDC, int nLeftRect,  int nTopRect,
*c=          int nRightRect, int nBottomRect,
*c=          int nXStartArc, int nYStartArc,
*c=          int nXEndArc,   int nYEndArc)
*c=
*c= BOOL Polygon(HDC hDC, const POINT *lppt, int count)
*c=
*c= BOOL Polyline(HDC hDC, const POINT *lppt, int count)
*c=
*c= BOOL PostMessage(HWND hWnd, UINT msg,
*c=          WPARAM wParam, LPARAM lParam)
*c=
*c= void PostQuitMessage(int nExitCode)
*c=
*c= UINT RealizePalette(HDC hDC)
*c=
*c= BOOL Rectangle(HDC hDC, int nLeft, int nTop,
*c=          int nRight, int nBottom)
*c=
*c= (*)ATOM RegisterClass(const WNDCLASS *lpWc)
*c=
*c= void ReleaseCapture(void)
*c=
*c= int ReleaseDC(HWND hWnd, HDC hDC)
*c=
*c= BOOL RemoveMenu(HMENU hMenu, UINT ID, UINT flags)
*c=
*c= void ScreenToClient(HWND hWnd, LPPOINT lppt)
*c=
*c= HGDIOBJ SelectObject(HDC hDC, HGDIOBJ obj)
*c=
*c= HPALETTE SelectPalette(HDC hDC, HPALETTE hPal, BOOL bBackgnd)
*c=
*c= LONG SetBitmapBits(HBITMAP hBitmap, DWORD cbBuffer,
*c=          const void *lpvBits)
*c=
*c= COLORREF SetBkColor(HDC hDC, COLORREF cr)
*c=
*c= int SetBkMode(HDC hDC, int mode)
*c=
*c= HWND SetCapture(HWND hWnd)
*c=
*c= (*)LONG SetClassLong(HWND hWnd, int offset, LONG lValue)
*c=
*c= WORD SetClassWord(HWND hWnd, int offset, WORD nValue)
*c=
*c= HCURSOR SetCursor(HCURSOR hCursor)
*c=
*c= int SetDIBits(HDC hDC, HBITMAP hBitmap, UINT start, UINT count,
*c=          const void *lpvBits, BITMAPINFO *lpbi, UINT ColorUse)
*c=
*c= int SetDIBitsToDevice(HDC hDC, int XDest, int YDest,
*c=          int cx, int cy, int XSrc, int YSrc, UINT uStart,
*c=          UINT uNo, void *lpvBits, BITMAPINFO *lpbi, UINT ColorUse)
*c=
*c= int SetMapMode(HDC hDC, int mode)
*c=
*c= BOOL SetMenu(HWND hWnd, HMENU hMenu)
*c=
*c= UINT SetPaletteEntries(HPALETTE hPal, UINT iStart, UINT iNo,
*c=          const PALETTEENTRY *lppe)
*c=
*c= COLORREF SetPixel(HDC hDC, int X, int Y, COLORREF cr)
*c=
*c= int SetPolyFillMode(HDC hDC, int mode)
*c=
*c= int SetROP2(HDC hDC, int mode)
*c=
*c= UINT SetTextAlign(HDC hDC, UINT al)
*c=
*c= COLORREF SetTextColor(HDC hDC, COLORREF cr)
*c=
*c= (*)LONG SetWindowLong(HWND hWnd, int offset, LONG lValue)
*c=
*c= WORD SetWindowWord(HWND hWnd, int offset, WORD nValue)
*c=
*c= BOOL ShowWindow(HWND hWnd, int nCmdShow)
*c=
*c= BOOL TextOut(HDC hDC, int xStart, int yStart,
*c=          LPCSTR lpszString, int cb)
*c=
*c= (*)BOOL TranslateMessage(const MSG *msg)
*c=
*c= BOOL UnrealizeObject(HGDIOBJ hObject)
*c=
*c= BOOL UnregisterClass(LPCSTR lpszClassName, HINSTANCE hInst)
*c=
*c= void UpdateWindow(HWND hWnd)
*c=
*c= void ValidateRect(HWND hWnd, const RECT *lprc)
*c=
*c= (*)LRESULT WINAPISendMessage(HWND hWnd, UINT msg,
*c=          WPARAM wParam, LPARAM lParam)
*k windows
*x WM_XXXX
*x CreateWindow
*x RegisterClass
*x SetClassLong
*x SetWindowLong
*x LoadCursor
*x TranslateMessage
*x WINAPISendMessage
*x DDEML
#
*n WM_XXXX Callback Messages\MS-Windows library
*P Callbacks provided by %swindows.lib%s to standard Windows callback functions
*I <windows.h>
*D All Windows messages are retrieved by %sGetMessage%s in the program's
message loop and are sent to the registered callback function by
%sDispatchMessage%s.  The callback function must either process these
messages or call the library to provide default processing.  A callback
function is of the form:
*c=   LRESULT WindProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
*c=   {  ... }
*p
*d The following list shows the messages which are currently supported:
*c= WM_ACTIVATE
*c= WM_CHAR
*c= WM_CLOSE
*c= WM_CREATE
*c= WM_DESTROY
*c= WM_CHILDACTIVATE
*c= WM_CLOSE
*c= WM_COMMAND
*c= WM_ENABLE
*c= WM_ENDSESSION
*c= WM_FONTCHANGE
*c= WM_HSCROLL
*c= WM_INITMENU
*c= WM_INITMENUPOPUP
*c= WM_KILLFOCUS
*c= WM_LBUTTONDBLCLK
*c= WM_LBUTTONDOWN
*c= WM_LBUTTONUP
*c= WM_MBUTTONDBLCLK
*c= WM_MBUTTONDOWN
*c= WM_MBUTTONUP
*c= WM_MOUSEACTIVATE
*c= WM_MOVE
*c= WM_MOUSEMOVE
*c= WM_PALETTECHANGED
*c= WM_PARENTNOTIFY
*c= WM_QUERYNEWPALETTE
*c= WM_RBUTTONDBLCLK
*c= WM_RBUTTONDOWN
*c= WM_RBUTTONUP
*c= WM_SETFOCUS
*c= WM_SHOWWINDOW
*c= WM_SIZE
*c= WM_SYSCHAR
*c= WM_SYSCOLORCHANGE
*c= WM_TIMECHANGE
*c= WM_VSCROLL
*c= WM_WININICHANGE
*k windows
*x RegisterClass
*x CreateWindow
#
*n DDEML\General interest
*P Provides API functions for DDE on the I/O server
*I <ddeml.h>
*D The %sDDEML%s functions are part of %swindows.lib%s and provide the DDE
capability for the I/O server.  These functions allow an application to make
connections to other Microsoft Windows applications that support DDE.
*p
See %sDdeInitialize%s and %sDdeCallback%s for compatibility issues.
*p
The following is a list of all supported DDEML functions (each function
marked with * has further information to clarify some minor compatibility
issues):
*c= BOOL DdeAbandonTransaction(DWORD idInst,
*c=          HCONV hConv, DWORD idTran)
*c=
*c= BYTE * DdeAccessData(HDDEDATA hData, DWORD *pcbDataSize)
*c=
*c= HDDEDATA DdeAddData(HDDEDATA hData, void *pSrc,
*c=          DWORD cb, DWORD cbOff)
*c=
*c= HDDEDATA DdeClientTransaction(void *pData, DWORD cbData,
*c=          HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType,
*c=          DWORD dwTimeout, DWORD *pdwResult)
*c=
*c= int DdeCmpStringHandles(HSZ hsz1, HSZ hsz2)
*c=
*c= HCONV DdeConnect(DWORD idInst, HSZ hszService, HSZ hszTopic,
*c=          CONVCONTEXT *pCC)
*c=
*c= HCONVLIST DdeConnectList(DWORD idInst, HSZ hszService,
*c=          HSZ hszTopic, HCONVLIST hConvList,  CONVCONTEXT *pCC)
*c=
*c= HDDEDATA DdeCreateDataHandle(DWORD idInst, void *pSrc,
*c=          DWORD cb, DWORD cbOff, HSZ hszItem,
*c=          UINT wFmt, UINT afCmd)
*c=
*c= HSZ DdeCreateStringHandle(DWORD idInst, LPCSTR psz, int iCodePage)
*c=
*c= BOOL DdeDisconnect(HCONV hConv)
*c=
*c= BOOL DdeDisconnectList(HCONVLIST hConvList)
*c=
*c= BOOL DdeEnableCallback(DWORD idInst, HCONV hConv, UINT wCmd)
*c=
*c= BOOL DdeFreeDataHandle(HDDEDATA hData)
*c=
*c= BOOL DdeFreeStringHandle(DWORD idInst, HSZ hsz)
*c=
*c= DWORD DdeGetData(HDDEDATA hData, void *pDst,
*c=          DWORD cbMax, DWORD cbOff)
*c=
*c= UINT DdeGetLastError(DWORD idInst)
*c=
*c= UINT DdeInitialize(DWORD *pidInst, PFNCALLBACK pfnCallback,
*c=          DWORD afCmd, DWORD ulRes)
*c=
*c= BOOL DdeKeepStringHandle(DWORD idInst, HSZ hsz)
*c=
*c= HDDEDATA DdeNameService(DWORD idInst, HSZ hsz1,
*c=          HSZ hsz2, UINT afCmd)
*c=
*c= BOOL DdePostAdvise(DWORD idInst, HSZ hszTopic, HSZ hszItem)
*c=
*c= UINT DdeQueryConvInfo(HCONV hConv, DWORD idTran,
*c=          CONVINFO *pConvInfo)
*c=
*c= HCONV DdeQueryNextServer(HCONVLIST hConvList, HCONV hConvPrev)
*c=
*c= DWORD DdeQueryString(DWORD idInst, HSZ hsz, LPSTR psz,
*c=          DWORD cchMax, int iCodePage)
*c=
*c= HCONV DdeReconnect(HCONV hConv)
*c=
*c= BOOL DdeSetUserHandle(HCONV hConv, DWORD id, DWORD hUser)
*c=
*c= BOOL DdeUnaccessData(HDDEDATA hData)
*c=
*c= BOOL DdeUninitialize(DWORD idInst)
*k windows
*k DDE
*k DDEML
*x DdeInitialize
*x DdeCallback
#
*n TranslateMessage\MS-Windows library
*P This function does nothing in the Helios Windows version.  It has only
been included for completeness.
*I <windows.h>
*F BOOL TranslateMessage(const MSG *msg)
*D In Microsoft Windows, this version would translate VK_DOWN and VK_UP
sequences to WM_KEY sequences.  To reduce the messages sent between the I/O
server and Helios, this function is automatically performed by the I/O server
before the messages are sent to Helios.  The result is that the function does
nothing on the Helios side and can therefore be omitted from the standard
message loop.
*k windows
#
*n RegisterClass\MS-Windows library
*P Registers a windows class and callback function
*I <windows.h>
*F ATOM RegisterClass(const WNDCLASS *lpWc)
*D This function conforms to the standard definition except that the user
cannot provide a menu name in the %sWNDCLASS%s structure.  The name provided
here would be used to load the menu from the resource file.  Since no
resource file exists for an application, this parameter is ignored.  The
application should make use of %sCreateMenu%s to create an %sHMENU%s
parameter which is supplied to %sCreateWindow%s or %sSetMenu%s.
*k windows
*x CreateWindow
#
*n CreateWindow\MS-Windows library
*P Creates a window but does not display it
*I <windows.h>
*F HWND CreateWindow(LPCSTR lpszClassName,
                         LPCSTR lpszWindowName,
                         DWORD style,
                         int x,
                         int y,
                         int nWidth,
                         int nHeight,
                         HWND hWndParent,
                         HMENU hMenu,
                         HINSTANCE hInst,
                         void *lpvParam)
*D This function varies from the standard windows definition. Since MDI is
not supported, %s*lpvParam%s is ignored.
*k windows
#
*n SetClassLong\MS-Windows library
*P Sets long variables associated with an %shWnd%s
*I <windows.h>
*F LONG SetClassLong(HWND hWnd, int offset, LONG lValue)
*D This function cannot be used to set the long pointers to the menu name and
%sWndClass%s callback procedure associated with an %shWnd%s.  Changing these
will make no sense since a Helios application cannot provide a Windows
pointer.  User index values (values >= 0) will work, but index values < 0
will not.
*k windows
*x SetWindowLong
#
*n SetWindowLong\MS-Windows library
*P Sets 32-bit variables associated with an %shWnd%s
*I <windows.h>
*F LONG SetWindowLong(HWND hWnd, int offset, LONG lValue)
*D All values except %sGWL_WNDPROC%s are accepted.  Changing the value
associated with %sGWL_WNDPROC%s would cause an error.
*k windows
*x SetClassLong
#
*n LoadCursor\MS-Windows library
*P Loads and creates a window cursor
*I <windows.h>
*F HCURSOR LoadCursor(HINSTANCE hInst, LPCSTR lpszName)
*D The application may only use the %sLoadCursor%s function of the form:
      %sLoadCursor(NULL, IDC_WAIT);%s
The alternative form loads a cursor from the resource file which does not
exist in a Helios Windows application.  Use of the alternate form will
return a %sHCURSOR%s of %sNULL%s.
*k windows
*x RegisterClass
#
*n WINAPISendMessage\MS-Windows library
*P Sends a message to a window procedure
*I <windows.h>
*F LRESULT WINAPISendMessage(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
*D This function is called SendMessage in Microsoft Windows API.  Since this
function name is already used by Helios, it has been renamed.
*k windows
#
*n DdeInitialize\MS-Windows library
*P Registers a DDE function with the DDE management library
*I <ddeml.h>
*F UINT DdeInitialize(DWORD *pidInst, PFNCALLBACK pfnCallback,
            DWORD afCmd, DWORD ulRes)
*D The DDEML library conforms to the MS-Windows standard except for the
following points:
*p
1. The %sDWORD%s %safCmd%s parameter will not allow the setting of the
%sCBF_SKIP_CONNECT_CONFIRMS%s flag and the %sCBF_SKIP_DISCONNECTS%s flag.
These flags are required for processing by the I/O server.  The
%sDdeCallback%s should merely ignore the %sXTYP_CONNECT_CONFIRM%s and
%sXTYP_DISCONNECT%s callback types.
*p
2. All DDE servers that are implemented in Helios must register the
server with the %sDdeNameService%s function (and likewise unregister the
service on termination of the application).
*p
3. Any connections which are requested to a server/topic pair for a
registered server will be accepted until the Helios DdeCallback returns a
TRUE or FALSE in response to the %sXTYP_CONNECT%s callback.  If the
connection is denied (FALSE), the connection will then be terminated.
*p
4. The %sAPPCLASS_MONITOR%s and %sXTYP_MONITOR%s functions are not
supported.  An application like DDESPY can be used to monitor DDE activity.
*k DDEML
*k DDE
*x DDEML
*x DdeCallback
#
*n DdeCallback\MS-Windows library
*P A DDEML application must provide a callback of this type when calling
%sDdeInitialize%s to register with the DDEML DLL.
*I <ddeml.h>
*F HDDEDATA DdeCallback(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2)
*D All of the DDEML callback functions except %sXTYP_MONITOR%s are supported,
except for the %sXTYP_CONNECT%s as indicated in %sDdeInitialize%s.

