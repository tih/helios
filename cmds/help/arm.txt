#
*n AvoidEvents\ARM specific function
*P Disables interrupts during the call
*I <kernel.h>
*F word AvoidEvents(WordFnPtr fn, word a, word b, word c);
*A fn - function
*A a -
*A b -
*A c -
*D %bAvoidEvents()%b calls the function pointer that it is
passed and disables all interrupts for the duration of the call. It passes
back the return value from the called function. %bAvoidEvents()%b should
be used whenever a user level process has to access a data structure
shared with an event handler.
*q Event handling
*q Disabling interrupts
*q AvoidEvents
*q ARM kernel library call
*k ARM
#
*n Fork\ARM specific function
*P Run a child process at the same priority level as its parent
*I <process.h>
*F word Fork(WORD stacksize, VoidFnPtr function, WORD argsize,
...);
*A stacksize - amount of stack required for child process
*A function - function the process executes
*A argsize - size of argument vector
*A ... - arguments to the process
*D %bFork()%b runs the child process at the same priority
level as the parent. Please note that in Helios/ARM, the %sargsize%s
parameter that is specified in terms of bytes must always be a multiple of
word size. This is because the Helios/ARM PCS specifies all arguments as
word multiples.
*q Fork
*q ARM utility
*k ARM
#
*n HardenedSignal\ARM specific function
*P Notifies a user-level server process on an ARM-based system
that data has arrived for it to process
*I <kernel.h>
*F void HardenedSignal(Semaphore *sem);
*A sem - Pointer to semaphore
*D %bHardenedSignal()%b enables user-level processes to share
semaphores with event handlers. It notifies a user-level process that data
has arrived for it to process; the data being added to a linked list
pointed to by the Event structure. User-level processes should use
%bHardenedWait()%b to test semaphores signalled from %bHardenedSignal()%b.
*p %bNote:%b Semaphores must not be shared between hardened and
non-hardened versions of %bWait()%b and %bSignal()%b.
*q Event handling
*q Wait
*q Signal
*q Semaphores
*q Signalling user level processes
*q HardenedWait
*q ARM kernel library call
*x HardenedSignal
*k ARM
#
*n HardenedWait\ARM specific function
*P Provides an interrupt-resilient Wait on ARM-based systems
*I <kernel.h>
*F void HardenedWait(Semaphore *sem);
*A sem - Pointer to semaphore
*D %bHardenedWait()%b enables user-level processes to share
semaphores with event handlers. User-level processes should use
%bHardenedWait()%b to test semaphores signalled from %bHardenedSignal()%b.
*p %bNote:%b Semaphores must not be shared between hardened and
non-hardened versions of %bWait()%b and %bSignal()%b.
*q Event handling
*q Semaphores
*q Signalling user level processes
*q HardenedWait
*q ARM kernel library call
*x HardenedSignal
*k ARM
