#
*n AvoidEvents\System library
*P Executes the given function with interrupts disabled.
*I <event.h>
*F word AvoidEvents(WordFnPtr fn, ...);
*A %sfn%s - function to be executed.
*D %bAvoidEvents%b accepts a function pointer and a list of arguments to
   pass to the function.  It executes the function disabling interrupts
   for the duration of the call.  Once the function terminates, the interrupts
   are re-enabled.
*x SetEvent
*x HardenedSignal
*x HardenedWait
*p Also refer to %b_word()%b in %sThe Helios C Manual%s.
*k C40
#
*n back_trace\System library
*P trace functions on the stack
*I <c40.h>
*F void back_trace(void) ;
*D %bback_trace()%b prints out a trace of all the functions on the 
   stack starting with the parent of the current function.
*p %bNote%b - %bback_trace()%b is not available in the Transputer 
   implementation of Helios.
#
*n cc\Helios command
*P Runs the Helios compiler driver.
*F cc [opts] <filename> [<filename> ...]
*D The %bcc%b command is used to compile and link a program. It
   takes a list of files and decides what to do with them according to their
   suffix. The file names supported are as follows:
*l Suffix
*t Meaning
*l %b.a%b
*t Macro assembly language (AMPP) source file
*l %b.c%b
*t C language source file
*l %b.i%b
*t C language source file (pre-processed version)
*l %b.f%b
*t FORTRAN language source file
*l %b.o%b
*t Assembled file, ready for linking
*l %b.p%b
*t Assembled file, ready for linking
*l %b.s%b
*t Assembly language source file
*l %b.def%b
*t Modula-2 definition source file
*l %b.mod%b
*t Modula-2 program source file
*l %b.mod%b
*t Modula-2 program source file
*l %b.lib%b
*t Scanned library
*p If no other arguments are given, the program compiles the programs for
   the languages specified as %b.c%b, assembles any %b.a%b or %b.s%b files and then links
   all the resulting binaries along with any supplied %b.o%b files into an
   executable program called %ba.out%b, removing the intermediary %b.o%b files.
*p The following options can be used to alter the behaviour of the program:
*l %b-a%b %s<text>%s
*t Pass %s<text>%s as an option to assembler.
*l %b-b%b
*t Don't link with standard helios libraries (%bhelios.lib%b).
*l %b-c%b
*t Compile/assemble only, don't link.
*l %b-d%b%s<name>%s
*t Specify output file name for library %b.def%b compilations.
*l %b-f%b %s<name>%s
*t Specify filename for assembler's virtual memory system.
*l %b-g%b
*t Compile for debugging.
*l %b-h%b%s<val> %s
*t Specify heap size of program.
*l %b-j%b
*t Create scanned library
*l %b-l%b%s<name>%s
*t Link with library <name>
*l %b-m%b
*t Compile code for resident libraries.
*l %b-n%b
*t Don't actually execute commands (implies %b-v%b).
*l %b-n%b%s<string>%s
*t Specify object name of program.
*l %b-o%b%s<name>%s
*t Specify output name (default %b*.o%b or %b`a.out'%b) (%b`-'%b is stdout)
*l %b-p%b
*t Compile code for profiling.
*l %b-q%b%s<opt>%s
*t Enable compiler debugging features (where the %sopt%ss are
  %babdfghimopqrstuwxyz%b).
*l %b-r%b
*t Compile code for device drivers.
*l %b-s%b%s<val>%s
*t Specify stack size of program.
*l %b-t%b
*t Compile code for backtracing.
*l %b-u%b
*t Prevent removal of intermediary files.
*l %b-v%b
*t Display command being executed.
*l %b-w[Aacdfpsvz]%b
*t Suppress warnings.
*l %b-y%b%s<text>%s
*t Pass <text> as an option to the macro pre-processor
*l %b-z%b %s<text>%s
*t Pass %s<text>%s as an option to C compiler.
*l %b-A%b%s<text>%s
*t Pass <text> as an option to linker.
*l %b-B%b
*t Do not link with any libraries. Do not perform %bobjed%b.
*l %b-C%b
*t Perform memory checking
*l %b-C40%b
*t Compile code for the C40 if cross-compiling.
*l %b-D%b%s<name>%s
*t #define <name>
*l %b-D%b%s<name>=<vl>%s
*t #define <name> to be <vl> (default <vl> is 1).
*l %b-E%b
*t Pre-process only. Do not compile.
*l %b-F[Abdghlmpsuv]%b
*t Enable compiler features (`s' turns off stack checking and `g' removes
   procedure names; `A' switches on `s' and `g').
*l %b-I%b%s<dir>%s
*t Specify a directory to be searched for %b#include%b symbol files.
*l %b-J%b
*t Append to a scanned library.
*l %b-L%b%s<name>%s
*t Link with library <name>.
*l %b-O%b
*t Optimize code, perform full link.
*l %b-P%b%s<text>%s
*t Pass <text> as an option to the preprocessor
*l %b-S%b
*t Produce textual assembler output from %b*.c%b in %b*.s%b, don't link.
*l %b-T[4|8]%b
*t Specify Transputer type if used on Transputer implementations of Helios.
*l %b-U%b%s<name>%s
*t Removes any initial definition of <name> in the preprocessor.
*l %b-V%b
*t Pass on verbose flag to executed commands.
*l %b-W%b%s<val>%s
*t Specify warning level (F77).
*l %b-X%b%s<val>%s
*t Specify cross reference width (F77).
*l %b-Z%b%s<text>%s
*t Pass %s<text>%s as an option to FORTRAN compiler.
*l %b-help%b
*t Display list of options supported by %bc%b.
*p For example, suppose you have a program called %btest%b, you might type:
*c= cc -o test test.c
*p and using c for debugging, you might type:
*c= cc -g -ld -o test test.c
*p %bcc%b uses the following environment variables, if present:
*l %bC_COMPILER%b
*t Pathname of the C compiler
*l %bPRE_PROCESSOR%b
*t Pathname of the pre-processor
*l %bASSEMBLER%b
*t Pathname of the assembler
*l %bLINKER%b
*t Pathname of the linker
*l %bREMOVER%b
*t Pathname of the file removal program
*l %bMACDIR%b
*t Pathname of the standard AMPP macro directory
*l %bMACRO%b
*t Pathname of the AMPP
*l %bC_LIBDIR%b
*t Pathname of the library directory
*l %bC_INCDIR%b
*t Pathname of the standard C header directory
*l %bLINK_HELIOS%b
*t Name of the standard Helios link library
*l %bLINK_CSTART%b
*t Name of the C startup file
*l %bLINK_CLIB%b
*t Name of the standard C link library
*l %bNEW_NCC%b
*t If set, this informs %bcc%b which version of the C compiler is being used.
   Possible values are: C40 and TRAN.
*l %bOBJNAME%b
*t Default name of output file
*l %bMACHINENAME%b
*t Name of the destination hardware, passed on by %b-D%b.
*p The following constants are also defined by %bcc%b when compiling C
   code on Helios-C40 implementations of Helios:
*l %bhelios%b
*l %b__HELIOS%b
*l %b__C40%b
*l %b__HELIOSC40%b
*p On Helios-ARM implementations, the following constants are defined:
*l %bhelios%b
*l %b__HELIOS%b
*l %b__ARM%b
*l %b__HELIOSARM%b
*p For the sake of compatibility with previous versions of Helios, an
identical compiler driver is available with the name %bc%b.
*p Further details can be found in the latest edition of the %sHelios C Manual%s.
*q helios
*q %b__HELIOS%b
*q C40
*q %b__C40%b
*q %b__HELIOSC40%b
*q <MACHINENAME>
*q c
*q Compiler driver
*q AMPP
*x ncc
*k C40
#
*n GetPhysPriRange\System library
*P Returns the lowest physical priority level available.
*I <process.h>
*F word GetPhysPriRange(void);
*D %bGetPhysPriRange%b returns the lowest physical priority available.
   %bGetPhysPriRange()%b +1 is therefore the number of physical priority levels
   implemented on this version of Helios.  For example, the Helios-C40 scheduler
   currently implements 8 physical priority levels and so will return 7, whereas
   the Transputer implementation will return 1.
*x SetPriority
*k C40
#
*n HardenedSignal\System library
*P Signals a semaphore within an interrupt routine.
*I <sem.h>
*F void HardenedSignal(Semaphore *sem);
*A %ssem%s - semaphore to signal.
*D %bHardenedSignal%b increments the semaphore's count by one and
   restarts the first waiting process, if any.  This function is designed to be called
   from within an interrupt routine.  This function is only implemented on
   non-Transputer implementations of Helios.
*p Semaphores should not be shared between hardened and non-hardened versions
   of %bWait()%b and %bSignal()%b.
*x HardenedWait
*x SetEvent
*k C40
#
*n HardenedWait\System library
*P Waits on a semaphore to be signalled from an interrupt routine.
*I <sem.h>
*F void HardenedWait(Semaphore *sem);
*A %ssem%s - semaphore to wait on.
*D %bHardenedWait%b decrements the semaphore counter.  If the result
   is less than zero, it suspends the process until a %bHardenedSignal%b is performed.
   This function is only implemented on non-Transputer processors.
*p %bHardenedWait%b is for use by user-level threads. It allows them to
wait for the interrupt handler to process an interrupt and read data
from a device, and then to signal the user level thread with
%bHardenedSignal%b. The user-level thread can then read and process this data.
*x HardenedSignal
*k C40
#
*n ld\Helios command
*P Links together multiple object files to produce an executable file.
*F ld [-x] [-v [errfile]] [-n progname] [-s stksize] [-h heapsize] [-] [-?]
   [-STMN] [-help] [-o imgfile] [-l libfile] [objfiles]
*D %bld%b combines multiple object files into a single executable image
   file.  It resolves all of the external module table references, patching the correct
   values into the code.  Library definition files %b(.def)%b may also be included in the
   command line to enable object files to be linked with shared libraries.
*p The options are as follows:
*l %b-x%b
*t Outputs the image file in hexadecimal format.
*l %b-v%b
*t Switches to verbose reporting.  The %berrfile%b is optional and causes
   messages to be redirected to that file.
*l %b-n%b
*t Inserts %bprogname%b into the program module header.
*l %b-s%b
*t Inserts the specified stack size into the program module header.
*l %b-h%b
*t Inserts the specified heap size into the program module header.
*l %b-o%b
*t Sends the resulting image file to %bimgfile%b.  If the option is not
   specified, the image file is sent to stdout.
*l %b-l%b
*t Reads in a link library file, %blibfile%b.  If any of the library
   modules are not referenced anywhere in the object files, the
   particular module is not linked into the resulting image file.
   This option also stops the linker from complaining about
   multiply defined symbols, allowing you to replace resident
   library functions with your own code.
*l
*t Scanned libraries differ from shared libraries in that their code
   is physically included in the program's image file, rather than
   being linked into the program at run-time.  Scanned libraries
   therefore cannot be used with shared code.
*l %b-%b
*t Causes the linker to read from stdin.
*l %b-?%b
*t Describes the command and its options.
*l %b-STMN%b
*t Disables support for shared module tables.
*l %b-help%b
*t Describes the command and its options.
*x as
*x ncc
*x objdump
*k C40
#
*n LowAllocMem\System library
*P Allocates a block of memory from the system pool
*I <memory.h>
*F void *LowAllocMem(word size, Pool *pool);
*A %ssize%s - Size of memory block in bytes
*A %spool%s - Pointer to destination memory pool
*R pointer to allocated memory or NULL if unable to allocate
   memory
*D %bLowAllocMem()%b allocates memory from the base of the system 
   pool upwards, rather than from the top downwards. The standard AllocMem function
always allocates memory from high to low. this function is useful when a
memory pool contains two types of memory, such as fast static memory at
low addresses and slower dynamic memory at higher addresses.
*p %bNote%b - %bLowAllocMem()%b is not available in the Transputer implementation of 
   Helios.
*x StatMem
*x AllocMem
*x AllocSpecial
#
*n MachineType\System library
*P Obtains the type of the current processor.
*I <syslib.h>
*F word MachineType(void);
*R
*f 800\=\T800 transputer
*f 414\=\T414 transputer
*f 425\=\T425 transputer
*f 805\=\T805 transputer
*f 801\=\T801 transputer
*f 400\=\T400 transputer
*f 0xA2\=\ARM2
*f 0xA3\=\ARM3
*f 0xA6\=\ARM6
*f 0x320C40\=\TMS320C40
*f 0x860\=\i860
*D %bMachineType%b returns the current processor type.
*k C40
#
*n objdump\Helios command
*P This command dumps object files to stdout.
*F objdump [-dphiln][+<n>][<file>...]
*D %bobjdump%b, given a file containing object code, will dump a
   user-readable representation of its contents to stdout.  By default, the code
   is represented in hexadecimal with its word address and the linker directives
   are presented in user-readable form.  The image static data area and
   codetable sizes are provided.
*p If no options or files are provided with the command, help information is
   displayed.
*p The options are as follows:
*l %b-d%b
*t Provides the full disassembly of the contents of the code sections.
*l %b-p%b
*t Displays PCS register aliases.
*l %b-h%b
*t Provides help information for this command.
*l %b-i%b
*t Provides size information on the image, static table and the code table only.
*l %b-l%b
*t Provides similar output to the default, but all the code is displayed.
*l %b-n%b
*t Provides only the symbol definition information.
*l %b+<n>%b
*t Provides an offset which is used as the base address when printing the
   output.  %bn%b is specified in terms of bytes and therefore should be
   multiplied by four on the C40 to give the correct offset.
*x as
*x disas
*x ld
*k C40
#
*n RestoreCPUState\System library
*P Restores the state of the CPU.
*I <cpustate.h>
*F void RestoreCPUState(SaveState *threadstate);
*A %sthreadstate%s - pointer to %bSaveState%s structure.
*D %bRestoreCPUState%b restores the state of the CPU from the contents
   of the %bSaveState%b data structure causing control to return to the point
   where the %bSaveCPUState%b function was called.  This is similar to the C
   language %blongjmp%b function.
*p The use of the %bSaveCPUState%b and %bRestoreCPUState%b functions requires
   careful coding.  A routine that calls the %bSaveCPUState%b and then
   returns before %bRestoreCPUState%b is called, is likely to cause problems.
   The stack frame that existed when %bSaveCPUState%b was called will no
   longer exist, and so any call to %bRestoreCPUState%b will corrupt the
   execution stack. Note that the contents of the %bSaveState%b structure may be
   modified before a %bRestoreCPUState%b function is called.  These functions
   can be used for a variety of purposes, for example: creating a coroutine
   library.
*p %bRestoreCPUState%b is not available on Transputer implementations of Helios.
*p For example, the C40 %bSaveState%b structure is as follows:
*c= typedef struct SaveState {
*c= struct SaveState *next;        /*for queuing on run q's       */
*c=                                /*next must be first elem't    */
*c= struct SaveState *nextknown    /*for exec housekeeping        */
*c= struct SaveState *stdsavearea  /*permanent save area          */
*c= word priority;                 /*thread priority              */
*c= uword endtime;                 /*wakeup time if Sleep()ing    */
*c= word status;                   /*thread status                */
*c= word CPUtime;                  /*milliseconds of CPU time used*/
*c= VoidFnPtr InitialFn;           /*root fn of thread            */
*c= struct CPURegs CPUcontext;     /*CPU state of this thread     */
*c= } SaveState;
*c=
*c= typedef struct CPURegs {
*c= /*C PCS BINDING NAME*/
*c=                   /*C40 REGISTER NAME*/
*c=                                        /*FUNCTION          */
*c= word PC;          /* PC of sliced thread*/
*c= word R_ST;        /* st:status reg*/
*c=                                       /*C ADDRESS REGS    */
*c= word R_ADDR1;     /* ar0:*/
*c= word R_ADDR2;     /* ar1:*/
*c= word R_ADDR3;     /* ar2:*/
*c= word R_ADDR4;     /* ar3: */
*c=                                        /*MISC ADDRESS REGS */
*c= word R_MT;        /* ar4: module table pointer*/
*c= word R_ATMP;      /* ar5: temp address reg*/
*c= word R_USP;       /* ar6: user stack pointer*/
*c= word R_FP;        /* ar7: frame pointer*/
*c=                                        /*REGISTER ARGUMENTS*/
*c= word R_A1;        /* r0: first arg and result reg*/
*c= word R_A1f        /* r0: fp extension to 32bit reg*/
*c= word R_A2;        /* r1: 32bits*/
*c= word R_A2f;       /* r1: fpext*/
*c= word R_A3;        /* r2: 32bits*/
*c= word R_A3f;       /* r2: fpext*/
*c= word R_A4;        /* r3: 32bits*/
*c= word R_A4f;       /* r3: fpext*/
*c=                                        /*REGISTER VARIABLES*/
*c= word R_FV1;       /* r4: 32bits*/
*c= word R_FV1f;      /* r4: fpext*/
*c= word R_FV2;       /* r5: 32bits*/
*c= word R_FV2f;      /* r5: fpext*/
*c= word R_FT1;       /* r6: 32bits*/
*c= word R_FT1f;      /* r6: fpext*/
*c= word R_FT2;       /* r7: 32bits*/
*c= word R_FT2f;      /* r7: fpext*/
*c=                                            /*TEMP REGISTERS*/
*c= word R_V3;        /* r8: 32bits*/
*c= word R_V3f;       /* r8: fpext*/
*c= word R_V4;        /* r9: 32bits*/
*c= word R_V4f;       /* r9: fpext*/
*c= word R_T1;        /* r10: 32bits*/
*c= word R_T1f;       /* r10: fpext*/
*c=                                           /*MISC REGISTERS*/
*c= word R_LR;        /* r11: link register*/
*c= word R_LRf;       /* r11: fpext*/
*c= word R_V1;        /* dp: data page pointer*/
*c= word R_BASE;      /* ir0: byte address base*/
*c= word R_USE;       /* ir1: user stack end pointer*/
*c= word R_V2;        /* bk: temp register*/
*c=                                        /*TEMP BACK-END REGS*/
*c= word R_TMP1;      /* rs: */
*c= word R_TMP2;      /* re: */
*c= word R_TMP3;      /* rc: */
*c= /* Note that iie, iif, die and system stack */
*c= /* pointer (sp) are never saved by SaveCPUState */
*c= }CPURegs
*x SaveCPUState
*k C40
#
*n SaveCPUState\System library
*P Saves the state of the CPU.
*I <cpustate.h>
*F bool SaveCPUState(SaveState *threadstate);
*A %sthreadstate%s - pointer to %bSaveState%b structure.
*R %bFALSE%b if the function was called directly, or %bTRUE%b if the function is returning 
from a call to %bRestoreCPUState%b.
*D %bSaveCPUState%b saves the current CPU context into the %bSaveState%b data
   structure passed.  The CPU context can be restored by the %bRestoreCPUState%b
   function.  If %bSaveCPUState%b returns %bTRUE%b, the function is returning
   as a result of a %bRestoreCPUState%b function call.  If %bFALSE%b is returned,
   the function exited as normal after saving the current state of the CPU into
   the %bSaveState%b structure passed to it.
*p The use of the %bSaveCPUState%b and %bRestoreCPUState%b functions requires
   careful coding.  A routine that calls the %bSaveCPUState%b and then
   returns before %bRestoreCPUState%b is called, is likely to cause problems.
   The stack frame that existed when %bSaveCPUState%b was called will no
   longer exist, and so any call to %bRestoreCPUState%b will corrupt the
   execution stack.  The contents of the %bSaveState%b structure may be
   modified before a %bRestoreCPUState%b function is called.  These functions
   can be used for a variety of purposes, for example, creating a coroutine
   library.
*p %bSaveCPUState%b is not available on Transputer implementations of Helios.
*x RestoreCPUState
*k C40
#
*n slice\Helios command
*P Time slicing.
*F slice [on off quantum <integer>]
*D slice provides the facility to disable and re-enable time slicing
   (scheduling) of threads in the processor.  The command used with no options
   simply displays whether slicing is currently on or off and the current value
   of the slice quantum.
*p The options are as follows:
*l %bon%b
*t Reactivates the time slicing of threads in the processor.
*l %boff%b
*t Deactivates the time slicing facility.  This reduces the system overhead
   on the processor and thus speeds up execution of threads.  All Helios
   commands and facilities will continue to function.
*l %bquantum%b%s<integer>%s
*t Sets the quantum (that is the longest time a thread will be active before it
   is sliced) to be the specified number of milliseconds.
*p %bNote:%b if any of your programs use busy waiting (polling), this command
   may cause severe system degradation.  As a rule, Helios programs should
   never poll.  They should either suspend themselves temporarily each time
   around the polling loop or be implemented so that they block until the
   required events takes place.  This can usually be accomplished with
   semaphores.
*x SliceQuantum
*x SliceState
*k C40
#
*n SliceQuantum\System library
*P Sets length of timeslice.
*I <process.h>
*F int SliceQuantum(int usecs);
*A %susecs%s - length of timeslice.
*D %bSliceQuantum%b sets the period of time each thread receives to run in a
   timeslice.  Although the argument takes a microsecond value, timeslicing
   is only implemented to a millisecond resolution on Helios-C40. If %susecs%s
   is zero, the timeslice is not set and the current quantum is returned.
*p Default timeslice is 1/10 of a second (100 milliseconds).
*p %bExample:%b
*c= SliceQuantum(OneSec/20);
*p This example gives each thread a timeslice of 1/20 of a second (50
   milliseconds).
*x SliceState
*x slice
*k C40
#
*n SliceState\System library
*P Enables, disables or reports the status of timeslicing.
*I <process.h>
*F int SliceState(int state);
*A %sstate%s - state of timeslice.
*R the previous slice state.
*D %bSliceState%b enables, disables or reports the status of timeslicing on
   the current processor depending on the value of state, which may be one of
   the following:
*l %bSLICE_DISABLE%b
*t enables timeslicing
*l %bSLICE_ENABLE%b
*t disables timeslicing
*l %bSLICE_REPORT%b
*t returns the latest status
*x SliceQuantum
*x slice
*k C40
#
*n _stack_size\System library
*P return the number of words left on the stack
*I <c40.h>
*F int _stack_size(void);
*R the number of words left on the stack
*D %b_stack_size()%b returns the number of words remaining on the stack.
*p %bNote%b - %b_stack_size()%b is not available in the Transputer 
   implementation of Helios.
#
*n StatMem\System library
*P obtain system memory statistics
*I <memory.h>
*F word StatMem(word *totalsize, word *totalfree, word *largestfree, word 
   *percfree);
*A %stotalsize%s - pointer to the total size of the system memory 
   pool in bytes
*A %stotalfree%s - pointer to number of bytes currently available
*A %slargestfree%s - pointer to the size in bytes of the largest 
   free block in memory
*A %spercfree%s - pointer to percentage of memory currently available
*R the size in bytes of the largest free block in the system memory 
   pool
*D %bStatMem()%b returns statistics on the amount and availability of
   system memory
*p %bNote%b - %bStatMem()%b is not available in the Transputer implementation of 
   Helios.
*x LowAllocMem
*x AllocMem
*x FreeMem
#
*n System\System library
*P Executes a function without timeslicing.
*I <process.h>
*F word System(WordFnPtr fn, ...);
*A %sfn%s - function to execute.
*A %s...%s - up to three word arguments which will be passed to %sfn%s.
*D %bSystem%b accepts a function pointer and a list of arguments to pass to
   the function.  It executes the function at the highest physical priority
   level (priority = 0).  The executing function is never timesliced, but the
   thread can be blocked as normal.
*p The %bSystem%b function is used to enter priority zero and it can be used to
   implement critical regions without recourse to semaphores or
   disabling interrupts.
*p Use of the %bSystem%b function should be limited as it can block the rest
   of the system completely.
*k C40
#
*n threadps\Helios command
*P The command displays information on each thread.
*F threadps [-lr]
*D %bthreadps%b displays information on all the threads in the system, whether
   they are in a timer or run queue or currently descheduled.  The thread
   task name is displayed together with initial function of the thread and the
   current status of the thread.  If the thread is blocked, the cause of the
   block is given.
*p The options are as follows:
*l %b-l%b
*t Provides more information on each thread such as the program counter and
   the stack pointer
*l %b-r%b
*t Provides thread information continuously.
*p The thread information is displayed in the following groups:
*p * threads on the timer queue
*p * threads on the run queue
*p * all threads in the system
*p Information on each thread in each group is displayed on a single line in
   the following format:
*c= <task-name> : <function-name> : <thread-state>
*p The %b<task-name>%b represents the name of the task.  For each task there
   are at least three thread entries:
*p * the main function of the task
*p * the signal handler for the task
*p * the procman IOC that the task uses to communicate with the rest of the system.
*p Tasks labelled %bSystem%b are internal.
*p The %b<function-name>%b represents the name of the function that was the
   entry point for the thread, in other words the first function that was
   called in the thread.
*p The contents of %b<thread-state>%b depends on the group of threads.  In the
   timer queue, %b<thread-state>%b displays the time at which the thread will
   be rescheduled.  In the run queue, %b<thread-state>%b displays whether
   the thread has been rescheduled or whether it is getting its next
   timeslice quantum.  In the %ball threads%b queue,  %b<thread-state>%b
   displays the current state of the thread such as whether it has been
   rescheduled or the reason why it has been blocked, for example: when waiting on
   a semaphore.
*p If the code has been compiled without function names, usually to reduce code
   size, the module name will be shown instead.
*x ps
*k C40
#
*n TimedWait\System library
*P Waits on a semaphore for signal or timeout.
*I <sem.h>
*F bool TimedWait(Semaphore *sem, word timeout);
*A %ssem%s - semaphore to wait on.
*A %stimeout%s - timeout on waiting semaphore.
*D %bTimedWait%b decrements the semaphore counter.  If the result is less
   than zero, it suspends the process until either a %bSignal%b is performed on
   that semaphore or the timeout expires.  If %bTimedWait%b returns %bFALSE%b,
   the wait was aborted because of a timeout rather than a %bSignal%b. This
   function is only implemented on non-Transputer implementations of Helios.
*k C40




