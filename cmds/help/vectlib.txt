#
*n  vector/vector-operations\System library
*P  to perform a pairwise arithmetic operation on the elements of two
    vectors.
*I  <vectlib.h>
*F
*c=void VfAdd( int n, float * x, float * y );
*c=void VfSub( int n, float * x, float * y );
*c=void VfMul( int n, float * x, float * y );
*c=void VfDiv( int n, float * x, float * y );
*c=
*c=void VdAdd( int n, double * x, double * y );
*c=void VdSub( int n, double * x, double * y );
*c=void VdMul( int n, double * x, double * y );
*c=void VdDiv( int n, double * x, double * y );
*c=
*c=void VfsAdd( int n, float * x, int x_stride, float * y, int y_stride );
*c=void VfsSub( int n, float * x, int x_stride, float * y, int y_stride );
*c=void VfsMul( int n, float * x, int x_stride, float * y, int y_stride );
*c=void VfsDiv( int n, float * x, int x_stride, float * y, int y_stride );
*c=
*c=void VdsAdd( int n, double *x, int x_stride, double *y, int y_stride );
*c=void VdsSub( int n, double *x, int x_stride, double *y, int y_stride );
*c=void VdsMul( int n, double *x, int x_stride, double *y, int y_stride );
*c=void VdsDiv( int n, double *x, int x_stride, double *y, int y_stride );
*A  %sn%s -- the number of elements in the vector.
*A  %sx%s -- the first vector of floating point numbers.
*A  %sx_stride%s -- the gap between successive elements of
    the %bx%b vector.  This gap is in units of the size of one element
    of the vector.  Thus a stride of 1 is equivalent to the non-stride
    versions of the functions.
*A  %sy%s -- the second vector of floating point numbers.
*A  %sy_stride%s -- the gap between successive elements of the
    %by%b vector.  Again this is in units of the size of one element of
    the vector.
*R  no value.
*D  These routines perform an arithmetic operation on successive
    elements of two vectors, storing the results in the first vector. There
    are variants for the four basic operations, the two levels of precision,
    and whether or not strides are used. The exact operations implemented are:
*l  Add x[i] =
*t  x[i] + y[i]
*l  Sub x[i] =
*t  x[i] - y[i]
*l  Mul x[i] =
*t  x[i] * y[i]
*l  Div x[i] = x[i] / y[i]
*p  For example an implementation of %bVfSub()%b in C might be:
*c=void VfSub( int n, float * x, float * y )
*c={
*c=  while (n--)
*c=  *x++ -= *y++;
*c=}
*p  Similarly a C implementation of %bVdsMul()%b might be:
*c=void VdsMul( int n, double * x, int x_stride, double * y, int y_stride )
*c={
*c=  while (n--)
*c=   { *x *= *y; x += x_stride; y += y_stride; }
*c=}
*x  vector/scalar-operations
*x  vector/scalar-multiply
*x  vector-initialization
*x  vector-copying
*x  vector-dot-products
*x  vector-sums-and-products
*x  vector-maxima-and-minima
*k VfAdd
*k VfSub
*k VfMul
*k VfDiv
*k VdAdd
*k VdSub
*k VdMul
*k VdDiv
*k VfsAdd
*k VfsSub
*k VfsMul
*k VfsDiv
*k VdsAdd
*k VdsSub
*k VdsMul
*k VdsDiv
*k Vector library
#
*n  vector/scalar-operations\System library
*P  to perform an arithmetic operation on the elements of a vector
    using a single scalar.
*I  <vectlib.h>
*F
*c=void VfAddScalar( float  value, int n, float * x );
*c=void VfSubScalar( float  value, int n, float * x );
*c=void VfMulScalar( float  value, int n, float * x );
*c=void VfDivScalar( float  value, int n, float * x );
*c=void VfRecScalar( float  value, int n, float * x );
*c=
*c=void VdAddScalar( double value, int n, double * x );
*c=void VdSubScalar( double value, int n, double * x );
*c=void VdMulScalar( double value, int n, double * x );
*c=void VdDivScalar( double value, int n, double * x );
*c=void VdRecScalar( double value, int n, double * x );
*c=
*c=void VfsAddScalar( float  value, int n, float * x, int stride );
*c=void VfsSubScalar( float  value, int n, float * x, int stride );
*c=void VfsMulScalar( float  value, int n, float * x, int stride );
*c=void VfsDivScalar( float  value, int n, float * x, int stride );
*c=void VfsRecScalar( float  value, int n, float * x, int stride );
*c=
*c=void VdsAddScalar( double value, int n, double * x, int stride );
*c=void VdsSubScalar( double value, int n, double * x, int stride );
*c=void VdsMulScalar( double value, int n, double * x, int stride );
*c=void VdsDivScalar( double value, int n, double * x, int stride );
*c=void VdsRecScalar( double value, int n, double * x, int stride );
*A  %svalue%s -- the scalar used for the operation.
*A  %sn%s -- the number of elements in the vector.
*A  %sx%s -- the vector of floating point numbers.
*A  %sx_stride%s -- the gap between successive elements of the
    %bxx%b vector.  A stride of 1 is equivalent to the non-stride
    versions of the functions.
*R  no value.
*D  these routines perform an arithmetic operation on
    successive elements of a vector using the supplied scalar, storing the
    results in the vector. There are variants for the five basic operations,
    the two levels of precision, and whether or not strides are used. The
    exact operations implemented are:
*l  Add x[i] =
*t  x[i] + value
*l  Sub x[i] =
*t  x[i] - value
*l  Mul x[i] =
*t  x[i] * value
*l  Div x[i] =
*t  x[i] / value
*l  Rec x[i] =
*t  value / x[i]
*p  For example an implementation of %bVdDiv()%b in C might be:
*c=
*c=void VdDiv( double value, int n, double * x )
*c={
*c=   while (n--)
*c=     *x++ /= value;
*c=}
*x  vector/vector-operations
*x  vector/scalar-multiply
*x  vector-initialization
*x  vector-copying
*x  vector-dot-products
*x  vector-sums-and-products
*x  vector-maxima-and-minima
*k VfAddScalar
*k VfSubScalar
*k VfMulScalar
*k VfDivScalar
*k VfRecScalar
*k VdAddScalar
*k VdSubScalar
*k VdMulScalar
*k VdDivScalar
*k VdRecScalar
*k VfsAddScalar
*k VfsSubScalar
*k VfsMulScalar
*k VfsDivScalar
*k VfsRecScalar
*k VdsAddScalar
*k VdsSubScalar
*k VdsMulScalar
*k VdsDivScalar
*k VdsRecScalar
*k Vector library
#
*n  vector/scalar-multiply\System library
*P  to multiply one vector by a scalar and add the results to another
    vector.
*I  <vectlib.h>
*F
*c=void VfMulAdd(  float value, int n, float *x, float *y );
*c=void VfsMulAdd( float value, int n, float *x, int x_stride,
*c=                                    float *y, int y_stride );
*c=void VdMulAdd(  double value, int n, double * x, double * y );
*c=void VdsMulAdd( double value, int n, double * x, int x_stride,
*c=                                     double * y, int y_stride );
*A  %svalue%s -- the scalar to be used for the multiplication.
*A  %sn%s -- the number of elements in the vector.
*A  %sx%s -- the results vector.
*A  %sx_stride%s -- the gap between successive elements in the
    %bx%b vector.  The units are the size of one element of the vector.
*A  %sy%s -- the vector to be multiplied.
*A  %sy_stride%s -- the gap between successive elements in the
    %by%b vector.  The units are the size of one element of the vector.
*R  no value.
*D  These routines are used to multiple all the elements of
    the %by%b vector by a scalar value and add the results into the
    %bx%b vector.
*c=   x[i] = x[i] + (value * y[i])
*p  There are variants for the two levels of precision and for whether
    or not strides are used. The %by%b vector is left unchanged.
    An implementation of %bVfMulAdd()%b in C might be:
*c=void VfMulAdd( float value, int n, float * x, float * y )
*c={
*c=  while (n--)
*c=    *x++ += (value * *y++);
*c=}
*x  vector/vector-operations
*x  vector/scalar-operations
*x  vector-initialization
*x  vector-copying
*x  vector-dot-products
*x  vector-sums-and-products
*x  vector-maxima-and-minima
*k VfMulAdd
*k VfsMulAdd
*k VdMulAdd
*k VdsMulAdd
*k Vector library
#
*n  vector-initialization\System library
*P  to initialize the elements of a vector.
*I  <vectlib.h>
*F
*c=void VfFill(  float  value, int n, float *  x );
*c=void VdFill(  double value, int n, double * x );
*c=void VfsFill( float  value, int n, float *  x, int stride );
*c=void VdsFill( double value, int n, double * x, int stride );
*A  %svalue%s -- the floating point number to be used for initialization
*A  %sn%s -- the number of elements in the vector.
*A  %sx%s -- the vector to be initialized.
*A  %sstride%s -- the gap between successive elements in the
    %bx%b vector.
*R  no value.
*D  These routines are used to set all the elements of a vector
    of floating point numbers to a particular value. There are variants
    for single and double precision arithmetic and for whether or not
    strides are used. For example an
    implementation of %bVfsFill()%b in C might be:
*c=void VfsFill( float value, int n, float * x, int stride )
*c={
*c=  while (n--)
*c=    { *x = value; x += stride; }
*c=}
*x  vector/vector-operations
*x  vector/scalar-operations
*x  vector/scalar-multiply
*x  vector-dot-products
*x  vector-sums-and-products
*x  vector-maxima-and-minima
*x  vector-copying
*k VfFill
*k VdFill
*k VfsFill
*k VdsFill
*k Vector library
#
*n  vector-copying\System library
*P  to copy a vector of floating point numbers.
*I  <vectlib.h>
*F
*c=void VfCopy(  int n, float *  x, float *  y );
*c=void VdCopy(  int n, double * x, double * y );
*c=void VfsCopy( int n, float * x, int x_stride, float * y, int y_stride );
*c=void VdsCopy( int n, double *x, int x_stride, double *y, int y_stride );
*A  %sn%s -- the number of vector elements to copy.
*A  %sx%s -- the destination of the copy.
*A  %sx_stride%s -- the gap between successive elements in the
    %bx%b vector.
*A  %sy%s -- the source of the copy.
*A  %sy_stride%s -- the gap between successive elements in the
    %by%b vector.
*R  no value.
*D  these routines copy %bn%b floating point numbers from the
    vector %by%b to the vector %bx%b. There are variants for the two
    levels of precision and for whether or not strides are used. For example
    an implementation of %bVdsCopy()%b in C might be:
*c=void VdsCopy( int n, double * x, int x_stride, double * y, int y_stride )
*c={
*c=  while (n--)
*c=    { *x = *y; x += x_stride; y += y_stride; }
*c=}
*x  vector/vector-operations
*x  vector/scalar-operations
*x  vector/scalar-multiply
*x  vector-initialization
*x  vector-sums-and-products
*x  vector-maxima-and-minima
*x  vector-dot-products
*k VfCopy
*k VdCopy
*k VfsCopy
*k VdsCopy
*k Vector library
#
*n  vector-dot-products\System library
*P  to calculate the dot product of two vectors.
*I  <vectlib.h>
*F
*c=float  VfDot(  int n, float *  x, float *  y );
*c=double VdDot(  int n, double * x, double * y );
*c=float  VfsDot( int n, float * x, int x_stride, float * y, int y_stride );
*c=double VdsDot( int n, double *x, int x_stride, double *y, int y_stride );
*A  %sn%s -- the number of elements in each vector.
*A  %sx%s -- the first vector of floating point numbers.
*A  %sx_stride%s -- the gap between successive elements of the
    %bx%b vector.
*A  %sy%s -- the second vector of floating point numbers.
*A  %sy_stride%s -- the gap between successive elements of
    the %by%b vector.
*R  the dot product of the two vectors.
*D  this routine evaluates the dot product of the two vectors.
    In other words it calculates the product of successive elements of the
    two vectors and returns the sum of these products. The two vectors
    remain unchanged.
*p  For example an implementation of the routine %bVfDot()%b in C might be:
*c=float VfDot( int n, float * x, float * y )
*c={ float result = 0.0;
*c=
*c=   while (n--)
*c=    result += (*x++ * *y++);
*c=
*c=  return(result);
*c=}
*x  vector/vector-operations
*x  vector/scalar-operations
*x  vector/scalar-multiply
*x  vector-initialization
*x  vector-copying
*x  vector-maxima-and-minima
*x  vector-sums-and-products
*k VfDot
*k VdDot
*k VfsDot
*k VdsDot
*k Vector library
#
*n  vector-sums-and-products\System library
*P  to calculate the sum or the product of the elements in a vector.
*I  <vectlib.h>
*F
*c=float  VfSum(   int n, float *  x );
*c=double VdSum(   int n, double * x );
*c=float  VfsSum(  int n, float *  x, int stride );
*c=double VdsSum(  int n, double * x, int stride );
*c=
*c=float  VfProd(  int n, float *  x );
*c=double VdProd(  int n, double * x );
*c=float  VfsProd( int n, float *  x, int stride );
*c=double VdsProd( int n, double * x, int stride );
*A  %sn%s -- the number of elements in the vector.
*A  %sx%s -- the vector of floating point numbers.
*A  %sstride%s -- the gap between successive elements of the vector.
*R  the sum or the product of the elements of the vector.
*D  The Sum routines add together all the elements of the vector
    and return the result. The Prod routines multiply together all the
    elements of the vector. The vectors themselves remain unchanged. There
    are variants for single and double precision and for whether or not
    a stride is used.
*p  For example, an implementation of the %bVdsSum()%b routine in C might be:
*c=double VdsSum( int n, double * x, int stride )
*c={ double result = 0.0;
*c=
*c=   while (n-- > 0)
*c=    { result += *x; x += stride; }
*c=
*c=  return(result);
*c=}
*x  vector/vector-operations
*x  vector/scalar-operations
*x  vector/scalar-multiply
*x  vector-initialization
*x  vector-copying
*x  vector-dot-products
*x  vector-maxima-and-minima
*k VfSum
*k VdSum
*k VfsSum
*k VdsSum
*k VfProd
*k VdProd
*k VfsProd
*k VdsProd
*k Vector library
#
*n  vector-maxima-and-minima\System library
*P  to determine the largest or smallest element of a vector.
*I  <vectlib.h>
*F
*c=int VfMax(   int n, float *  x );
*c=int VdMax(   int n, double * x );
*c=int VfsMax(  int n, float *  x, int stride );
*c=int VdsMax(  int n, double * x, int stride );
*c=
*c=int VfMin(   int n, float *  x );
*c=int VdMin(   int n, double * x );
*c=int VfsMin(  int n, float *  x, int stride );
*c=int VdsMin(  int n, double * x, int stride );
*c=
*c=int VfAmax(  int n, float *  x );
*c=int VdAmax(  int n, double * x );
*c=int VfsAmax( int n, float *  x, int stride );
*c=int VdsAmax( int n, double * x, int stride );
*c=
*c=int VfAmin(  int n, float *  x );
*c=int VdAmin(  int n, double * x );
*c=int VfsAmin( int n, float *  x, int stride );
*c=int VdsAmin( int n, double * x, int stride );
*A  %sn%s -- the number of elements in the vector.
*A  %sx%s -- the vector of numbers.
*A  %sstride%s -- the gap between successive elements of the vector.
*R  an index within the vector for the desired element.
*D  these routines can be used to identify the largest or smallest
    elements in a single vector. The Amax and Amin versions of the routine
    ignore the signs of the vector elements and only consider the absolute
    values. There are variants for single and double precision and for
    whether or not a stride is used.
*p  The number returned is an index within the vector. For example if a call
    to %bVfsMax()%b returns 0 then the first element of the vector is
    the largest. If the same call returns n - 1 then the last element of the
    vector is the largest.
*p  For example, an implementation of the %bVdMin()%b routine in C might be:
*c=static int VdMin( int n, double * x )
*c={ int  index   = 0;
*c=  double min     = *x;
*c=  int  i;
*c=
*c=  for (i = 1; i < n; i++)
*c=   if (x[ i ] < min)
*c=    { index = i; min = x[ i ]; }
*c=
*c=  return(index);
*c=}
*x  vector/vector-operations
*x  vector/scalar-operations
*x  vector/scalar-multiply
*x  vector-initialization
*x  vector-copying
*x  vector-dot-products
*x  vector-sums-and-products
*k VfMax
*k VdMax
*k VfsMax
*k VdsMax
*k VfMin
*k VdMin
*k VfsMin
*k VdsMin
*k VfAmax
*k VdAmax
*k VfsAmax
*k VdsAmax
*k VfAmin
*k VdAmin
*k VfsAmin
*k VdsAmin
*k Vector library
