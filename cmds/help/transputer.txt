#
*n asm\Helios command
*P Runs the Transputer assembler-linker
*k Assembler-linker
*F asm [<option>...] [<input>...]
*D This command runs the Transputer assembler-linker, taking one or more
input files (%sinput%s) and producing an assembled and linked output file
(%soutput%s). If you omit %sinput%s, %basm%b reads from the standard
input; if you omit `%s-o output%s', it sends the output to the standard
output. The %soption%ss are as follows:
*l Option
*t Description
*l %s-p%s
*t Generates tokenised form of %sinput%s
*l %s-x%s
*t Generates %soutput%s in ASCII hex rather than in binary
*l %s-i<letter>%s
*t Indicates the image file format. Currently %sletter%s can be either h
for Helios format (the default) or c for Inmos CSC format.
*l %s-l<library>%s
*t Indicates the name of a library %basm%b should search
*l %s-f%s
*t Performs a full link and optimises code size
*l %s-o<output>%s
*t Indicates the name of the output file
*l %s-v%s
*t Enters verbose mode and reports what is happening
*p It can also take the %s-s%s, %s-h%s, and %s-n%s of %bobjed%b. The
presence or absence of a space between the option and name, as in
%s-o<output>%s, is not important.
*x Assembling
*x c
*x objed
*q asm
*q Assembler linker, running the
*k transputer
#
*n c\Helios command
*P Runs the Helios compiler driver for the transputer
*F c [opts] <filename> [<filename> ...]
*D The %bc%b command is used to compile and link a program. It
takes a list of files and decides what to do with them according to their
suffix. The file names supported are as follows:
*l Suffix
*t Meaning
*l %b.a%b
*t Macro assembly language (AMPP) source file
*l %b.c%b
*t C language source file
*l %b.i%b
*t C language source file (pre-processed version)
*l %b.f%b
*t FORTRAN language source file
*l %b.o%b
*t Assembled file, ready for linking
*l %b.p%b
*t Assembled file, ready for linking
*l %b.s%b
*t Assembly language source file
*l %b.def%b
*t Modula-2 definition source file
*l %b.mod%b
*t Modula-2 program source file
*l %b.mod%b
*t Modula-2 program source file
*l %b.lib%b
*t Scanned library
*p If no other arguments are given, the program compiles the programs for
the languages specified as .c or .f, assembles any .s files and then links
all the resulting binaries along with any supplied .o files into an
executable program called a.out, removing the intermediary -s files.
*p The following options can be used to alter the behaviour of the program:
*l Option
*t Action
*l %b-a%b %s<text>%s
*t Pass %s<text>%s as an option to assembler.
*l %b-b%b
*t Don't link with standard maths libraries (fplib and fpclib).
*l %b-c%b
*t Compile/Assemble only, don't link.
*l %b-d%b%s<name>%s
*t Specify output file name for library .def compilations.
*l %b-e[6|7]%b
*t Enforce Fortran standard.
*l %b-f%b %s<name>%s
*t Specify filename for assembler's virtual memory system.
*l %b-g%b
*t Compiler for debugging.
*l %b-h%b%s<val> %s
*t Specify heap size of program.
*l %b-j%b
*t Create scanned library
*l %b-l%b%s<name>%s
*t Link with library <name>
*l %b-m%b
*t Compile code for libraries.
*l %b-n%b
*t Don't actually execute commands (implies -v).
*l %b-n%b%s<string>%s
*t Specify object name of program.
*l %b-o%b%s<name>%s
*t Specify output name (default *.o or "a.out") ("-" is stdout)
*l %b-p%b
*t Compile code for profiling.
*l %b-q%b%s<opt>%s
*t Enable compiler debugging features (where the %sopt%ss are
abdfghimopqrstuwxyz).
*l %b-r%b
*t Compile code for device drivers
*l %b-s%b%s<val>%s
*t Specify stack size of program.
*l %b-t%b
*t Compile code for tracing.
*l %b-tran%b
*t Compile code for transputers if cross-compiling.
*l %b-u%b
*t Prevent removal of intermediary files.
*l %b-v%b
*t Verify command being executed.
*l %b-w[Aacdfpsvz]%b
*t Suppress warnings.
*l %b-y%b%s<text>%s
*t Pass <text> as an option to the macro pre-processor
*l %b-z%b %s<text>%s
*t Pass %stext%s as an option to C compiler.
*l %b-A%b%s<text>%s
*t Pass <text> as an option to linker.
*l %b-B%b
*t Do not link with any libraries. Do not perform objed.
*l %b-C%b
*t Perform array bound checking (F77, M2).
*l %b-D%b%s<name>%s
*t #define <name>
*l %b-D%b%s<name>=<val>%s
*t #define <name> to be <val> (default <val> is 1).
*l %b-E%b
*t Pre-process only. Do not compile.
*l %b-F[Afghmsv]%b
*t Enable compiler features (`s' turns off stack checking and `g' removes
procedure names; `A' switches on `s' and `g').
*l %b-I%b%s<dir>%s
*t Specify a directory to be searched for #include or M2 symbol files.
*l %b-J%b
*t Append to a scanned library.
*l %b-K%b%s<text>%s
*t Pass %s<text>%s as an option to Modula-2 compiler.
*l %b-L%b%s<name>%s
*t Link with library <name>
*l %b-M%b%s<name>%s
*t Produce map file <name> (F77).
*l %b-O%b
*t Optimise code, perform full link.
*l %b-P%b%s<text>%s
*t Pass <text> as an option to the pre-processor
*l %b-R%b
*t Force use of RAM disc for temporary FORTRAN and Modula-2 files, even if
RAM disc is not loaded.
*l %b-S%b
*t Produce textual assembler output from *.c in *.s, don't link.
*l %b-T[4|5|8]%b
*t Specify Transputer type. (T5 => T425)
*l %b-V%b
*t Pass on verbose flag to executed commands.
*l %b-W%b%s<val>%s
*t Specify warning level (F77).
*l %b-X%b%s<val>%s
*t Specify cross reference width (F77).
*l %b-Z%b%s<text>%s
*t Pass %s<text>%s as an option to FORTRAN compiler.
*l %b-help%b
*t Display list of options supported by c.
*p For example, suppose you have a program called %stest%s, you might type:
*c=c -o test test.c
*p and using c for debugging, you might type:
*c=c -g -ld -o test test.c
*p %bc%b uses the following environment variables, if present:
*l C_COMPILER
*t Pathname of the C compiler
*l PRE_PROCESSOR
*t Pathname of the pre-processor
*l F77_PASS1
*t Pathname of the first pass of the FORTRAN compiler
*l F77_PASS2
*t Pathname of the second pass of the FORTRAN compiler
*l M2_COMPILER
*t Pathname of the Modula-2 compiler
*l ASSEMBLER
*t Pathname of the assembler
*l LINKER
*t Pathname of the linker
*l REMOVER
*t Pathname of the file removal program
*l MACDIR
*t Pathname of the standard AMPP macro directory
*l MACRO
*t Pathname of the AMPP
*l C_LIBDIR
*t Pathname of the library directory
*l C_INCDIR
*t Pathname of the standard C header directory
*l SYMDIR
*t Pathname of the Modula-2 symbol file directory
*l LINK_HELIOS
*t Name of the standard Helios link library
*l LINK_CSTART
*t Name of the C startup file
*l LINK_CLIB
*t Name of the standard C link library
*l LINK_FSTART
*t Name of the FORTRAN startup file
*l LINK_M2START
*t Name of the Modula-2 startup file
*l NEW_NCC
*t If set, this informs %bc%b which version of the C compiler is being used.
*l OBJNAME
*t Default name of output file
*l MACHINENAME
*t Name of the destination hardware, passed on by %b-D%b.
*p The following constants are also defined by %bc%b when compiling C code:
*l helios
*l __HELIOS
*l transputer
*l __TRAN
*l __HELIOSTRAN
*l %s<MACHINENAME>%s
*p Further details can be found in the latest edition of the %sHelios C Manual%s.
*q helios
*q __HELIOS
*q transputer
*q __TRAN
*q __HELIOSTRAN
*q <MACHINENAME>
*q c
*q Compiler driver
*q Modula-2
*q FORTRAN
*q AMPP
*x cc
*k transputer
#
*n cc\Helios command
*P Run the Helios C compiler for the transputer
*F cc [<option>...] <input>
*D To compile your C code, you can use the command cc. This
command takes the following options:
*l Option
*t Description
*l %b-d%b<symbol>
*t as #define<symbol> 1 at start of file
*l %b-d%b<symbol>=<value>
*t as #define<symbol><value> at start of file
*l %b-i%b<dir1>...,<dir%sn%s>.
*t list of directories to scan for #include "xxx", where `dir' is %sname%s/
*l %b-j%b<dir1>...,<dir%sn%s>.
*t list of directories to scan for #include <xxx>, where `dir' is %sname%s/
(defaults to `/helios/include')
*l %b-w%b<letters>
*t suppresses various warnings (when):
*l %ba%b
*t `=' occurs in condition context
*l %bd%b
*t (some) deprecated features are used
*l %bf%b
*t functions are implicitly declared as extern int()
*l %bs%b
*t `short' is used for the first time
*l %bv%b
*t void functions are written without `void'
*l %b-e%b<letters>
*t suppresses various (non serious) errors (when):
*l %bc%b
*t ANSI disallowed casts are used
*l %bp%b
*t junk occurs after #else and #endif
*l %bz%b
*t zero sized arrays occur
*l %b-f%b<letters>
*t enables various extra features (when):
*l %bf%b
*t suppress insertion of function names in code image (saves 5%% of code
size typically)
*l %bh%b
*t (for policing software quality requirements): 1) requires all %bextern%b
function definitions to be preceded by a declaration (presumably from a
header file) thus guaranteeing consistency 2) reports on all forward
static declarations which are unused when the function is defined
*l %bm%b
*t gives one warning for each #defined but unused macro
*l %bv%b
*t gives one warning for each declared but unused variable or function
*l %b-p%b<letter><int>
*t simulates #pragma -<letter> <int>
*l %b-s%b<filename>
*t sends assembly code to named file
*l %b-t%b<numeral>
*t %b4%b means compile code for T414 (the default); %b8%b means compile
code for T800
*p Note: The %bcc%b command is not available in all versions of Helios.
*q C compiler
*q cc
*q Helios C compiler
*q C compiler
*x c
*k transputer
#
*n pa_rboot\Helios command
*q pa_rboot, network command
*P Boots a Parsytec processor by hand
*F pa_rboot <link> <myname> <childname> [<link modes> <memory
limit>]
*D The %bpa_rboot%b command is a special version of %brboot%b
for use with Parsytec hardware. It is also used to boot up transputers by
hand, usually when the network is too small to warrant running all of the
networking software. The commands must be executed on an active processor
adjacent to the one being booted. The first argument specifies the link
used for the bootstrap, an integer between 0 and 3. The second argument is
the name of the processor doing the booting. The third argument is the
name of the processor being booted. Then there are two optional arguments:
link modes and memory limit. The link modes argument specifies the modes
of the four links of the newly booted processor: 0 means not connected; 1
means dumb; 2 means intelligent and active; 3 means intelligent but
pending. The final argument is rarely required: it specifies the amount of
memory to be used on the newly booted processor. This option is necessary
if the target processor has some memory mapped hardware such as video
memory adjacent to normal memory, which could cause the kernel to use that
video memory for memory allocation. For example, if the processor has one
megabyte of normal memory immediately followed by one megabyte of video
memory, a size of 0x1000000 could be used.
*p %bpa_rboot%b differs from %brboot%b in that it asserts the Parsytec
reset scheme before sending in the bootstrap. %brboot%b makes no attempt
to reset the target processor. On Parsytec hardware %bpa_rboot%b is likely
to be much more reliable. On non-Parsytec hardware, asserting the Parsytec
reset scheme may crash the processor.
*p A fuller description can be found under %brboot%b.
*x rboot
*x tr_reset
*x pa_reset
*x clink
*k transputer
#
*n pa_reset\Helios command
*q pa_reset, network command
*P Asserts the Parsytec reset scheme
*F pa_reset <link>
*D With the Parsytec reset scheme any processor can reset any
of its neighbours. When the Network Server is running the reset driver
%spa_ra.d%s uses this facility to achieve the required control over the
network. When booting a network by hand the reset scheme may be activated
manually with the %bpa_reset%b command.
*p The %bpa_reset%b command must be executed on a processor adjacent to the
one being reset and takes a single argument, the number of the connecting
link.
*p It is not essential to run %bpa_reset%b, since the %bpa_rboot%b program
also activates the Parsytec reset scheme before attempting the bootstrap.
However, it may make the bootstrap process more reliable. The %bpa_reset%b
program should not be used if a Network Server is currently running. The
%breset%b command should be used instead.
*x tr_reset
*x pa_rboot
*k transputer
#
*n rboot\Helios command
*q rboot, network command
*P Boots a processor by hand
*F rboot [-l<link>] <link> <myname> <childname> [<link modes> <memory limit>]
*D The %brboot%b command is used to boot up processors by
hand, usually when the network is too small to warrant running all of the
networking software. The command must be executed on an active processor
adjacent to the one being booted. The first argument specifies the link
used for the bootstrap, an integer between 0 and 3 in the case of transputers.
The second argument is
the name of the processor doing the booting. The third argument is the
name of the processor being booted. Then there are two optional arguments:
link modes and memory limit. The link modes argument specifies the modes
of the four links of the newly booted processor: 0 means not connected; 1
means dumb; 2 means intelligent and active; 3 means intelligent but
pending. The final argument is rarely required: it specifies the amount of
memory to be used on the newly booted processor. This option is necessary
if the target processor has some memory mapped hardware such as video
memory adjacent to normal memory, which could cause the kernel to use that
video memory for memory allocation. For example, if the processor has one
megabyte of normal memory immediately followed by one megabyte of video
memory, a size of 0x1000000 could be used.
*p If the target processor is being booted via any link other than its
link 0 then it is necessary to specify the target link. For example,
if processor 00 link 2 goes to processor 01 link 1 then the command
to boot processor 01 is:
*c=rboot -l1 2 /00 /01
*p There is another version of this command, %bpa_rboot%b, for use with
Parsytec hardware. See %bpa_rboot%b for further details.
*p The rboot and pa_rboot commands are often used in conjunction with the
remote command, for example:
*c=remote 01 rboot 2 /01 /02
*p This is necessary if the network contains processors not adjacent to the
root processor.
*x pa_rboot
*x tr_reset
*x pa_reset
*x clink
*k transputer
#
*n tr_reset\Helios command
*P Asserts the Inmos TRAM reset scheme
*F tr_reset
*D The %btr_reset%b command can be used to assert the Inmos
TRAM reset scheme, which is essentially a global reset of all other
processors in the network. If a network consists of TRAM modules and it is
intended to boot this network manually, the TRAM reset scheme should be
activated before any attempt to use the rboot program. The command does
not require any arguments.
*p The %btr_reset%b command should not be used if a Network Server is
currently running, because performing a global reset when the network is
active is rather drastic.
*x pa_reset
*x rboot
*k transputer
