Square root Algorithm
====== ==== =========

Let Q and n be whole numbers such that

0 <= Q < 2^(2*n)
0 < n

Then we seek a sequence (x[i]) of numbers such that:

(x[i])^2 <= Q < (x[i]+2^(n-i))^2

We note that this is satisfied if we set:

x[0] = 0

And inductively

          ( x[i]+2^(n-i-1)  if (x[i]+2^(n-i-1))^2 <= Q  "critical step"
x[i+1] =  (
          ( x[i]            otherwise                   "non-critical step"

Now suppose that we set

D[i] = Q - (x[i])^2

Then we get the recurrence:

D[i+1] = Q - (x[i+1])^2

Which, during the critical steps i->i+1 satisfies:

D[i+1] = Q - (x[i]+2^(n-i-1))^2
       = Q - ( (x[i])^2 + 2*x[i]*2^(n-i-1) + 2^(2*(n-i-1)) )
       = ( Q - (x[i]^2) ) - ( x[i]*2^(n-i) + 2^(2*(n-i-1)) )
       = D[i] - ( x[i]*2^(n-i) + 2^(2*(n-i-1)) )

And, during a non-critical step i->i+1 satisfies:

D[i+1] = D[i]

Now let us set the sequence E[i] as follows:

E[i] = x[i]*2^(n-i) + 2^(2*(n-i-1))

So that during the critical steps we have:

D[i+1] = D[i] - E[i]

Note also that the critical steps are characterized by:

D[i] - E[i] >= 0

Now, we note that during the critical steps:

E[i+1] = x[i+1]*2^(n-i-1) + 2^(2*(n-i-2))
       = (x[i]+2^(n-i-1))*2^(n-i-1) + 2^(2*(n-i-2))
       = 0.5*x[i]*2^(n-i) + 2^((2*(n-i-1)) + 2^(2*(n-i-2))
       = 0.5*x[i]*2^(n-1) + 1.25* 2^(2*(n-i-1))
       = 0.5*( x[i]*2^(n-i) + 2^(2*(n-i-1)) ) + 0.75* 2^(2*(n-i-1))
       = 0.5 * E[i] + 0.75 * 2^(2*(n-i-1))

And that during the non-critical steps:

E[i+1] = x[i+1]*2^(n-i-1) + 2^(2*(n-i-2))
       = x[i]*2^(n-i-1) + 2^(2*n-i-2))
       = 0.5*x[i]*2^(n-i-1) + 0.25*2^(2*(n-i-1))
       = 0.5*E[i] - 0.25 * 2^(2*(n-i-1))

Now we set the sequence

F[i]   = 2^(2*(n-i-1))

so that:

F[i+1] = 0.25*F[i]

And we get:

E[i+1] = 0.5*E[i] - F[i]/4         "non-critical step"
E[i+1] = 0.5*E[i] - F[i]/4 + F[i]  "critical step"

Now we also note that:

x[n]^2 <= Q < (x[n]+1)^2

And that:

E[n] = x[n] + 0.25

And that:

F[n] = 0.25 whereas F[n-1] = 1

Hence we need merely simulate the sequence in D,E, and F until F
   rounds down to zero and get our result in E[n], since the extra
   term of 0.25 will not appear due to the integer arithmetic.
   
  
Example:
 
Q=81 and n=4

Then :

D[0] = 81   ;    E[0] = 64   ;   F[0] = 64

D[0]-E[0] = 17 hence critical step:

D[1] = 17   ;    E[1] = 80   ;   F[1] = 16

D[1]-E[1] = -63 hence non-critical step:

D[2] = 17   ;    E[2] = 36   ;   F[3] = 4

D[2]-E[2] = -19 hence non-critical step:

D[3] = 17   ;   E[3] = 17    ;   F[3] = 1

D[3]-E[3] = 0 hence critical step:

D[4] = 0    ;   E[4] = 9.25  ;   F[4] = 0.25

Note that to perform the last step properly requires careful control
   of the accuracy, essentially one bit of accuracy is required. Try
   the approach where you do not use any extra bits for accuracy, but
   during each cycle you perform the test for criticality, then if
   so you take E away from D, and you add 2F to E, THEN you divide
   E by 2 regardless, divide F by 4, and take the new F away from
   the old E. In the non-critical case, you just get E divided by 2,
   F divided by 4, then F taken away from E, it all works that way
   quite nicely. Note that D[n] is the remainder after the division
   so that:
   
x[n]^2 + D[n] = Q  

Which may be useful sometimes.
