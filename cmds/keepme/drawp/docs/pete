From pete@pete Fri Feb 23 15:19:04 1990
Return-Path: <pete@pete>
Received: from pete.abcl.co.uk by server.abcl.co.uk (5.51/A-01)
	id AA08592; Fri, 23 Feb 90 15:18:59 GMT
Received: by pete.abcl.co.uk (5.51/A-01)
	id AA15748; Fri, 23 Feb 90 15:18:53 GMT
Date: Fri, 23 Feb 90 15:18:53 GMT
From: pete@pete (Peter Cockerell)
Message-Id: <9002231518.AA15748@pete.abcl.co.uk>
To: charles@pete
Status: RO

Charles

Thangs to do...

void dpDrawPoint(Pm, Gc, X, Y)
void dpDrawPoints(Pm, Gc, Point[], NumPonts, Mode)

where a Point is two ints (not shorts, otherwise I'd have to go through them
all and change them from ints to shorts before I call you), and Mode
is CoordModePrevious or Origin as with lines.

The point is plotted in colour Gc.foreground, using the GC's clipping
mask, if there is one, its plot function, and the destination's clip
region. 

If this is too much hassle, just give me

int	dpIsVisible(ClipNode_t *, int X, int Y);

to say whether a given point is visible in the given clip region.


--------------------------------------------------------------------------

Always draw something, even if it's not exactly what you might expect.
For example, if lineWidth > 0, just use thin lines for now.

--------------------------------------------------------------------------

What's the word on copyArea with non-trivial clip-regions? Did we
decide that it's too hard? It's a shame that copies can go wrong even
when it looks as though they shouldn't, eg suppose I have some windows
like this:

+------------------------------------+
|scrn                                |
|                  +----------+      |
|                  |          |      |
|    +-------+     |          |      |
|    |win1   |     | +----------+    |
|    |       |     | |win       |    |
|    |       |     | |          |    |
|    +-------+     +-|          |    |
|                    +----------+    |
|                                    |
+------------------------------------+                                    


If I move win1 down a bit using a single copy area, it goes wrong,
presumably because the scrn's clip region has a node that bisects win1
at the top of win2.  This means that I have to always go via an
offscreen pixmap.  (I could check that the dest.  pm has a simple clip
region, ie just its bounds, but that a pretty rare case, especially when
copying windows around.)

What about a function int dpSimpleClip(ClipNode_t*, Rect_t*) that
returns a flag saying whether the rectangle lies within a single clip
rectangle or not.  Then I can probably avoid going via an extra pm when
I don't need to. 



