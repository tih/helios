head     1.1;
branch   1.1.1;
access   ;
symbols  ncc:1.1.1.1 ncc:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     93.07.21.14.07.48;  author nick;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     93.07.21.14.07.49;  author nick;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
#include <stdio.h>


struct XX
{
	signed   int	si;
	unsigned int	ui;
	signed   short	ss_a;
	signed	 short	ss_n;
	unsigned short	us_a;
	unsigned short	us_n;	
	signed   char	sc;
	unsigned char	uc;
};

struct XX XX_e;

struct XX XX_init = { -100000, 100000, -300, -300, 300, 300, -100, 200 };

signed	 int	si_e;
unsigned int	ui_e;
signed   short	ss_e;
unsigned short	us_e;
signed	 char	sc_e;
unsigned char	uc_e;

#define checkassign(a, b)\
	printf("before assignment " #a " = %d " #b " = %d\n",a,b);\
	a = b;								\
	printf("after             " #a " = %d " #b " = %d\n",a,b);

#define revcheckassign(a, b) checkassign(b, a)
	
#define checkdisplace(a, b)\
	printf("before displacement " #a " = %d " #b " = %d\n",a,b);\
	a = b++;							\
	printf("after               " #a " = %d " #b " = %d\n",a,b);

#define revcheckdisplace(a, b) checkdisplace(b, a)


	
#define setlocals() (si_l=-100000,ui_l=100000,ss_l=-300,us_l=300,sc_l=-100,uc_l=200);

#define setglobals() (si_e=-100000,ui_e=100000,ss_e=-300,us_e=300,sc_e=-100,uc_e=200);

#define setstruct(x) (*(x)=XX_init);

int main()
{
	struct XX *XX_p = &XX_e;

	signed	 int 	si_l;
	unsigned int 	ui_l;
	signed	 short	ss_l;
	unsigned short	us_l;
	signed	 char	sc_l;
	unsigned char	uc_l;

	/*{{{  local assignments */
		setlocals();
		
		checkassign(si_l, si_l );
		checkassign(si_l, ui_l );
		checkassign(si_l, ss_l );
		checkassign(si_l, us_l );
		checkassign(si_l, sc_l );
		checkassign(si_l, uc_l );
	
		setlocals();
		
		checkassign(ui_l, si_l );
		checkassign(ui_l, ui_l );
		checkassign(ui_l, ss_l );
		checkassign(ui_l, us_l );
		checkassign(ui_l, sc_l );
		checkassign(ui_l, uc_l );
		
		setlocals();
		
		checkassign(ss_l, si_l );
		checkassign(ss_l, ui_l );
		checkassign(ss_l, ss_l );
		checkassign(ss_l, us_l );
		checkassign(ss_l, sc_l );
		checkassign(ss_l, uc_l );
	
		setlocals();
		
		checkassign(us_l, si_l );
		checkassign(us_l, ui_l );
		checkassign(us_l, ss_l );
		checkassign(us_l, us_l );
		checkassign(us_l, sc_l );
		checkassign(us_l, uc_l );
	
		setlocals();
		
		checkassign(sc_l, si_l );
		checkassign(sc_l, ui_l );
		checkassign(sc_l, ss_l );
		checkassign(sc_l, us_l );
		checkassign(sc_l, sc_l );
		checkassign(sc_l, uc_l );
		
		setlocals();
		
		checkassign(uc_l, si_l );
		checkassign(uc_l, ui_l );
		checkassign(uc_l, ss_l );
		checkassign(uc_l, us_l );
		checkassign(uc_l, sc_l );
		checkassign(uc_l, uc_l );
	/*}}}*/
	/*{{{  local displacements */
		setlocals();
		
		checkdisplace(si_l, si_l );
		checkdisplace(si_l, ui_l );
		checkdisplace(si_l, ss_l );
		checkdisplace(si_l, us_l );
		checkdisplace(si_l, sc_l );
		checkdisplace(si_l, uc_l );
	
		setlocals();
		
		checkdisplace(ui_l, si_l );
		checkdisplace(ui_l, ui_l );
		checkdisplace(ui_l, ss_l );
		checkdisplace(ui_l, us_l );
		checkdisplace(ui_l, sc_l );
		checkdisplace(ui_l, uc_l );
		
		setlocals();
		
		checkdisplace(ss_l, si_l );
		checkdisplace(ss_l, ui_l );
		checkdisplace(ss_l, ss_l );
		checkdisplace(ss_l, us_l );
		checkdisplace(ss_l, sc_l );
		checkdisplace(ss_l, uc_l );
	
		setlocals();
		
		checkdisplace(us_l, si_l );
		checkdisplace(us_l, ui_l );
		checkdisplace(us_l, ss_l );
		checkdisplace(us_l, us_l );
		checkdisplace(us_l, sc_l );
		checkdisplace(us_l, uc_l );
	
		setlocals();
		
		checkdisplace(sc_l, si_l );
		checkdisplace(sc_l, ui_l );
		checkdisplace(sc_l, ss_l );
		checkdisplace(sc_l, us_l );
		checkdisplace(sc_l, sc_l );
		checkdisplace(sc_l, uc_l );
		
		setlocals();
		
		checkdisplace(uc_l, si_l );
		checkdisplace(uc_l, ui_l );
		checkdisplace(uc_l, ss_l );
		checkdisplace(uc_l, us_l );
		checkdisplace(uc_l, sc_l );
		checkdisplace(uc_l, uc_l );
	/*}}}*/

	/*{{{  global assignments */
		setglobals();
		
		checkassign(si_e, si_e );
		checkassign(si_e, ui_e );
		checkassign(si_e, ss_e );
		checkassign(si_e, us_e );
		checkassign(si_e, sc_e );
		checkassign(si_e, uc_e );
	
		setglobals();
		
		checkassign(ui_e, si_e );
		checkassign(ui_e, ui_e );
		checkassign(ui_e, ss_e );
		checkassign(ui_e, us_e );
		checkassign(ui_e, sc_e );
		checkassign(ui_e, uc_e );
		
		setglobals();
		
		checkassign(ss_e, si_e );
		checkassign(ss_e, ui_e );
		checkassign(ss_e, ss_e );
		checkassign(ss_e, us_e );
		checkassign(ss_e, sc_e );
		checkassign(ss_e, uc_e );
	
		setglobals();
		
		checkassign(us_e, si_e );
		checkassign(us_e, ui_e );
		checkassign(us_e, ss_e );
		checkassign(us_e, us_e );
		checkassign(us_e, sc_e );
		checkassign(us_e, uc_e );
	
		setglobals();
		
		checkassign(sc_e, si_e );
		checkassign(sc_e, ui_e );
		checkassign(sc_e, ss_e );
		checkassign(sc_e, us_e );
		checkassign(sc_e, sc_e );
		checkassign(sc_e, uc_e );
		
		setglobals();
		
		checkassign(uc_e, si_e );
		checkassign(uc_e, ui_e );
		checkassign(uc_e, ss_e );
		checkassign(uc_e, us_e );
		checkassign(uc_e, sc_e );
		checkassign(uc_e, uc_e );
	/*}}}*/
	/*{{{  global displacements */
		setglobals();
		
		checkdisplace(si_e, si_e );
		checkdisplace(si_e, ui_e );
		checkdisplace(si_e, ss_e );
		checkdisplace(si_e, us_e );
		checkdisplace(si_e, sc_e );
		checkdisplace(si_e, uc_e );
	
		setglobals();
		
		checkdisplace(ui_e, si_e );
		checkdisplace(ui_e, ui_e );
		checkdisplace(ui_e, ss_e );
		checkdisplace(ui_e, us_e );
		checkdisplace(ui_e, sc_e );
		checkdisplace(ui_e, uc_e );
		
		setglobals();
		
		checkdisplace(ss_e, si_e );
		checkdisplace(ss_e, ui_e );
		checkdisplace(ss_e, ss_e );
		checkdisplace(ss_e, us_e );
		checkdisplace(ss_e, sc_e );
		checkdisplace(ss_e, uc_e );
	
		setglobals();
		
		checkdisplace(us_e, si_e );
		checkdisplace(us_e, ui_e );
		checkdisplace(us_e, ss_e );
		checkdisplace(us_e, us_e );
		checkdisplace(us_e, sc_e );
		checkdisplace(us_e, uc_e );
	
		setglobals();
		
		checkdisplace(sc_e, si_e );
		checkdisplace(sc_e, ui_e );
		checkdisplace(sc_e, ss_e );
		checkdisplace(sc_e, us_e );
		checkdisplace(sc_e, sc_e );
		checkdisplace(sc_e, uc_e );
		
		setglobals();
		
		checkdisplace(uc_e, si_e );
		checkdisplace(uc_e, ui_e );
		checkdisplace(uc_e, ss_e );
		checkdisplace(uc_e, us_e );
		checkdisplace(uc_e, sc_e );
		checkdisplace(uc_e, uc_e );
	/*}}}*/

	/*{{{  local->struct assignments */
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->si, si_l );
		checkassign(XX_p->si, ui_l );
		checkassign(XX_p->si, ss_l );
		checkassign(XX_p->si, us_l );
		checkassign(XX_p->si, sc_l );
		checkassign(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->ui, si_l );
		checkassign(XX_p->ui, ui_l );
		checkassign(XX_p->ui, ss_l );
		checkassign(XX_p->ui, us_l );
		checkassign(XX_p->ui, sc_l );
		checkassign(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_a, si_l );
		checkassign(XX_p->ss_a, ui_l );
		checkassign(XX_p->ss_a, ss_l );
		checkassign(XX_p->ss_a, us_l );
		checkassign(XX_p->ss_a, sc_l );
		checkassign(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_n, si_l );
		checkassign(XX_p->ss_n, ui_l );
		checkassign(XX_p->ss_n, ss_l );
		checkassign(XX_p->ss_n, us_l );
		checkassign(XX_p->ss_n, sc_l );
		checkassign(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_a, si_l );
		checkassign(XX_p->us_a, ui_l );
		checkassign(XX_p->us_a, ss_l );
		checkassign(XX_p->us_a, us_l );
		checkassign(XX_p->us_a, sc_l );
		checkassign(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_n, si_l );
		checkassign(XX_p->us_n, ui_l );
		checkassign(XX_p->us_n, ss_l );
		checkassign(XX_p->us_n, us_l );
		checkassign(XX_p->us_n, sc_l );
		checkassign(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->sc, si_l );
		checkassign(XX_p->sc, ui_l );
		checkassign(XX_p->sc, ss_l );
		checkassign(XX_p->sc, us_l );
		checkassign(XX_p->sc, sc_l );
		checkassign(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->uc, si_l );
		checkassign(XX_p->uc, ui_l );
		checkassign(XX_p->uc, ss_l );
		checkassign(XX_p->uc, us_l );
		checkassign(XX_p->uc, sc_l );
		checkassign(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  global->struct assignments */
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->si, si_e );
		checkassign(XX_p->si, ui_e );
		checkassign(XX_p->si, ss_e );
		checkassign(XX_p->si, us_e );
		checkassign(XX_p->si, sc_e );
		checkassign(XX_p->si, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->ui, si_e );
		checkassign(XX_p->ui, ui_e );
		checkassign(XX_p->ui, ss_e );
		checkassign(XX_p->ui, us_e );
		checkassign(XX_p->ui, sc_e );
		checkassign(XX_p->ui, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_a, si_e );
		checkassign(XX_p->ss_a, ui_e );
		checkassign(XX_p->ss_a, ss_e );
		checkassign(XX_p->ss_a, us_e );
		checkassign(XX_p->ss_a, sc_e );
		checkassign(XX_p->ss_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_n, si_e );
		checkassign(XX_p->ss_n, ui_e );
		checkassign(XX_p->ss_n, ss_e );
		checkassign(XX_p->ss_n, us_e );
		checkassign(XX_p->ss_n, sc_e );
		checkassign(XX_p->ss_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_a, si_e );
		checkassign(XX_p->us_a, ui_e );
		checkassign(XX_p->us_a, ss_e );
		checkassign(XX_p->us_a, us_e );
		checkassign(XX_p->us_a, sc_e );
		checkassign(XX_p->us_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_n, si_e );
		checkassign(XX_p->us_n, ui_e );
		checkassign(XX_p->us_n, ss_e );
		checkassign(XX_p->us_n, us_e );
		checkassign(XX_p->us_n, sc_e );
		checkassign(XX_p->us_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->sc, si_e );
		checkassign(XX_p->sc, ui_e );
		checkassign(XX_p->sc, ss_e );
		checkassign(XX_p->sc, us_e );
		checkassign(XX_p->sc, sc_e );
		checkassign(XX_p->sc, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->uc, si_e );
		checkassign(XX_p->uc, ui_e );
		checkassign(XX_p->uc, ss_e );
		checkassign(XX_p->uc, us_e );
		checkassign(XX_p->uc, sc_e );
		checkassign(XX_p->uc, uc_e );
	/*}}}*/
	
	/*{{{  struct->local assignments */
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->si, si_l );
		revcheckassign(XX_p->si, ui_l );
		revcheckassign(XX_p->si, ss_l );
		revcheckassign(XX_p->si, us_l );
		revcheckassign(XX_p->si, sc_l );
		revcheckassign(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ui, si_l );
		revcheckassign(XX_p->ui, ui_l );
		revcheckassign(XX_p->ui, ss_l );
		revcheckassign(XX_p->ui, us_l );
		revcheckassign(XX_p->ui, sc_l );
		revcheckassign(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_a, si_l );
		revcheckassign(XX_p->ss_a, ui_l );
		revcheckassign(XX_p->ss_a, ss_l );
		revcheckassign(XX_p->ss_a, us_l );
		revcheckassign(XX_p->ss_a, sc_l );
		revcheckassign(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_n, si_l );
		revcheckassign(XX_p->ss_n, ui_l );
		revcheckassign(XX_p->ss_n, ss_l );
		revcheckassign(XX_p->ss_n, us_l );
		revcheckassign(XX_p->ss_n, sc_l );
		revcheckassign(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_a, si_l );
		revcheckassign(XX_p->us_a, ui_l );
		revcheckassign(XX_p->us_a, ss_l );
		revcheckassign(XX_p->us_a, us_l );
		revcheckassign(XX_p->us_a, sc_l );
		revcheckassign(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_n, si_l );
		revcheckassign(XX_p->us_n, ui_l );
		revcheckassign(XX_p->us_n, ss_l );
		revcheckassign(XX_p->us_n, us_l );
		revcheckassign(XX_p->us_n, sc_l );
		revcheckassign(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->sc, si_l );
		revcheckassign(XX_p->sc, ui_l );
		revcheckassign(XX_p->sc, ss_l );
		revcheckassign(XX_p->sc, us_l );
		revcheckassign(XX_p->sc, sc_l );
		revcheckassign(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->uc, si_l );
		revcheckassign(XX_p->uc, ui_l );
		revcheckassign(XX_p->uc, ss_l );
		revcheckassign(XX_p->uc, us_l );
		revcheckassign(XX_p->uc, sc_l );
		revcheckassign(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  struct->global assignments */
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->si, si_e );
		revcheckassign(XX_p->si, ui_e );
		revcheckassign(XX_p->si, ss_e );
		revcheckassign(XX_p->si, us_e );
		revcheckassign(XX_p->si, sc_e );
		revcheckassign(XX_p->si, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ui, si_e );
		revcheckassign(XX_p->ui, ui_e );
		revcheckassign(XX_p->ui, ss_e );
		revcheckassign(XX_p->ui, us_e );
		revcheckassign(XX_p->ui, sc_e );
		revcheckassign(XX_p->ui, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_a, si_e );
		revcheckassign(XX_p->ss_a, ui_e );
		revcheckassign(XX_p->ss_a, ss_e );
		revcheckassign(XX_p->ss_a, us_e );
		revcheckassign(XX_p->ss_a, sc_e );
		revcheckassign(XX_p->ss_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_n, si_e );
		revcheckassign(XX_p->ss_n, ui_e );
		revcheckassign(XX_p->ss_n, ss_e );
		revcheckassign(XX_p->ss_n, us_e );
		revcheckassign(XX_p->ss_n, sc_e );
		revcheckassign(XX_p->ss_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_a, si_e );
		revcheckassign(XX_p->us_a, ui_e );
		revcheckassign(XX_p->us_a, ss_e );
		revcheckassign(XX_p->us_a, us_e );
		revcheckassign(XX_p->us_a, sc_e );
		revcheckassign(XX_p->us_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_n, si_e );
		revcheckassign(XX_p->us_n, ui_e );
		revcheckassign(XX_p->us_n, ss_e );
		revcheckassign(XX_p->us_n, us_e );
		revcheckassign(XX_p->us_n, sc_e );
		revcheckassign(XX_p->us_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->sc, si_e );
		revcheckassign(XX_p->sc, ui_e );
		revcheckassign(XX_p->sc, ss_e );
		revcheckassign(XX_p->sc, us_e );
		revcheckassign(XX_p->sc, sc_e );
		revcheckassign(XX_p->sc, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->uc, si_e );
		revcheckassign(XX_p->uc, ui_e );
		revcheckassign(XX_p->uc, ss_e );
		revcheckassign(XX_p->uc, us_e );
		revcheckassign(XX_p->uc, sc_e );
		revcheckassign(XX_p->uc, uc_e );
	/*}}}*/

	/*{{{  local->struct displacements */
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->si, si_l );
		checkdisplace(XX_p->si, ui_l );
		checkdisplace(XX_p->si, ss_l );
		checkdisplace(XX_p->si, us_l );
		checkdisplace(XX_p->si, sc_l );
		checkdisplace(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ui, si_l );
		checkdisplace(XX_p->ui, ui_l );
		checkdisplace(XX_p->ui, ss_l );
		checkdisplace(XX_p->ui, us_l );
		checkdisplace(XX_p->ui, sc_l );
		checkdisplace(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_a, si_l );
		checkdisplace(XX_p->ss_a, ui_l );
		checkdisplace(XX_p->ss_a, ss_l );
		checkdisplace(XX_p->ss_a, us_l );
		checkdisplace(XX_p->ss_a, sc_l );
		checkdisplace(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_n, si_l );
		checkdisplace(XX_p->ss_n, ui_l );
		checkdisplace(XX_p->ss_n, ss_l );
		checkdisplace(XX_p->ss_n, us_l );
		checkdisplace(XX_p->ss_n, sc_l );
		checkdisplace(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_a, si_l );
		checkdisplace(XX_p->us_a, ui_l );
		checkdisplace(XX_p->us_a, ss_l );
		checkdisplace(XX_p->us_a, us_l );
		checkdisplace(XX_p->us_a, sc_l );
		checkdisplace(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_n, si_l );
		checkdisplace(XX_p->us_n, ui_l );
		checkdisplace(XX_p->us_n, ss_l );
		checkdisplace(XX_p->us_n, us_l );
		checkdisplace(XX_p->us_n, sc_l );
		checkdisplace(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->sc, si_l );
		checkdisplace(XX_p->sc, ui_l );
		checkdisplace(XX_p->sc, ss_l );
		checkdisplace(XX_p->sc, us_l );
		checkdisplace(XX_p->sc, sc_l );
		checkdisplace(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->uc, si_l );
		checkdisplace(XX_p->uc, ui_l );
		checkdisplace(XX_p->uc, ss_l );
		checkdisplace(XX_p->uc, us_l );
		checkdisplace(XX_p->uc, sc_l );
		checkdisplace(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  global->struct displacements */
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->si, si_e );
		checkdisplace(XX_p->si, ui_e );
		checkdisplace(XX_p->si, ss_e );
		checkdisplace(XX_p->si, us_e );
		checkdisplace(XX_p->si, sc_e );
		checkdisplace(XX_p->si, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ui, si_e );
		checkdisplace(XX_p->ui, ui_e );
		checkdisplace(XX_p->ui, ss_e );
		checkdisplace(XX_p->ui, us_e );
		checkdisplace(XX_p->ui, sc_e );
		checkdisplace(XX_p->ui, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_a, si_e );
		checkdisplace(XX_p->ss_a, ui_e );
		checkdisplace(XX_p->ss_a, ss_e );
		checkdisplace(XX_p->ss_a, us_e );
		checkdisplace(XX_p->ss_a, sc_e );
		checkdisplace(XX_p->ss_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_n, si_e );
		checkdisplace(XX_p->ss_n, ui_e );
		checkdisplace(XX_p->ss_n, ss_e );
		checkdisplace(XX_p->ss_n, us_e );
		checkdisplace(XX_p->ss_n, sc_e );
		checkdisplace(XX_p->ss_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_a, si_e );
		checkdisplace(XX_p->us_a, ui_e );
		checkdisplace(XX_p->us_a, ss_e );
		checkdisplace(XX_p->us_a, us_e );
		checkdisplace(XX_p->us_a, sc_e );
		checkdisplace(XX_p->us_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_n, si_e );
		checkdisplace(XX_p->us_n, ui_e );
		checkdisplace(XX_p->us_n, ss_e );
		checkdisplace(XX_p->us_n, us_e );
		checkdisplace(XX_p->us_n, sc_e );
		checkdisplace(XX_p->us_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->sc, si_e );
		checkdisplace(XX_p->sc, ui_e );
		checkdisplace(XX_p->sc, ss_e );
		checkdisplace(XX_p->sc, us_e );
		checkdisplace(XX_p->sc, sc_e );
		checkdisplace(XX_p->sc, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->uc, si_e );
		checkdisplace(XX_p->uc, ui_e );
		checkdisplace(XX_p->uc, ss_e );
		checkdisplace(XX_p->uc, us_e );
		checkdisplace(XX_p->uc, sc_e );
		checkdisplace(XX_p->uc, uc_e );
	/*}}}*/
	
	/*{{{  struct->local displacements */
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->si, si_l );
		revcheckdisplace(XX_p->si, ui_l );
		revcheckdisplace(XX_p->si, ss_l );
		revcheckdisplace(XX_p->si, us_l );
		revcheckdisplace(XX_p->si, sc_l );
		revcheckdisplace(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ui, si_l );
		revcheckdisplace(XX_p->ui, ui_l );
		revcheckdisplace(XX_p->ui, ss_l );
		revcheckdisplace(XX_p->ui, us_l );
		revcheckdisplace(XX_p->ui, sc_l );
		revcheckdisplace(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_a, si_l );
		revcheckdisplace(XX_p->ss_a, ui_l );
		revcheckdisplace(XX_p->ss_a, ss_l );
		revcheckdisplace(XX_p->ss_a, us_l );
		revcheckdisplace(XX_p->ss_a, sc_l );
		revcheckdisplace(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_n, si_l );
		revcheckdisplace(XX_p->ss_n, ui_l );
		revcheckdisplace(XX_p->ss_n, ss_l );
		revcheckdisplace(XX_p->ss_n, us_l );
		revcheckdisplace(XX_p->ss_n, sc_l );
		revcheckdisplace(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_a, si_l );
		revcheckdisplace(XX_p->us_a, ui_l );
		revcheckdisplace(XX_p->us_a, ss_l );
		revcheckdisplace(XX_p->us_a, us_l );
		revcheckdisplace(XX_p->us_a, sc_l );
		revcheckdisplace(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_n, si_l );
		revcheckdisplace(XX_p->us_n, ui_l );
		revcheckdisplace(XX_p->us_n, ss_l );
		revcheckdisplace(XX_p->us_n, us_l );
		revcheckdisplace(XX_p->us_n, sc_l );
		revcheckdisplace(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->sc, si_l );
		revcheckdisplace(XX_p->sc, ui_l );
		revcheckdisplace(XX_p->sc, ss_l );
		revcheckdisplace(XX_p->sc, us_l );
		revcheckdisplace(XX_p->sc, sc_l );
		revcheckdisplace(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->uc, si_l );
		revcheckdisplace(XX_p->uc, ui_l );
		revcheckdisplace(XX_p->uc, ss_l );
		revcheckdisplace(XX_p->uc, us_l );
		revcheckdisplace(XX_p->uc, sc_l );
		revcheckdisplace(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  struct->global displacements */
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->si, si_e );
		revcheckdisplace(XX_p->si, ui_e );
		revcheckdisplace(XX_p->si, ss_e );
		revcheckdisplace(XX_p->si, us_e );
		revcheckdisplace(XX_p->si, sc_e );
		revcheckdisplace(XX_p->si, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ui, si_e );
		revcheckdisplace(XX_p->ui, ui_e );
		revcheckdisplace(XX_p->ui, ss_e );
		revcheckdisplace(XX_p->ui, us_e );
		revcheckdisplace(XX_p->ui, sc_e );
		revcheckdisplace(XX_p->ui, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_a, si_e );
		revcheckdisplace(XX_p->ss_a, ui_e );
		revcheckdisplace(XX_p->ss_a, ss_e );
		revcheckdisplace(XX_p->ss_a, us_e );
		revcheckdisplace(XX_p->ss_a, sc_e );
		revcheckdisplace(XX_p->ss_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_n, si_e );
		revcheckdisplace(XX_p->ss_n, ui_e );
		revcheckdisplace(XX_p->ss_n, ss_e );
		revcheckdisplace(XX_p->ss_n, us_e );
		revcheckdisplace(XX_p->ss_n, sc_e );
		revcheckdisplace(XX_p->ss_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_a, si_e );
		revcheckdisplace(XX_p->us_a, ui_e );
		revcheckdisplace(XX_p->us_a, ss_e );
		revcheckdisplace(XX_p->us_a, us_e );
		revcheckdisplace(XX_p->us_a, sc_e );
		revcheckdisplace(XX_p->us_a, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_n, si_e );
		revcheckdisplace(XX_p->us_n, ui_e );
		revcheckdisplace(XX_p->us_n, ss_e );
		revcheckdisplace(XX_p->us_n, us_e );
		revcheckdisplace(XX_p->us_n, sc_e );
		revcheckdisplace(XX_p->us_n, uc_e );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->sc, si_e );
		revcheckdisplace(XX_p->sc, ui_e );
		revcheckdisplace(XX_p->sc, ss_e );
		revcheckdisplace(XX_p->sc, us_e );
		revcheckdisplace(XX_p->sc, sc_e );
		revcheckdisplace(XX_p->sc, uc_e );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->uc, si_e );
		revcheckdisplace(XX_p->uc, ui_e );
		revcheckdisplace(XX_p->uc, ss_e );
		revcheckdisplace(XX_p->uc, us_e );
		revcheckdisplace(XX_p->uc, sc_e );
		revcheckdisplace(XX_p->uc, uc_e );
	/*}}}*/
	
}
@


1.1.1.1
log
@Initial Import of Norcroft C compiler for Transputer.
@
text
@@
