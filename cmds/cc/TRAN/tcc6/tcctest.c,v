head     1.1;
branch   1.1.1;
access   ;
symbols  ncc:1.1.1.1 ncc:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     93.07.21.14.07.30;  author nick;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     93.07.21.14.07.31;  author nick;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
#include <stdio.h>

#define	TEST1		1
#define	TEST2		1
#define	TEST3		1
#define	TEST4		1


struct XX
{
	signed   int	si;
	unsigned int	ui;
	signed   short	ss_a;
	signed	 short	ss_n;
	unsigned short	us_a;
	unsigned short	us_n;	
	signed   char	sc;
	unsigned char	uc;
};

struct XX XX_g;

struct XX XX_init = { -100000, 100000, -300, -300, 300, 300, -100, 200 };

signed	 int	si_g;
unsigned int	ui_g;
signed   short	ss_g;
unsigned short	us_g;
signed	 char	sc_g;
unsigned char	uc_g;

#define checkassign(a, b)\
	printf("%5d before assignment " #a " = %08x " #b " = %08x\n",__LINE__,a,b);\
	a = b;								\
	printf("%5d after             " #a " = %08x " #b " = %08x\n",__LINE__,a,b);

#define revcheckassign(a, b) checkassign(b, a)
	
#define checkdisplace(a, b)\
	printf("%5d before displacement " #a " = %08x " #b " = %08x\n",__LINE__,a,b);\
	a = b++;							\
	printf("%5d after               " #a " = %08x " #b " = %08x\n",__LINE__,a,b);

#define revcheckdisplace(a, b) checkdisplace(b, a)

#define	checkoperation(a, b, c, op)\
	printf("%5d before operation " #a " = %08x " #b " = %08x " #c " = %08x op " #op"\n",__LINE__,a,b,c);\
	a = b op c;							\
	printf("%5d after            " #a " = %08x " #b " = %08x " #c " = %08x op " #op"\n",__LINE__,a,b,c);

#define permop(a, b, c, op)		\
	checkoperation( a, b, c, op);	\
	checkoperation( a, c, b, op);	\
	checkoperation( b, a, c, op);	\
	checkoperation( b, c, a, op);	\
	checkoperation( c, b, a, op);	\
	checkoperation( c, a, b, op);

#define checkexpr(a, b, c, d)		\
	printf("%5d before expression " #a " = %08x " #b " = %08x " #c " = %08x " #d " = %08x\n",__LINE__,a,b,c,d);\
	a = ((a * b) + (b * c)) + ((c * d) + (d * b));		\
	printf("%5d after             " #a " = %08x " #b " = %08x " #c " = %08x " #d " = %08x\n",__LINE__,a,b,c,d);


#define permexpr1(a, b, c, d)           \
        checkexpr( a, b, c, d );        \
        checkexpr( a, b, d, c );        \
        checkexpr( a, d, b, c );        \
        checkexpr( d, a, b, c );        \
        checkexpr( d, a, c, b );        \
        checkexpr( a, d, c, b );        \
        checkexpr( a, c, d, b );        \
        checkexpr( a, c, b, d );        \
        checkexpr( c, a, b, d );        \
	checkexpr( c, a, d, b );        \
	checkexpr( c, d, a, b );        \
	checkexpr( d, c, a, b );


#define permexpr(a, b, c, d)            \
        permexpr1( a, b, c, d);         \
        permexpr1( d, c, b, a);


                
	
#define deflocals()			\
	struct XX *XX_p = &XX_g;	\
	struct XX XX_l;			\
	signed	 int 	si_l;		\
	unsigned int 	ui_l;		\
	signed	 short	ss_l;		\
	unsigned short	us_l;		\
	signed	 char	sc_l;		\
	unsigned char	uc_l;
	
#define setlocals() (si_l=-100000,ui_l=100000,ss_l=-300,us_l=300,sc_l=-100,uc_l=200);

#define setglobals() (si_g=-100000,ui_g=100000,ss_g=-300,us_g=300,sc_g=-100,uc_g=200);

#define setstruct(x) (*(x)=XX_init);

void test1()
{
	deflocals();
#if TEST1
	/*{{{  local->local assignments */
		setlocals();
		
		checkassign(si_l, si_l );
		checkassign(si_l, ui_l );
		checkassign(si_l, ss_l );
		checkassign(si_l, us_l );
		checkassign(si_l, sc_l );
		checkassign(si_l, uc_l );
	
		setlocals();
		
		checkassign(ui_l, si_l );
		checkassign(ui_l, ui_l );
		checkassign(ui_l, ss_l );
		checkassign(ui_l, us_l );
		checkassign(ui_l, sc_l );
		checkassign(ui_l, uc_l );
		
		setlocals();
		
		checkassign(ss_l, si_l );
		checkassign(ss_l, ui_l );
		checkassign(ss_l, ss_l );
		checkassign(ss_l, us_l );
		checkassign(ss_l, sc_l );
		checkassign(ss_l, uc_l );
	
		setlocals();
		
		checkassign(us_l, si_l );
		checkassign(us_l, ui_l );
		checkassign(us_l, ss_l );
		checkassign(us_l, us_l );
		checkassign(us_l, sc_l );
		checkassign(us_l, uc_l );
	
		setlocals();
		
		checkassign(sc_l, si_l );
		checkassign(sc_l, ui_l );
		checkassign(sc_l, ss_l );
		checkassign(sc_l, us_l );
		checkassign(sc_l, sc_l );
		checkassign(sc_l, uc_l );
		
		setlocals();
		
		checkassign(uc_l, si_l );
		checkassign(uc_l, ui_l );
		checkassign(uc_l, ss_l );
		checkassign(uc_l, us_l );
		checkassign(uc_l, sc_l );
		checkassign(uc_l, uc_l );
	/*}}}*/
	/*{{{  local->local displacements */
		setlocals();
		
		checkdisplace(si_l, si_l );
		checkdisplace(si_l, ui_l );
		checkdisplace(si_l, ss_l );
		checkdisplace(si_l, us_l );
		checkdisplace(si_l, sc_l );
		checkdisplace(si_l, uc_l );
	
		setlocals();
		
		checkdisplace(ui_l, si_l );
		checkdisplace(ui_l, ui_l );
		checkdisplace(ui_l, ss_l );
		checkdisplace(ui_l, us_l );
		checkdisplace(ui_l, sc_l );
		checkdisplace(ui_l, uc_l );
		
		setlocals();
		
		checkdisplace(ss_l, si_l );
		checkdisplace(ss_l, ui_l );
		checkdisplace(ss_l, ss_l );
		checkdisplace(ss_l, us_l );
		checkdisplace(ss_l, sc_l );
		checkdisplace(ss_l, uc_l );
	
		setlocals();
		
		checkdisplace(us_l, si_l );
		checkdisplace(us_l, ui_l );
		checkdisplace(us_l, ss_l );
		checkdisplace(us_l, us_l );
		checkdisplace(us_l, sc_l );
		checkdisplace(us_l, uc_l );
	
		setlocals();
		
		checkdisplace(sc_l, si_l );
		checkdisplace(sc_l, ui_l );
		checkdisplace(sc_l, ss_l );
		checkdisplace(sc_l, us_l );
		checkdisplace(sc_l, sc_l );
		checkdisplace(sc_l, uc_l );
		
		setlocals();
		
		checkdisplace(uc_l, si_l );
		checkdisplace(uc_l, ui_l );
		checkdisplace(uc_l, ss_l );
		checkdisplace(uc_l, us_l );
		checkdisplace(uc_l, sc_l );
		checkdisplace(uc_l, uc_l );
	/*}}}*/

	/*{{{  global->global assignments */
		setglobals();
		
		checkassign(si_g, si_g );
		checkassign(si_g, ui_g );
		checkassign(si_g, ss_g );
		checkassign(si_g, us_g );
		checkassign(si_g, sc_g );
		checkassign(si_g, uc_g );
	
		setglobals();
		
		checkassign(ui_g, si_g );
		checkassign(ui_g, ui_g );
		checkassign(ui_g, ss_g );
		checkassign(ui_g, us_g );
		checkassign(ui_g, sc_g );
		checkassign(ui_g, uc_g );
		
		setglobals();
		
		checkassign(ss_g, si_g );
		checkassign(ss_g, ui_g );
		checkassign(ss_g, ss_g );
		checkassign(ss_g, us_g );
		checkassign(ss_g, sc_g );
		checkassign(ss_g, uc_g );
	
		setglobals();
		
		checkassign(us_g, si_g );
		checkassign(us_g, ui_g );
		checkassign(us_g, ss_g );
		checkassign(us_g, us_g );
		checkassign(us_g, sc_g );
		checkassign(us_g, uc_g );
	
		setglobals();
		
		checkassign(sc_g, si_g );
		checkassign(sc_g, ui_g );
		checkassign(sc_g, ss_g );
		checkassign(sc_g, us_g );
		checkassign(sc_g, sc_g );
		checkassign(sc_g, uc_g );
		
		setglobals();
		
		checkassign(uc_g, si_g );
		checkassign(uc_g, ui_g );
		checkassign(uc_g, ss_g );
		checkassign(uc_g, us_g );
		checkassign(uc_g, sc_g );
		checkassign(uc_g, uc_g );
	/*}}}*/
	/*{{{  global->global displacements */
		setglobals();
		
		checkdisplace(si_g, si_g );
		checkdisplace(si_g, ui_g );
		checkdisplace(si_g, ss_g );
		checkdisplace(si_g, us_g );
		checkdisplace(si_g, sc_g );
		checkdisplace(si_g, uc_g );
	
		setglobals();
		
		checkdisplace(ui_g, si_g );
		checkdisplace(ui_g, ui_g );
		checkdisplace(ui_g, ss_g );
		checkdisplace(ui_g, us_g );
		checkdisplace(ui_g, sc_g );
		checkdisplace(ui_g, uc_g );
		
		setglobals();
		
		checkdisplace(ss_g, si_g );
		checkdisplace(ss_g, ui_g );
		checkdisplace(ss_g, ss_g );
		checkdisplace(ss_g, us_g );
		checkdisplace(ss_g, sc_g );
		checkdisplace(ss_g, uc_g );
	
		setglobals();
		
		checkdisplace(us_g, si_g );
		checkdisplace(us_g, ui_g );
		checkdisplace(us_g, ss_g );
		checkdisplace(us_g, us_g );
		checkdisplace(us_g, sc_g );
		checkdisplace(us_g, uc_g );
	
		setglobals();
		
		checkdisplace(sc_g, si_g );
		checkdisplace(sc_g, ui_g );
		checkdisplace(sc_g, ss_g );
		checkdisplace(sc_g, us_g );
		checkdisplace(sc_g, sc_g );
		checkdisplace(sc_g, uc_g );
		
		setglobals();
		
		checkdisplace(uc_g, si_g );
		checkdisplace(uc_g, ui_g );
		checkdisplace(uc_g, ss_g );
		checkdisplace(uc_g, us_g );
		checkdisplace(uc_g, sc_g );
		checkdisplace(uc_g, uc_g );
	/*}}}*/

	/*{{{  local->global assignments */
		setlocals();
		setglobals();
		
		checkassign(si_g, si_l );
		checkassign(si_g, ui_l );
		checkassign(si_g, ss_l );
		checkassign(si_g, us_l );
		checkassign(si_g, sc_l );
		checkassign(si_g, uc_l );
	
		setlocals();
		setglobals();
		
		checkassign(ui_g, si_l );
		checkassign(ui_g, ui_l );
		checkassign(ui_g, ss_l );
		checkassign(ui_g, us_l );
		checkassign(ui_g, sc_l );
		checkassign(ui_g, uc_l );
		
		setlocals();
		setglobals();
		
		checkassign(ss_g, si_l );
		checkassign(ss_g, ui_l );
		checkassign(ss_g, ss_l );
		checkassign(ss_g, us_l );
		checkassign(ss_g, sc_l );
		checkassign(ss_g, uc_l );
	
		setlocals();
		setglobals();
		
		checkassign(us_g, si_l );
		checkassign(us_g, ui_l );
		checkassign(us_g, ss_l );
		checkassign(us_g, us_l );
		checkassign(us_g, sc_l );
		checkassign(us_g, uc_l );
	
		setlocals();
		setglobals();
		
		checkassign(sc_g, si_l );
		checkassign(sc_g, ui_l );
		checkassign(sc_g, ss_l );
		checkassign(sc_g, us_l );
		checkassign(sc_g, sc_l );
		checkassign(sc_g, uc_l );
		
		setlocals();
		setglobals();
		
		checkassign(uc_g, si_l );
		checkassign(uc_g, ui_l );
		checkassign(uc_g, ss_l );
		checkassign(uc_g, us_l );
		checkassign(uc_g, sc_l );
		checkassign(uc_g, uc_l );
	/*}}}*/
	/*{{{  local->global displacements */
		setlocals();
		setglobals();
		
		checkdisplace(si_g, si_l );
		checkdisplace(si_g, ui_l );
		checkdisplace(si_g, ss_l );
		checkdisplace(si_g, us_l );
		checkdisplace(si_g, sc_l );
		checkdisplace(si_g, uc_l );
	
		setlocals();
		setglobals();
		
		checkdisplace(ui_g, si_l );
		checkdisplace(ui_g, ui_l );
		checkdisplace(ui_g, ss_l );
		checkdisplace(ui_g, us_l );
		checkdisplace(ui_g, sc_l );
		checkdisplace(ui_g, uc_l );
		
		setlocals();
		setglobals();
		
		checkdisplace(ss_g, si_l );
		checkdisplace(ss_g, ui_l );
		checkdisplace(ss_g, ss_l );
		checkdisplace(ss_g, us_l );
		checkdisplace(ss_g, sc_l );
		checkdisplace(ss_g, uc_l );
	
		setlocals();
		setglobals();
		
		checkdisplace(us_g, si_l );
		checkdisplace(us_g, ui_l );
		checkdisplace(us_g, ss_l );
		checkdisplace(us_g, us_l );
		checkdisplace(us_g, sc_l );
		checkdisplace(us_g, uc_l );
	
		setlocals();
		setglobals();
		
		checkdisplace(sc_g, si_l );
		checkdisplace(sc_g, ui_l );
		checkdisplace(sc_g, ss_l );
		checkdisplace(sc_g, us_l );
		checkdisplace(sc_g, sc_l );
		checkdisplace(sc_g, uc_l );
		
		setlocals();
		setglobals();
		
		checkdisplace(uc_g, si_l );
		checkdisplace(uc_g, ui_l );
		checkdisplace(uc_g, ss_l );
		checkdisplace(uc_g, us_l );
		checkdisplace(uc_g, sc_l );
		checkdisplace(uc_g, uc_l );
	/*}}}*/
	
	/*{{{  global->local assignments */
		setlocals();
		setglobals();
		
		revcheckassign(si_g, si_l );
		revcheckassign(si_g, ui_l );
		revcheckassign(si_g, ss_l );
		revcheckassign(si_g, us_l );
		revcheckassign(si_g, sc_l );
		revcheckassign(si_g, uc_l );
	
		setlocals();
		setglobals();
		
		revcheckassign(ui_g, si_l );
		revcheckassign(ui_g, ui_l );
		revcheckassign(ui_g, ss_l );
		revcheckassign(ui_g, us_l );
		revcheckassign(ui_g, sc_l );
		revcheckassign(ui_g, uc_l );
		
		setlocals();
		setglobals();
		
		revcheckassign(ss_g, si_l );
		revcheckassign(ss_g, ui_l );
		revcheckassign(ss_g, ss_l );
		revcheckassign(ss_g, us_l );
		revcheckassign(ss_g, sc_l );
		revcheckassign(ss_g, uc_l );
	
		setlocals();
		setglobals();
		
		revcheckassign(us_g, si_l );
		revcheckassign(us_g, ui_l );
		revcheckassign(us_g, ss_l );
		revcheckassign(us_g, us_l );
		revcheckassign(us_g, sc_l );
		revcheckassign(us_g, uc_l );
	
		setlocals();
		setglobals();
		
		revcheckassign(sc_g, si_l );
		revcheckassign(sc_g, ui_l );
		revcheckassign(sc_g, ss_l );
		revcheckassign(sc_g, us_l );
		revcheckassign(sc_g, sc_l );
		revcheckassign(sc_g, uc_l );
		
		setlocals();
		setglobals();
		
		revcheckassign(uc_g, si_l );
		revcheckassign(uc_g, ui_l );
		revcheckassign(uc_g, ss_l );
		revcheckassign(uc_g, us_l );
		revcheckassign(uc_g, sc_l );
		revcheckassign(uc_g, uc_l );
	/*}}}*/
	/*{{{  global->local displacements */
		setlocals();
		setglobals();
		
		revcheckdisplace(si_g, si_l );
		revcheckdisplace(si_g, ui_l );
		revcheckdisplace(si_g, ss_l );
		revcheckdisplace(si_g, us_l );
		revcheckdisplace(si_g, sc_l );
		revcheckdisplace(si_g, uc_l );
	
		setlocals();
		setglobals();
		
		revcheckdisplace(ui_g, si_l );
		revcheckdisplace(ui_g, ui_l );
		revcheckdisplace(ui_g, ss_l );
		revcheckdisplace(ui_g, us_l );
		revcheckdisplace(ui_g, sc_l );
		revcheckdisplace(ui_g, uc_l );
		
		setlocals();
		setglobals();
		
		revcheckdisplace(ss_g, si_l );
		revcheckdisplace(ss_g, ui_l );
		revcheckdisplace(ss_g, ss_l );
		revcheckdisplace(ss_g, us_l );
		revcheckdisplace(ss_g, sc_l );
		revcheckdisplace(ss_g, uc_l );
	
		setlocals();
		setglobals();
		
		revcheckdisplace(us_g, si_l );
		revcheckdisplace(us_g, ui_l );
		revcheckdisplace(us_g, ss_l );
		revcheckdisplace(us_g, us_l );
		revcheckdisplace(us_g, sc_l );
		revcheckdisplace(us_g, uc_l );
	
		setlocals();
		setglobals();
		
		revcheckdisplace(sc_g, si_l );
		revcheckdisplace(sc_g, ui_l );
		revcheckdisplace(sc_g, ss_l );
		revcheckdisplace(sc_g, us_l );
		revcheckdisplace(sc_g, sc_l );
		revcheckdisplace(sc_g, uc_l );
		
		setlocals();
		setglobals();
		
		revcheckdisplace(uc_g, si_l );
		revcheckdisplace(uc_g, ui_l );
		revcheckdisplace(uc_g, ss_l );
		revcheckdisplace(uc_g, us_l );
		revcheckdisplace(uc_g, sc_l );
		revcheckdisplace(uc_g, uc_l );
	/*}}}*/
#endif
}

void test2()
{

#if TEST2
	deflocals();
	
	/*{{{  local->struct assignments */
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->si, si_l );
		checkassign(XX_p->si, ui_l );
		checkassign(XX_p->si, ss_l );
		checkassign(XX_p->si, us_l );
		checkassign(XX_p->si, sc_l );
		checkassign(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->ui, si_l );
		checkassign(XX_p->ui, ui_l );
		checkassign(XX_p->ui, ss_l );
		checkassign(XX_p->ui, us_l );
		checkassign(XX_p->ui, sc_l );
		checkassign(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_a, si_l );
		checkassign(XX_p->ss_a, ui_l );
		checkassign(XX_p->ss_a, ss_l );
		checkassign(XX_p->ss_a, us_l );
		checkassign(XX_p->ss_a, sc_l );
		checkassign(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_n, si_l );
		checkassign(XX_p->ss_n, ui_l );
		checkassign(XX_p->ss_n, ss_l );
		checkassign(XX_p->ss_n, us_l );
		checkassign(XX_p->ss_n, sc_l );
		checkassign(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_a, si_l );
		checkassign(XX_p->us_a, ui_l );
		checkassign(XX_p->us_a, ss_l );
		checkassign(XX_p->us_a, us_l );
		checkassign(XX_p->us_a, sc_l );
		checkassign(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_n, si_l );
		checkassign(XX_p->us_n, ui_l );
		checkassign(XX_p->us_n, ss_l );
		checkassign(XX_p->us_n, us_l );
		checkassign(XX_p->us_n, sc_l );
		checkassign(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->sc, si_l );
		checkassign(XX_p->sc, ui_l );
		checkassign(XX_p->sc, ss_l );
		checkassign(XX_p->sc, us_l );
		checkassign(XX_p->sc, sc_l );
		checkassign(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkassign(XX_p->uc, si_l );
		checkassign(XX_p->uc, ui_l );
		checkassign(XX_p->uc, ss_l );
		checkassign(XX_p->uc, us_l );
		checkassign(XX_p->uc, sc_l );
		checkassign(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  local->lstruct assignments */
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.si, si_l );
		checkassign(XX_l.si, ui_l );
		checkassign(XX_l.si, ss_l );
		checkassign(XX_l.si, us_l );
		checkassign(XX_l.si, sc_l );
		checkassign(XX_l.si, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.ui, si_l );
		checkassign(XX_l.ui, ui_l );
		checkassign(XX_l.ui, ss_l );
		checkassign(XX_l.ui, us_l );
		checkassign(XX_l.ui, sc_l );
		checkassign(XX_l.ui, uc_l );
		
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.ss_a, si_l );
		checkassign(XX_l.ss_a, ui_l );
		checkassign(XX_l.ss_a, ss_l );
		checkassign(XX_l.ss_a, us_l );
		checkassign(XX_l.ss_a, sc_l );
		checkassign(XX_l.ss_a, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.ss_n, si_l );
		checkassign(XX_l.ss_n, ui_l );
		checkassign(XX_l.ss_n, ss_l );
		checkassign(XX_l.ss_n, us_l );
		checkassign(XX_l.ss_n, sc_l );
		checkassign(XX_l.ss_n, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.us_a, si_l );
		checkassign(XX_l.us_a, ui_l );
		checkassign(XX_l.us_a, ss_l );
		checkassign(XX_l.us_a, us_l );
		checkassign(XX_l.us_a, sc_l );
		checkassign(XX_l.us_a, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.us_n, si_l );
		checkassign(XX_l.us_n, ui_l );
		checkassign(XX_l.us_n, ss_l );
		checkassign(XX_l.us_n, us_l );
		checkassign(XX_l.us_n, sc_l );
		checkassign(XX_l.us_n, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.sc, si_l );
		checkassign(XX_l.sc, ui_l );
		checkassign(XX_l.sc, ss_l );
		checkassign(XX_l.sc, us_l );
		checkassign(XX_l.sc, sc_l );
		checkassign(XX_l.sc, uc_l );
		
		setlocals();
		setstruct(&XX_l);
		
		checkassign(XX_l.uc, si_l );
		checkassign(XX_l.uc, ui_l );
		checkassign(XX_l.uc, ss_l );
		checkassign(XX_l.uc, us_l );
		checkassign(XX_l.uc, sc_l );
		checkassign(XX_l.uc, uc_l );
	/*}}}*/
	/*{{{  global->struct assignments */
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->si, si_g );
		checkassign(XX_p->si, ui_g );
		checkassign(XX_p->si, ss_g );
		checkassign(XX_p->si, us_g );
		checkassign(XX_p->si, sc_g );
		checkassign(XX_p->si, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->ui, si_g );
		checkassign(XX_p->ui, ui_g );
		checkassign(XX_p->ui, ss_g );
		checkassign(XX_p->ui, us_g );
		checkassign(XX_p->ui, sc_g );
		checkassign(XX_p->ui, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_a, si_g );
		checkassign(XX_p->ss_a, ui_g );
		checkassign(XX_p->ss_a, ss_g );
		checkassign(XX_p->ss_a, us_g );
		checkassign(XX_p->ss_a, sc_g );
		checkassign(XX_p->ss_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->ss_n, si_g );
		checkassign(XX_p->ss_n, ui_g );
		checkassign(XX_p->ss_n, ss_g );
		checkassign(XX_p->ss_n, us_g );
		checkassign(XX_p->ss_n, sc_g );
		checkassign(XX_p->ss_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_a, si_g );
		checkassign(XX_p->us_a, ui_g );
		checkassign(XX_p->us_a, ss_g );
		checkassign(XX_p->us_a, us_g );
		checkassign(XX_p->us_a, sc_g );
		checkassign(XX_p->us_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->us_n, si_g );
		checkassign(XX_p->us_n, ui_g );
		checkassign(XX_p->us_n, ss_g );
		checkassign(XX_p->us_n, us_g );
		checkassign(XX_p->us_n, sc_g );
		checkassign(XX_p->us_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->sc, si_g );
		checkassign(XX_p->sc, ui_g );
		checkassign(XX_p->sc, ss_g );
		checkassign(XX_p->sc, us_g );
		checkassign(XX_p->sc, sc_g );
		checkassign(XX_p->sc, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		checkassign(XX_p->uc, si_g );
		checkassign(XX_p->uc, ui_g );
		checkassign(XX_p->uc, ss_g );
		checkassign(XX_p->uc, us_g );
		checkassign(XX_p->uc, sc_g );
		checkassign(XX_p->uc, uc_g );
	/*}}}*/
	/*{{{  global->lstruct assignments */
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.si, si_g );
		checkassign(XX_l.si, ui_g );
		checkassign(XX_l.si, ss_g );
		checkassign(XX_l.si, us_g );
		checkassign(XX_l.si, sc_g );
		checkassign(XX_l.si, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.ui, si_g );
		checkassign(XX_l.ui, ui_g );
		checkassign(XX_l.ui, ss_g );
		checkassign(XX_l.ui, us_g );
		checkassign(XX_l.ui, sc_g );
		checkassign(XX_l.ui, uc_g );
		
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.ss_a, si_g );
		checkassign(XX_l.ss_a, ui_g );
		checkassign(XX_l.ss_a, ss_g );
		checkassign(XX_l.ss_a, us_g );
		checkassign(XX_l.ss_a, sc_g );
		checkassign(XX_l.ss_a, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.ss_n, si_g );
		checkassign(XX_l.ss_n, ui_g );
		checkassign(XX_l.ss_n, ss_g );
		checkassign(XX_l.ss_n, us_g );
		checkassign(XX_l.ss_n, sc_g );
		checkassign(XX_l.ss_n, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.us_a, si_g );
		checkassign(XX_l.us_a, ui_g );
		checkassign(XX_l.us_a, ss_g );
		checkassign(XX_l.us_a, us_g );
		checkassign(XX_l.us_a, sc_g );
		checkassign(XX_l.us_a, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.us_n, si_g );
		checkassign(XX_l.us_n, ui_g );
		checkassign(XX_l.us_n, ss_g );
		checkassign(XX_l.us_n, us_g );
		checkassign(XX_l.us_n, sc_g );
		checkassign(XX_l.us_n, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.sc, si_g );
		checkassign(XX_l.sc, ui_g );
		checkassign(XX_l.sc, ss_g );
		checkassign(XX_l.sc, us_g );
		checkassign(XX_l.sc, sc_g );
		checkassign(XX_l.sc, uc_g );
		
		setglobals();
		setstruct(&XX_l);
		
		checkassign(XX_l.uc, si_g );
		checkassign(XX_l.uc, ui_g );
		checkassign(XX_l.uc, ss_g );
		checkassign(XX_l.uc, us_g );
		checkassign(XX_l.uc, sc_g );
		checkassign(XX_l.uc, uc_g );
	/*}}}*/
	
	/*{{{  struct->local assignments */
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->si, si_l );
		revcheckassign(XX_p->si, ui_l );
		revcheckassign(XX_p->si, ss_l );
		revcheckassign(XX_p->si, us_l );
		revcheckassign(XX_p->si, sc_l );
		revcheckassign(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ui, si_l );
		revcheckassign(XX_p->ui, ui_l );
		revcheckassign(XX_p->ui, ss_l );
		revcheckassign(XX_p->ui, us_l );
		revcheckassign(XX_p->ui, sc_l );
		revcheckassign(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_a, si_l );
		revcheckassign(XX_p->ss_a, ui_l );
		revcheckassign(XX_p->ss_a, ss_l );
		revcheckassign(XX_p->ss_a, us_l );
		revcheckassign(XX_p->ss_a, sc_l );
		revcheckassign(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_n, si_l );
		revcheckassign(XX_p->ss_n, ui_l );
		revcheckassign(XX_p->ss_n, ss_l );
		revcheckassign(XX_p->ss_n, us_l );
		revcheckassign(XX_p->ss_n, sc_l );
		revcheckassign(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_a, si_l );
		revcheckassign(XX_p->us_a, ui_l );
		revcheckassign(XX_p->us_a, ss_l );
		revcheckassign(XX_p->us_a, us_l );
		revcheckassign(XX_p->us_a, sc_l );
		revcheckassign(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_n, si_l );
		revcheckassign(XX_p->us_n, ui_l );
		revcheckassign(XX_p->us_n, ss_l );
		revcheckassign(XX_p->us_n, us_l );
		revcheckassign(XX_p->us_n, sc_l );
		revcheckassign(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->sc, si_l );
		revcheckassign(XX_p->sc, ui_l );
		revcheckassign(XX_p->sc, ss_l );
		revcheckassign(XX_p->sc, us_l );
		revcheckassign(XX_p->sc, sc_l );
		revcheckassign(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->uc, si_l );
		revcheckassign(XX_p->uc, ui_l );
		revcheckassign(XX_p->uc, ss_l );
		revcheckassign(XX_p->uc, us_l );
		revcheckassign(XX_p->uc, sc_l );
		revcheckassign(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  lstruct->local assignments */
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.si, si_l );
		revcheckassign(XX_l.si, ui_l );
		revcheckassign(XX_l.si, ss_l );
		revcheckassign(XX_l.si, us_l );
		revcheckassign(XX_l.si, sc_l );
		revcheckassign(XX_l.si, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.ui, si_l );
		revcheckassign(XX_l.ui, ui_l );
		revcheckassign(XX_l.ui, ss_l );
		revcheckassign(XX_l.ui, us_l );
		revcheckassign(XX_l.ui, sc_l );
		revcheckassign(XX_l.ui, uc_l );
		
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.ss_a, si_l );
		revcheckassign(XX_l.ss_a, ui_l );
		revcheckassign(XX_l.ss_a, ss_l );
		revcheckassign(XX_l.ss_a, us_l );
		revcheckassign(XX_l.ss_a, sc_l );
		revcheckassign(XX_l.ss_a, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.ss_n, si_l );
		revcheckassign(XX_l.ss_n, ui_l );
		revcheckassign(XX_l.ss_n, ss_l );
		revcheckassign(XX_l.ss_n, us_l );
		revcheckassign(XX_l.ss_n, sc_l );
		revcheckassign(XX_l.ss_n, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.us_a, si_l );
		revcheckassign(XX_l.us_a, ui_l );
		revcheckassign(XX_l.us_a, ss_l );
		revcheckassign(XX_l.us_a, us_l );
		revcheckassign(XX_l.us_a, sc_l );
		revcheckassign(XX_l.us_a, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.us_n, si_l );
		revcheckassign(XX_l.us_n, ui_l );
		revcheckassign(XX_l.us_n, ss_l );
		revcheckassign(XX_l.us_n, us_l );
		revcheckassign(XX_l.us_n, sc_l );
		revcheckassign(XX_l.us_n, uc_l );
	
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.sc, si_l );
		revcheckassign(XX_l.sc, ui_l );
		revcheckassign(XX_l.sc, ss_l );
		revcheckassign(XX_l.sc, us_l );
		revcheckassign(XX_l.sc, sc_l );
		revcheckassign(XX_l.sc, uc_l );
		
		setlocals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.uc, si_l );
		revcheckassign(XX_l.uc, ui_l );
		revcheckassign(XX_l.uc, ss_l );
		revcheckassign(XX_l.uc, us_l );
		revcheckassign(XX_l.uc, sc_l );
		revcheckassign(XX_l.uc, uc_l );
	/*}}}*/
	/*{{{  struct->global assignments */
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->si, si_g );
		revcheckassign(XX_p->si, ui_g );
		revcheckassign(XX_p->si, ss_g );
		revcheckassign(XX_p->si, us_g );
		revcheckassign(XX_p->si, sc_g );
		revcheckassign(XX_p->si, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ui, si_g );
		revcheckassign(XX_p->ui, ui_g );
		revcheckassign(XX_p->ui, ss_g );
		revcheckassign(XX_p->ui, us_g );
		revcheckassign(XX_p->ui, sc_g );
		revcheckassign(XX_p->ui, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_a, si_g );
		revcheckassign(XX_p->ss_a, ui_g );
		revcheckassign(XX_p->ss_a, ss_g );
		revcheckassign(XX_p->ss_a, us_g );
		revcheckassign(XX_p->ss_a, sc_g );
		revcheckassign(XX_p->ss_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->ss_n, si_g );
		revcheckassign(XX_p->ss_n, ui_g );
		revcheckassign(XX_p->ss_n, ss_g );
		revcheckassign(XX_p->ss_n, us_g );
		revcheckassign(XX_p->ss_n, sc_g );
		revcheckassign(XX_p->ss_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_a, si_g );
		revcheckassign(XX_p->us_a, ui_g );
		revcheckassign(XX_p->us_a, ss_g );
		revcheckassign(XX_p->us_a, us_g );
		revcheckassign(XX_p->us_a, sc_g );
		revcheckassign(XX_p->us_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->us_n, si_g );
		revcheckassign(XX_p->us_n, ui_g );
		revcheckassign(XX_p->us_n, ss_g );
		revcheckassign(XX_p->us_n, us_g );
		revcheckassign(XX_p->us_n, sc_g );
		revcheckassign(XX_p->us_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->sc, si_g );
		revcheckassign(XX_p->sc, ui_g );
		revcheckassign(XX_p->sc, ss_g );
		revcheckassign(XX_p->sc, us_g );
		revcheckassign(XX_p->sc, sc_g );
		revcheckassign(XX_p->sc, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckassign(XX_p->uc, si_g );
		revcheckassign(XX_p->uc, ui_g );
		revcheckassign(XX_p->uc, ss_g );
		revcheckassign(XX_p->uc, us_g );
		revcheckassign(XX_p->uc, sc_g );
		revcheckassign(XX_p->uc, uc_g );
	/*}}}*/
	/*{{{  lstruct->global assignments */
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.si, si_g );
		revcheckassign(XX_l.si, ui_g );
		revcheckassign(XX_l.si, ss_g );
		revcheckassign(XX_l.si, us_g );
		revcheckassign(XX_l.si, sc_g );
		revcheckassign(XX_l.si, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.ui, si_g );
		revcheckassign(XX_l.ui, ui_g );
		revcheckassign(XX_l.ui, ss_g );
		revcheckassign(XX_l.ui, us_g );
		revcheckassign(XX_l.ui, sc_g );
		revcheckassign(XX_l.ui, uc_g );
		
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.ss_a, si_g );
		revcheckassign(XX_l.ss_a, ui_g );
		revcheckassign(XX_l.ss_a, ss_g );
		revcheckassign(XX_l.ss_a, us_g );
		revcheckassign(XX_l.ss_a, sc_g );
		revcheckassign(XX_l.ss_a, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.ss_n, si_g );
		revcheckassign(XX_l.ss_n, ui_g );
		revcheckassign(XX_l.ss_n, ss_g );
		revcheckassign(XX_l.ss_n, us_g );
		revcheckassign(XX_l.ss_n, sc_g );
		revcheckassign(XX_l.ss_n, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.us_a, si_g );
		revcheckassign(XX_l.us_a, ui_g );
		revcheckassign(XX_l.us_a, ss_g );
		revcheckassign(XX_l.us_a, us_g );
		revcheckassign(XX_l.us_a, sc_g );
		revcheckassign(XX_l.us_a, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.us_n, si_g );
		revcheckassign(XX_l.us_n, ui_g );
		revcheckassign(XX_l.us_n, ss_g );
		revcheckassign(XX_l.us_n, us_g );
		revcheckassign(XX_l.us_n, sc_g );
		revcheckassign(XX_l.us_n, uc_g );
	
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.sc, si_g );
		revcheckassign(XX_l.sc, ui_g );
		revcheckassign(XX_l.sc, ss_g );
		revcheckassign(XX_l.sc, us_g );
		revcheckassign(XX_l.sc, sc_g );
		revcheckassign(XX_l.sc, uc_g );
		
		setglobals();
		setstruct(&XX_l);
		
		revcheckassign(XX_l.uc, si_g );
		revcheckassign(XX_l.uc, ui_g );
		revcheckassign(XX_l.uc, ss_g );
		revcheckassign(XX_l.uc, us_g );
		revcheckassign(XX_l.uc, sc_g );
		revcheckassign(XX_l.uc, uc_g );
	/*}}}*/

	/*{{{  local->struct displacements */
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->si, si_l );
		checkdisplace(XX_p->si, ui_l );
		checkdisplace(XX_p->si, ss_l );
		checkdisplace(XX_p->si, us_l );
		checkdisplace(XX_p->si, sc_l );
		checkdisplace(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ui, si_l );
		checkdisplace(XX_p->ui, ui_l );
		checkdisplace(XX_p->ui, ss_l );
		checkdisplace(XX_p->ui, us_l );
		checkdisplace(XX_p->ui, sc_l );
		checkdisplace(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_a, si_l );
		checkdisplace(XX_p->ss_a, ui_l );
		checkdisplace(XX_p->ss_a, ss_l );
		checkdisplace(XX_p->ss_a, us_l );
		checkdisplace(XX_p->ss_a, sc_l );
		checkdisplace(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_n, si_l );
		checkdisplace(XX_p->ss_n, ui_l );
		checkdisplace(XX_p->ss_n, ss_l );
		checkdisplace(XX_p->ss_n, us_l );
		checkdisplace(XX_p->ss_n, sc_l );
		checkdisplace(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_a, si_l );
		checkdisplace(XX_p->us_a, ui_l );
		checkdisplace(XX_p->us_a, ss_l );
		checkdisplace(XX_p->us_a, us_l );
		checkdisplace(XX_p->us_a, sc_l );
		checkdisplace(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_n, si_l );
		checkdisplace(XX_p->us_n, ui_l );
		checkdisplace(XX_p->us_n, ss_l );
		checkdisplace(XX_p->us_n, us_l );
		checkdisplace(XX_p->us_n, sc_l );
		checkdisplace(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->sc, si_l );
		checkdisplace(XX_p->sc, ui_l );
		checkdisplace(XX_p->sc, ss_l );
		checkdisplace(XX_p->sc, us_l );
		checkdisplace(XX_p->sc, sc_l );
		checkdisplace(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->uc, si_l );
		checkdisplace(XX_p->uc, ui_l );
		checkdisplace(XX_p->uc, ss_l );
		checkdisplace(XX_p->uc, us_l );
		checkdisplace(XX_p->uc, sc_l );
		checkdisplace(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  global->struct displacements */
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->si, si_g );
		checkdisplace(XX_p->si, ui_g );
		checkdisplace(XX_p->si, ss_g );
		checkdisplace(XX_p->si, us_g );
		checkdisplace(XX_p->si, sc_g );
		checkdisplace(XX_p->si, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ui, si_g );
		checkdisplace(XX_p->ui, ui_g );
		checkdisplace(XX_p->ui, ss_g );
		checkdisplace(XX_p->ui, us_g );
		checkdisplace(XX_p->ui, sc_g );
		checkdisplace(XX_p->ui, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_a, si_g );
		checkdisplace(XX_p->ss_a, ui_g );
		checkdisplace(XX_p->ss_a, ss_g );
		checkdisplace(XX_p->ss_a, us_g );
		checkdisplace(XX_p->ss_a, sc_g );
		checkdisplace(XX_p->ss_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_n, si_g );
		checkdisplace(XX_p->ss_n, ui_g );
		checkdisplace(XX_p->ss_n, ss_g );
		checkdisplace(XX_p->ss_n, us_g );
		checkdisplace(XX_p->ss_n, sc_g );
		checkdisplace(XX_p->ss_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_a, si_g );
		checkdisplace(XX_p->us_a, ui_g );
		checkdisplace(XX_p->us_a, ss_g );
		checkdisplace(XX_p->us_a, us_g );
		checkdisplace(XX_p->us_a, sc_g );
		checkdisplace(XX_p->us_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_n, si_g );
		checkdisplace(XX_p->us_n, ui_g );
		checkdisplace(XX_p->us_n, ss_g );
		checkdisplace(XX_p->us_n, us_g );
		checkdisplace(XX_p->us_n, sc_g );
		checkdisplace(XX_p->us_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->sc, si_g );
		checkdisplace(XX_p->sc, ui_g );
		checkdisplace(XX_p->sc, ss_g );
		checkdisplace(XX_p->sc, us_g );
		checkdisplace(XX_p->sc, sc_g );
		checkdisplace(XX_p->sc, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		checkdisplace(XX_p->uc, si_g );
		checkdisplace(XX_p->uc, ui_g );
		checkdisplace(XX_p->uc, ss_g );
		checkdisplace(XX_p->uc, us_g );
		checkdisplace(XX_p->uc, sc_g );
		checkdisplace(XX_p->uc, uc_g );
	/*}}}*/
	
	/*{{{  struct->local displacements */
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->si, si_l );
		revcheckdisplace(XX_p->si, ui_l );
		revcheckdisplace(XX_p->si, ss_l );
		revcheckdisplace(XX_p->si, us_l );
		revcheckdisplace(XX_p->si, sc_l );
		revcheckdisplace(XX_p->si, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ui, si_l );
		revcheckdisplace(XX_p->ui, ui_l );
		revcheckdisplace(XX_p->ui, ss_l );
		revcheckdisplace(XX_p->ui, us_l );
		revcheckdisplace(XX_p->ui, sc_l );
		revcheckdisplace(XX_p->ui, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_a, si_l );
		revcheckdisplace(XX_p->ss_a, ui_l );
		revcheckdisplace(XX_p->ss_a, ss_l );
		revcheckdisplace(XX_p->ss_a, us_l );
		revcheckdisplace(XX_p->ss_a, sc_l );
		revcheckdisplace(XX_p->ss_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_n, si_l );
		revcheckdisplace(XX_p->ss_n, ui_l );
		revcheckdisplace(XX_p->ss_n, ss_l );
		revcheckdisplace(XX_p->ss_n, us_l );
		revcheckdisplace(XX_p->ss_n, sc_l );
		revcheckdisplace(XX_p->ss_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_a, si_l );
		revcheckdisplace(XX_p->us_a, ui_l );
		revcheckdisplace(XX_p->us_a, ss_l );
		revcheckdisplace(XX_p->us_a, us_l );
		revcheckdisplace(XX_p->us_a, sc_l );
		revcheckdisplace(XX_p->us_a, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_n, si_l );
		revcheckdisplace(XX_p->us_n, ui_l );
		revcheckdisplace(XX_p->us_n, ss_l );
		revcheckdisplace(XX_p->us_n, us_l );
		revcheckdisplace(XX_p->us_n, sc_l );
		revcheckdisplace(XX_p->us_n, uc_l );
	
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->sc, si_l );
		revcheckdisplace(XX_p->sc, ui_l );
		revcheckdisplace(XX_p->sc, ss_l );
		revcheckdisplace(XX_p->sc, us_l );
		revcheckdisplace(XX_p->sc, sc_l );
		revcheckdisplace(XX_p->sc, uc_l );
		
		setlocals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->uc, si_l );
		revcheckdisplace(XX_p->uc, ui_l );
		revcheckdisplace(XX_p->uc, ss_l );
		revcheckdisplace(XX_p->uc, us_l );
		revcheckdisplace(XX_p->uc, sc_l );
		revcheckdisplace(XX_p->uc, uc_l );
	/*}}}*/
	/*{{{  struct->global displacements */
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->si, si_g );
		revcheckdisplace(XX_p->si, ui_g );
		revcheckdisplace(XX_p->si, ss_g );
		revcheckdisplace(XX_p->si, us_g );
		revcheckdisplace(XX_p->si, sc_g );
		revcheckdisplace(XX_p->si, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ui, si_g );
		revcheckdisplace(XX_p->ui, ui_g );
		revcheckdisplace(XX_p->ui, ss_g );
		revcheckdisplace(XX_p->ui, us_g );
		revcheckdisplace(XX_p->ui, sc_g );
		revcheckdisplace(XX_p->ui, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_a, si_g );
		revcheckdisplace(XX_p->ss_a, ui_g );
		revcheckdisplace(XX_p->ss_a, ss_g );
		revcheckdisplace(XX_p->ss_a, us_g );
		revcheckdisplace(XX_p->ss_a, sc_g );
		revcheckdisplace(XX_p->ss_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->ss_n, si_g );
		revcheckdisplace(XX_p->ss_n, ui_g );
		revcheckdisplace(XX_p->ss_n, ss_g );
		revcheckdisplace(XX_p->ss_n, us_g );
		revcheckdisplace(XX_p->ss_n, sc_g );
		revcheckdisplace(XX_p->ss_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_a, si_g );
		revcheckdisplace(XX_p->us_a, ui_g );
		revcheckdisplace(XX_p->us_a, ss_g );
		revcheckdisplace(XX_p->us_a, us_g );
		revcheckdisplace(XX_p->us_a, sc_g );
		revcheckdisplace(XX_p->us_a, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->us_n, si_g );
		revcheckdisplace(XX_p->us_n, ui_g );
		revcheckdisplace(XX_p->us_n, ss_g );
		revcheckdisplace(XX_p->us_n, us_g );
		revcheckdisplace(XX_p->us_n, sc_g );
		revcheckdisplace(XX_p->us_n, uc_g );
	
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->sc, si_g );
		revcheckdisplace(XX_p->sc, ui_g );
		revcheckdisplace(XX_p->sc, ss_g );
		revcheckdisplace(XX_p->sc, us_g );
		revcheckdisplace(XX_p->sc, sc_g );
		revcheckdisplace(XX_p->sc, uc_g );
		
		setglobals();
		setstruct(XX_p);
		
		revcheckdisplace(XX_p->uc, si_g );
		revcheckdisplace(XX_p->uc, ui_g );
		revcheckdisplace(XX_p->uc, ss_g );
		revcheckdisplace(XX_p->uc, us_g );
		revcheckdisplace(XX_p->uc, sc_g );
		revcheckdisplace(XX_p->uc, uc_g );
	/*}}}*/

	/*{{{  struct->struct assignments */
		setstruct(XX_p);
		
		checkassign(XX_p->si, XX_p->si );
		checkassign(XX_p->si, XX_p->ui );
		checkassign(XX_p->si, XX_p->ss_a );
		checkassign(XX_p->si, XX_p->ss_n );
		checkassign(XX_p->si, XX_p->us_a );
		checkassign(XX_p->si, XX_p->us_n );
		checkassign(XX_p->si, XX_p->sc );
		checkassign(XX_p->si, XX_p->uc );
	
		setstruct(XX_p);
		
		checkassign(XX_p->ui, XX_p->si );
		checkassign(XX_p->ui, XX_p->ui );
		checkassign(XX_p->ui, XX_p->ss_a );
		checkassign(XX_p->ui, XX_p->ss_n );
		checkassign(XX_p->ui, XX_p->us_a );
		checkassign(XX_p->ui, XX_p->us_n );
		checkassign(XX_p->ui, XX_p->sc );
		checkassign(XX_p->ui, XX_p->uc );
		
		setstruct(XX_p);
		
		checkassign(XX_p->ss_a, XX_p->si );
		checkassign(XX_p->ss_a, XX_p->ui );
		checkassign(XX_p->ss_a, XX_p->ss_a );
		checkassign(XX_p->ss_a, XX_p->ss_n );
		checkassign(XX_p->ss_a, XX_p->us_a );
		checkassign(XX_p->ss_a, XX_p->us_n );
		checkassign(XX_p->ss_a, XX_p->sc );
		checkassign(XX_p->ss_a, XX_p->uc );
	
		setstruct(XX_p);
		
		checkassign(XX_p->ss_n, XX_p->si );
		checkassign(XX_p->ss_n, XX_p->ui );
		checkassign(XX_p->ss_n, XX_p->ss_a );
		checkassign(XX_p->ss_n, XX_p->ss_n );
		checkassign(XX_p->ss_n, XX_p->us_a );
		checkassign(XX_p->ss_n, XX_p->us_n );
		checkassign(XX_p->ss_n, XX_p->sc );
		checkassign(XX_p->ss_n, XX_p->uc );
	
		setstruct(XX_p);
		
		checkassign(XX_p->us_a, XX_p->si );
		checkassign(XX_p->us_a, XX_p->ui );
		checkassign(XX_p->us_a, XX_p->ss_a );
		checkassign(XX_p->us_a, XX_p->ss_n );
		checkassign(XX_p->us_a, XX_p->us_a );
		checkassign(XX_p->us_a, XX_p->us_n );
		checkassign(XX_p->us_a, XX_p->sc );
		checkassign(XX_p->us_a, XX_p->uc );
	
		setstruct(XX_p);
		
		checkassign(XX_p->us_n, XX_p->si );
		checkassign(XX_p->us_n, XX_p->ui );
		checkassign(XX_p->us_n, XX_p->ss_a );
		checkassign(XX_p->us_n, XX_p->ss_n );
		checkassign(XX_p->us_n, XX_p->us_a );
		checkassign(XX_p->us_n, XX_p->us_n );
		checkassign(XX_p->us_n, XX_p->sc );
		checkassign(XX_p->us_n, XX_p->uc );
	
		setstruct(XX_p);
		
		checkassign(XX_p->sc, XX_p->si );
		checkassign(XX_p->sc, XX_p->ui );
		checkassign(XX_p->sc, XX_p->ss_a );
		checkassign(XX_p->sc, XX_p->ss_n );
		checkassign(XX_p->sc, XX_p->us_a );
		checkassign(XX_p->sc, XX_p->us_n );
		checkassign(XX_p->sc, XX_p->sc );
		checkassign(XX_p->sc, XX_p->uc );
		
		setstruct(XX_p);
		
		checkassign(XX_p->uc, XX_p->si );
		checkassign(XX_p->uc, XX_p->ui );
		checkassign(XX_p->uc, XX_p->ss_a );
		checkassign(XX_p->uc, XX_p->ss_n );
		checkassign(XX_p->uc, XX_p->us_a );
		checkassign(XX_p->uc, XX_p->us_n );
		checkassign(XX_p->uc, XX_p->sc );
		checkassign(XX_p->uc, XX_p->uc );
	
	/*}}}*/
	/*{{{  struct->struct displacements */
		setstruct(XX_p);
		
		checkdisplace(XX_p->si, XX_p->si );
		checkdisplace(XX_p->si, XX_p->ui );
		checkdisplace(XX_p->si, XX_p->ss_a );
		checkdisplace(XX_p->si, XX_p->ss_n );
		checkdisplace(XX_p->si, XX_p->us_a );
		checkdisplace(XX_p->si, XX_p->us_n );
		checkdisplace(XX_p->si, XX_p->sc );
		checkdisplace(XX_p->si, XX_p->uc );
	
		setstruct(XX_p);
		
		checkdisplace(XX_p->ui, XX_p->si );
		checkdisplace(XX_p->ui, XX_p->ui );
		checkdisplace(XX_p->ui, XX_p->ss_a );
		checkdisplace(XX_p->ui, XX_p->ss_n );
		checkdisplace(XX_p->ui, XX_p->us_a );
		checkdisplace(XX_p->ui, XX_p->us_n );
		checkdisplace(XX_p->ui, XX_p->sc );
		checkdisplace(XX_p->ui, XX_p->uc );
		
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_a, XX_p->si );
		checkdisplace(XX_p->ss_a, XX_p->ui );
		checkdisplace(XX_p->ss_a, XX_p->ss_a );
		checkdisplace(XX_p->ss_a, XX_p->ss_n );
		checkdisplace(XX_p->ss_a, XX_p->us_a );
		checkdisplace(XX_p->ss_a, XX_p->us_n );
		checkdisplace(XX_p->ss_a, XX_p->sc );
		checkdisplace(XX_p->ss_a, XX_p->uc );
	
		setstruct(XX_p);
		
		checkdisplace(XX_p->ss_n, XX_p->si );
		checkdisplace(XX_p->ss_n, XX_p->ui );
		checkdisplace(XX_p->ss_n, XX_p->ss_a );
		checkdisplace(XX_p->ss_n, XX_p->ss_n );
		checkdisplace(XX_p->ss_n, XX_p->us_a );
		checkdisplace(XX_p->ss_n, XX_p->us_n );
		checkdisplace(XX_p->ss_n, XX_p->sc );
		checkdisplace(XX_p->ss_n, XX_p->uc );
	
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_a, XX_p->si );
		checkdisplace(XX_p->us_a, XX_p->ui );
		checkdisplace(XX_p->us_a, XX_p->ss_a );
		checkdisplace(XX_p->us_a, XX_p->ss_n );
		checkdisplace(XX_p->us_a, XX_p->us_a );
		checkdisplace(XX_p->us_a, XX_p->us_n );
		checkdisplace(XX_p->us_a, XX_p->sc );
		checkdisplace(XX_p->us_a, XX_p->uc );
	
		setstruct(XX_p);
		
		checkdisplace(XX_p->us_n, XX_p->si );
		checkdisplace(XX_p->us_n, XX_p->ui );
		checkdisplace(XX_p->us_n, XX_p->ss_a );
		checkdisplace(XX_p->us_n, XX_p->ss_n );
		checkdisplace(XX_p->us_n, XX_p->us_a );
		checkdisplace(XX_p->us_n, XX_p->us_n );
		checkdisplace(XX_p->us_n, XX_p->sc );
		checkdisplace(XX_p->us_n, XX_p->uc );
	
		setstruct(XX_p);
		
		checkdisplace(XX_p->sc, XX_p->si );
		checkdisplace(XX_p->sc, XX_p->ui );
		checkdisplace(XX_p->sc, XX_p->ss_a );
		checkdisplace(XX_p->sc, XX_p->ss_n );
		checkdisplace(XX_p->sc, XX_p->us_a );
		checkdisplace(XX_p->sc, XX_p->us_n );
		checkdisplace(XX_p->sc, XX_p->sc );
		checkdisplace(XX_p->sc, XX_p->uc );
		
		setstruct(XX_p);
		
		checkdisplace(XX_p->uc, XX_p->si );
		checkdisplace(XX_p->uc, XX_p->ui );
		checkdisplace(XX_p->uc, XX_p->ss_a );
		checkdisplace(XX_p->uc, XX_p->ss_n );
		checkdisplace(XX_p->uc, XX_p->us_a );
		checkdisplace(XX_p->uc, XX_p->us_n );
		checkdisplace(XX_p->uc, XX_p->sc );
		checkdisplace(XX_p->uc, XX_p->uc );
	
	/*}}}*/
#endif
}

void test3()
{
#if TEST3
	deflocals();

	/*{{{  local=local=local assignments */
		setlocals();
	
		permop(si_l, ui_l, ss_l, = );
		setlocals();
		permop(si_l, ui_l, us_l, = );
		setlocals();
		permop(si_l, ui_l, sc_l, = );
		setlocals();
		permop(si_l, ui_l, uc_l, = );
		setlocals();
		permop(si_l, ss_l, us_l, = );
		setlocals();
		permop(si_l, ss_l, sc_l, = );
		setlocals();
		permop(si_l, ss_l, uc_l, = );
		setlocals();
		permop(si_l, us_l, sc_l, = );
		setlocals();
		permop(si_l, us_l, uc_l, = );
		setlocals();
		permop(si_l, sc_l, uc_l, = );
	
		setlocals();
		permop(ui_l, ss_l, us_l, = );
		setlocals();
		permop(ui_l, ss_l, sc_l, = );
		setlocals();
		permop(ui_l, ss_l, uc_l, = );
		setlocals();
		permop(ui_l, us_l, sc_l, = );
		setlocals();
		permop(ui_l, us_l, uc_l, = );	
		setlocals();
		permop(ui_l, sc_l, uc_l, = );
	
		setlocals();
		permop(ss_l, us_l, sc_l, = );
		setlocals();
		permop(ss_l, us_l, uc_l, = );
		setlocals();
		permop(ss_l, sc_l, uc_l, = );
	
		setlocals();
		permop(us_l, sc_l, uc_l, = );
		
	/*}}}*/
	/*{{{  local=local+local assignments */
		setlocals();
	
		permop(si_l, ui_l, ss_l, + );
		setlocals();
		permop(si_l, ui_l, us_l, + );
		setlocals();
		permop(si_l, ui_l, sc_l, + );
		setlocals();
		permop(si_l, ui_l, uc_l, + );
		setlocals();
		permop(si_l, ss_l, us_l, + );
		setlocals();
		permop(si_l, ss_l, sc_l, + );
		setlocals();
		permop(si_l, ss_l, uc_l, + );
		setlocals();
		permop(si_l, us_l, sc_l, + );
		setlocals();
		permop(si_l, us_l, uc_l, + );
		setlocals();
		permop(si_l, sc_l, uc_l, + );
	
		setlocals();
		permop(ui_l, ss_l, us_l, + );
		setlocals();
		permop(ui_l, ss_l, sc_l, + );
		setlocals();
		permop(ui_l, ss_l, uc_l, + );
		setlocals();
		permop(ui_l, us_l, sc_l, + );
		setlocals();
		permop(ui_l, us_l, uc_l, + );	
		setlocals();
		permop(ui_l, sc_l, uc_l, + );
	
		setlocals();
		permop(ss_l, us_l, sc_l, + );
		setlocals();
		permop(ss_l, us_l, uc_l, + );
		setlocals();
		permop(ss_l, sc_l, uc_l, + );
	
		setlocals();
		permop(us_l, sc_l, uc_l, + );
		
	/*}}}*/

	/*{{{  global=global=global assignments */
		setglobals();
	
		permop(si_g, ui_g, ss_g, = );
		setglobals();
		permop(si_g, ui_g, us_g, = );
		setglobals();
		permop(si_g, ui_g, sc_g, = );
		setglobals();
		permop(si_g, ui_g, uc_g, = );
		setglobals();
		permop(si_g, ss_g, us_g, = );
		setglobals();
		permop(si_g, ss_g, sc_g, = );
		setglobals();
		permop(si_g, ss_g, uc_g, = );
		setglobals();
		permop(si_g, us_g, sc_g, = );
		setglobals();
		permop(si_g, us_g, uc_g, = );
		setglobals();
		permop(si_g, sc_g, uc_g, = );
	
		setglobals();
		permop(ui_g, ss_g, us_g, = );
		setglobals();
		permop(ui_g, ss_g, sc_g, = );
		setglobals();
		permop(ui_g, ss_g, uc_g, = );
		setglobals();
		permop(ui_g, us_g, sc_g, = );
		setglobals();
		permop(ui_g, us_g, uc_g, = );	
		setglobals();
		permop(ui_g, sc_g, uc_g, = );
	
		setglobals();
		permop(ss_g, us_g, sc_g, = );
		setglobals();
		permop(ss_g, us_g, uc_g, = );
		setglobals();
		permop(ss_g, sc_g, uc_g, = );
	
		setglobals();
		permop(us_g, sc_g, uc_g, = );
		
	/*}}}*/
	/*{{{  global=global+global assignments */
		setglobals();
	
		permop(si_g, ui_g, ss_g, + );
		setglobals();
		permop(si_g, ui_g, us_g, + );
		setglobals();
		permop(si_g, ui_g, sc_g, + );
		setglobals();
		permop(si_g, ui_g, uc_g, + );
		setglobals();
		permop(si_g, ss_g, us_g, + );
		setglobals();
		permop(si_g, ss_g, sc_g, + );
		setglobals();
		permop(si_g, ss_g, uc_g, + );
		setglobals();
		permop(si_g, us_g, sc_g, + );
		setglobals();
		permop(si_g, us_g, uc_g, + );
		setglobals();
		permop(si_g, sc_g, uc_g, + );
	
		setglobals();
		permop(ui_g, ss_g, us_g, + );
		setglobals();
		permop(ui_g, ss_g, sc_g, + );
		setglobals();
		permop(ui_g, ss_g, uc_g, + );
		setglobals();
		permop(ui_g, us_g, sc_g, + );
		setglobals();
		permop(ui_g, us_g, uc_g, + );	
		setglobals();
		permop(ui_g, sc_g, uc_g, + );
	
		setglobals();
		permop(ss_g, us_g, sc_g, + );
		setglobals();
		permop(ss_g, us_g, uc_g, + );
		setglobals();
		permop(ss_g, sc_g, uc_g, + );
	
		setglobals();
		permop(us_g, sc_g, uc_g, + );
		
	/*}}}*/

	/*{{{  struct=struct=struct assignments */
	
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ui, XX_p->ss_a, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ui, XX_p->ss_n, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ui, XX_p->us_a, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ui, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ui, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ui, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_a, XX_p->ss_n, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_a, XX_p->us_a, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_a, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_a, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_a, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_n, XX_p->us_a, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_n, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->ss_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->us_a, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->us_a, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->us_a, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->us_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->us_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->si, XX_p->sc, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_a, XX_p->ss_n, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_a, XX_p->us_a, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_a, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_a, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_a, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_n, XX_p->us_a, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_n, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->ss_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->us_a, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->us_a, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->us_a, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->us_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->us_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ui, XX_p->sc, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->ss_n, XX_p->us_a, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->ss_n, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->ss_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->ss_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->us_a, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->us_a, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->us_a, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->us_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->us_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ss_a, XX_p->sc, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ss_n, XX_p->us_a, XX_p->us_n, = );
		setstruct(XX_p);
		permop(XX_p->ss_n, XX_p->us_a, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ss_n, XX_p->us_a, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ss_n, XX_p->us_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->ss_n, XX_p->us_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->ss_n, XX_p->sc, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->us_a, XX_p->us_n, XX_p->sc, = );
		setstruct(XX_p);
		permop(XX_p->us_a, XX_p->us_n, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->us_a, XX_p->sc, XX_p->uc, = );
		setstruct(XX_p);
		permop(XX_p->us_n, XX_p->sc, XX_p->uc, = );
	
	
	/*}}}*/
#endif
}

void test4()
{
#if TEST4
	deflocals();
	
	/*{{{  local expressions */
	#if 1
	
		setlocals();
		permexpr( si_l, ui_l, ss_l, us_l );
		setlocals();
		permexpr( si_l, ui_l, ss_l, sc_l );
		setlocals();
		permexpr( si_l, ui_l, ss_l, uc_l );
		setlocals();
		permexpr( si_l, ui_l, us_l, sc_l );
		setlocals();
		permexpr( si_l, ui_l, us_l, uc_l );
		setlocals();
		permexpr( si_l, ui_l, sc_l, uc_l );
		setlocals();
		permexpr( si_l, ss_l, us_l, sc_l );
		setlocals();
		permexpr( si_l, ss_l, us_l, uc_l );
		setlocals();
		permexpr( si_l, ss_l, sc_l, uc_l );
		setlocals();
		permexpr( si_l, us_l, sc_l, uc_l );
		setlocals();
		permexpr( ui_l, ss_l, us_l, sc_l );
		setlocals();
		permexpr( ui_l, ss_l, us_l, uc_l );
		setlocals();
		permexpr( ui_l, ss_l, sc_l, uc_l );
		setlocals();
		permexpr( ui_l, us_l, sc_l, uc_l );
		setlocals();
		permexpr( ss_l, us_l, sc_l, uc_l );
	
	
	#endif
	/*}}}*/
	/*{{{  global expressions */
	#if 1
	
		setglobals();
		permexpr( si_g, ui_g, ss_g, us_g );
		setglobals();
		permexpr( si_g, ui_g, ss_g, sc_g );
		setglobals();
		permexpr( si_g, ui_g, ss_g, uc_g );
		setglobals();
		permexpr( si_g, ui_g, us_g, sc_g );
		setglobals();
		permexpr( si_g, ui_g, us_g, uc_g );
		setglobals();
		permexpr( si_g, ui_g, sc_g, uc_g );
		setglobals();
		permexpr( si_g, ss_g, us_g, sc_g );
		setglobals();
		permexpr( si_g, ss_g, us_g, uc_g );
		setglobals();
		permexpr( si_g, ss_g, sc_g, uc_g );
		setglobals();
		permexpr( si_g, us_g, sc_g, uc_g );
		setglobals();
		permexpr( ui_g, ss_g, us_g, sc_g );
		setglobals();
		permexpr( ui_g, ss_g, us_g, uc_g );
		setglobals();
		permexpr( ui_g, ss_g, sc_g, uc_g );
		setglobals();
		permexpr( ui_g, us_g, sc_g, uc_g );
		setglobals();
		permexpr( ss_g, us_g, sc_g, uc_g );
	
	
	#endif
	/*}}}*/

#endif
}

int main()
{
	test1();
	test2();
	test3();
	test4();
}
@


1.1.1.1
log
@Initial Import of Norcroft C compiler for Transputer.
@
text
@@
