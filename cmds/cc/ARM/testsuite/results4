Helios/ARM SMT C Compiler test results
PAB July 9th 1990

Hi Arthur,

Here are the latest observations on the Helios/ARM SMT C compiler.


Following bug numbers refer to previous bug lists.


C5	(Enable switch for short offset mode and generate long offsets as std)
	What is the switch to enable short offset mode (long should be the
	default)? What are the new patches you require support for in the
	linker? What are their actual numbers?

	The patches to access the static data area have not changed
	from their short offset versions:
				MVN     a1,#&00000000      /* val to assign */
		PATCHARMDT	LDR     a2,[dp,#0]         DATAMODULE _variable
		PATCHARMDPLSB	ADD     a2,a2,#&00000000   DATASYMB _variable
		PATCHARMDPREST	ADD     a2,a2,#&00000000   DATASYMB _variable
				STR     a1,[a2,#0]	   /* assign it */

	Please inform me of what patches you require adding to the linker to
	support long offsets within the static data area. Please forget the
	old 4k limit problem, the limit is now more like 64k, due to use of
	two dp instruction patches - PATCHARMDPLSB & PATCHARMDPREST.

	To extend this limit (which is really what we are after), we could
	for example use three dp patches e.g.:
				MVN     a1,#&00000000      /* val to assign */
		PATCHARMDT	LDR     a2,[dp,#0]         DATAMODULE _variable
		PATCHARMDPLSB	ADD     a2,a2,#&00000000   DATASYMB _variable
	**>	PATCHARMDPMID	ADD     a2,a2,#&00000000   DATASYMB _variable
		PATCHARMDPREST	ADD     a2,a2,#&00000000   DATASYMB _variable
				STR     a1,[a2,#0]	   /* assign it */

	The new PATCHARMDPMID patch would add another eight bits of
	addressablity, making a total of 24 bits + any possible rotates
	to extend this range. This will give us a minium addressing of
	16 megabytes and should be sufficient. If you decide this is OK
	please use a patch number of 0x1A for PATCHARMDPMID.

	I would suggest a option flag of -Zt (for "tiny" memory model) to
	support the original more efficient addressing scheme. The new
	scheme should be the default.


C6	The inserted version number is still 346. - doesn't seem to change.


SMT1	(Module header incorrectly constructed for SMT) The module header
	is still wrong, but in a new new fashion. The correct SMT module header
	is:

		typedef struct Module {
				       word Type ;
				       word Size ;
				       char Name[32] ;
				       word Id ;
				       word Version ;
				       word MaxData ;
				       RPTR Init ;
				       word MaxCodeP ;
				      } Module ;

	In your output the MaxCodeP word is still in the wrong position.
	It should be inserted at the end of the module header after Init, rather
	than before the Init.


SMT4	(Optimise initialisation code) Not done.


SMT6	When placing the address of an external function into a function
	pointer, you still use the address of a stub to that function
	rather than the true address from the external modules code ptr
	table.


SMT99	The string passed in CODETABLE directives is prefixed with a
	spurious control character '^D'. e.g.:

		PC = 0x00E8 CODETABLE ^D_external
		PC = 0x00E8 CODETABLE ^D_main

	Please remove this character.


Cheers
Paul.
