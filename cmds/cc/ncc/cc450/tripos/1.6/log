
Compiler update log.
--------------------

*******************************************************************************
*******************************************************************************
               This is version 1.60 to be handed to Acorn.
*******************************************************************************
*******************************************************************************

Jan 88  AM: debugging .g directories are now dead and should be deleted.
        clipobj.c, xpuobj.c, amdobj.c replaced by aoutobj.c
          (hence change to main.c).
        Rework of simplify.c optimising of *(cast)(cast)&<expr> fixes
          LDS's extern int a[]; f() { return *a; } spurious whinge.
        Fixes to armdbg.c to correct Sarah Woodall's bombing out if
          only certain subsets to debugging enabled.
        Fixes to preprocessor not to rely on UNIX iscntrl(EOF)=true
          since ANSI disagree and to remove whole tokens (ACN bug in
            #if 0;     #define a "/*")
        cg.c: new version of nastiness() expression complexity estimator to
          improve appauling code for NMM's polynomial (this affects the
          ordering of subexpressions evaluation to reduce spilling).
        Use of cc_msg instead of many fprintf(stderr,...).
        Some little more tidying of error and syserr() messages.
        Several changes to support compiler target char-code cross
          compilation (TARGET_HAS_EBCDIC is prototypical).  Intention
          is to continue to support both ASCII and EBCDIC versions on ibm/370.
        Fix to armstart.s to correct _osgbpb getting wrong 5th arg.

Jan 88  ACN: incorporate batch of useful changes from AM, e.g. to
        bring debugger up to full Acorn requirements.
        Further work on listing option, move text of error
        messages into a header file "errors.h" so that (a) documenting
        all errors and (b) changing languages should be easier.
        delete jopenum.h

Dec 87  ACN: alloc.
        realloc() incorrectly did a free() in the case that it was
        unable to extend the size of the store-block being used.
        (AM: this seems to be post Oct 86 ANSI legislation)
        lex: update_hash() lookas as if it needs an unsigned in it
        so that arithmetic right shifts do not upset it from the
        behaviour I had planned for it.

Dec 87  ACN: misc, cchdr, pp, driver, cg, flowgraf,
             headers, hostsys.h, printf.c
        support -list option which sends listing of xxx.c to xxx.l,
        improve listing & profile options. implement _vsprintf.
        peephole out consecutive counts.

Dec 87  AM: Most files.  Some reorganisation of ACN's listing option and
          fixes to debugger incompatibilities following TopExpress discussion.
        New option
            -fe           check ANSI 6 char monocase extern clash.
*** Documentation:  -fijue need putting in cdoc.
        Debugger changes:  Fix buggy table entry for DEB_ARRAY[5].
        Introduce J_INFOBODY for first post-entry command.
        Put (non-full)profile_option count there too as now
          requires a FileLine.  TAILCALL optimisation supressed if DBG_LINE
          (though not for DBG_PROC as that preserves code).
          nullgen.c nullspec.h introduce TARGET_IS_NULL (Lint utility).
        TARGET_HAS_REGISTER_WINDOWS allows separate registers for formals
          (R_P1) and actuals (R_A1) and similarly two view on fn return reg.
        Change some 4's to alignof_int and alignof_struct for Acorn.
        Change !iscntrl to isprint in PP to track ANSI/unix difference.
        Rework to ACN listing stuff:  Move lit_of_name_count to codebuf.c
          to avoid xxxgen interface change.  Consolidate all profile stuff
          into pp.c so that AM can understand it better and reduce spurious
          intermodule (pp/misc) communication.  Both profile and listing
          feature are removeable by #define NO_LISTING_OUTPUT whose
          #ifdef's form machine checkable documentation.
*** Library bugs: there are known to be places where the library no longer
        matches the spec (e.g. iscntrl/realloc) and there would have been
        one in strcoll had we ever remembered to put the Oct 86 one in!!!
        Given that at least the iscntrl fix will require re-compilation of
        many programs using <ctype.h> (magic numbers get built in during
        macro expansion) I propose to wait until the second ANSI public review
        draft due in February or so whcih requires more extensive changes.
                
Dec 87  ACN: system.h, driver.c
        Support in-store header files when COMPILING_ON_HIGH_C.
        amdgen, amdasm, amdobj, amdspec, amdops: sketches to investigate
        the architecture.
        armgen.c, builtin.c, armstart.s, cg.c, armsys.c, cchdr.h, hostsys.h
        driver.c:
        New arrangement for profile option -K, whereby the counts are
        provided with an extra information word that records the position in
        the source file associated with the count. The new library
        function extern void _write_profile(char *filename) arranges
        to dump count information to the file named as its arg,
        and _mapstore() has been downgraded so it just displays
        the addresses of function entrypoints in the code. The
        option -qm now dumps compiler profile information to a file
        $.tmp.cprofile (This is clearly horribly ARM specific).
        driver.c:
        Start at code to read in profile information at a start of compilation
        and use it to annotate a source listing with execution counts.
        New command-line options
            -l <file>      send a source listing there,
            -f u           source listing unexpanded (i.e. before
                           preprocessor macroprocessing)
            -f i           source listing includes "" included files
            -f j           source listing includes <> included files
            -m <file>      read _write_profile() data from given file &
                           include with source listing
        Thus "cc <source> -l <dest>" will preprocess the given file.
        It will also compile it, so I guess we will want an option to
        stop that. The command
           cc <source> -l <dest> -m $.tmp.cprofile -f u
        will be what is usually wanted to put execution statistics back
        with source code.

*******************************************************************************
*******************************************************************************
               This is version 1.57 to be handed to Acorn.
*******************************************************************************
*******************************************************************************

Nov 87  AM: Improve 'implicit narrowing cast' warning by including floating
        types.  Re-allocate JOP bit patterns and introduce J_DEADBITS.
        Warning: all non-using xxxgen.c must mask off in show_instruction().
        Change TARGET_HAS_HALFWORD_STORE to TARGET_LACKS_HALFWORD_STORE,
        improving arm compiler (but not code).
        Remove support for FPE1 on ARM entirely.
        Change TARGET_HAS_SCALED_ADDRESSING so that a macro
          target_scalable(n,m) must be defined (e.g. for 32016/vax).
        New TARGET_HAS_SCALED_OPS defined for ARM for r1 = r2 ^ r3<<8 etc.
        Remove old really_uses_rx() in favour of uses_rx().
        Fix bug in 370 frexp(-ve operand).  Tidy frexp code, and add
        370 unnormalised support.  Code and datasegment *internal*
        symbols are now x$codeseg/x$dataseg instead of v$ (or __ by
        conditional compilation choice).
        Fix TopExpress bugs 4 and 6 for armdbg.c, discuss rest.
        cc -link on the ARM now echoes the CLI link command to terminal.
        
21-10-87 AM: re-organise CLIB to CL and CLIB.  Consequent changes
         to system building command files (after ARM build must now rename
         both cc.p.ccarm to $.library.cc and cl.o.ansilib to clib.o.ansilib).
         Rename startup.s as armstart.s, renaming x$writecheck# as _wr#chk.
         Ditto x$readcheck#. This moves towards ANSI 6 char (A-Z0-9_) limits.
         Change code for unsigned fix simulation so that consistent
         with 2ADDRESS code.  (This will affect arm code).

25-9-87 AM: drop support for undocumented #include <stdio> (without .h)
        Remove -O completely (undocumented in Acorn's user guide
        and only gave an 'ignored' warning).  Fix TopExpress reported
        bug failing to globalise in (toplevel) struct { enum { a } b;} c;.
        Mods following WGD suggestions for 32016-like architecture.
        Further rework return code, after ACN fix (acorn 1.51).
        
7 Sep   AM: remove many explicit casts in the list_n macros.  Fix bug
        whereby (int *) == (void *) was faulted.

3 Sep   AM: syn/sem: improve typechecking on switch/case a) to aid 16
        bit implementations and b) to spot previously unfaulted
          "case (char *)16:"
        Introduce check to warn on implicit narrowing casts.

26 Aug  <most files>
        AM: rationalise and mainly extend the good work of 22 Aug:
        Dependencies of Binder.bindaddr and LabelNumber.frefs that
        addresses be positive removed.  pack_into_topbits() still
        nasty and present.  Use it so that 370 version works on PC.
        More work on adding debugger - armdbg,armobj writes a C$$debug area.
        Debugger code only enabled with #define EXPERIMENTAL_DEBUGGER.
        New options:  -fo warn at old-style non-prototype functions,
        -fp warn whenever an pointer is explicitly cast to non-pointer,
        -wn supress warning on 3L+(30000+30000) etc (not implemented yet),
        -qq internal debugger debugging.

21,22 Aug <all files>
        introduce new typedefs int32, long32, bool and express code in terms
        of them. Use printf("%ld", (long)x) for all calls to printf and
        allies. Further adjustments in the process of installing the system
        on an MSDOS system. Truncate the filename flowgraph to flowgraf to
        fit with 8-character filename restrictions.

21 Aug  armgen.c
        correction to code that reloads FP registers at end of a procedure.
        It had been fairly comprehensively wrong!
        Experiment with s.send, c.objects and h.objects in clib as a start
        at support for message passing (based on the Objective C stuff,
        which seems a bit odd but fairly easy to reconstruct).

13 Aug  (AM) flowgraph.c: fix bug in flowgraph.c which incorrectly allowed
        tail recursion when a function variable could have been setjmp.
        Note: outstanding syserr() for the form f() { return g().a.b;}.

7 Aug   armsys.c, cg.c
        correct (unimportant?) typo of 10 for 1 in osbyte(0, 1) for testing
        machine type.
        cg: resultis must test for null arg in case it had been an error
        node.

Code to Acorn as 1.50

6 Aug   (AM) armgen.c cg.c lex.c builtin.c misc.c synprint.c system.h:
        Arrange that non-ARM2 systems generate ARM-1 in
        their banner.  ARM2 systems just print ARM as others really obsolete.
        Treat ANSI draft of Oct 86 as still definitive until
        new version in Nov 87/Jan-88, in particular
        default to not tail-optimise functions involving
        non-direct calls.  Observe that tail recursion removal for J_CALLR
        itself still would syserr() on the arm (see J_TAILCALLR in armgen.c).
        Rationalise ACN's LDRVK code in cg via is_local_address(), which
        is also used to improve structure argument loading.  Add LDRVWK
        for orthogonality.  Fix bug in { char a[4], b[4000]; return a[4000];}
        Syntax tree for valof changed to be useful for BCPL, simplifies
        cg.c et al.  Make several of ACN's global variables be static.
        (cg) improve s_displace treatment, both in '*' and non-'*' context.
        Tidy armgen peepholing with no functional change.
        driver.c: change -msdos link file to be *.axe as requested by Acorn.
        flowgraph.c: fix a long standing bug corrupting IP if more than
        1000 bytes of arguments (4000 if ints!).


2 Aug   cg, driver, flowgraph, jopcode, jopprint
        Further work re LDRVK and friends to make access to fields
        within stack-allocated structures behave better. Fixup of
        filenames in linking under MSDOS option. Remove the archaic
        INCLUDE_WHOLE_LIBRARY option for linking. (these last two
        suggested by AM over the phone). Allow tail-call optimisation
        to proceed even in presence of CALLR in view of AM's report
        on ANSI directions re permitted use of setjmp(). Add comment
        to explain by giving example code what could otherwise go wrong!

1 Aug   jopcode, jopprint, flowgraph, regalloc, cchdr.
        Introduce J_LDRVK for the operation r1 := !(&variable + offset)
        with variable in the r3/m field and the offset (an integer) in
        the r2 field (sorry about that). Ditto for stores, and for float
        and double. This will eventually improve on loads and stores
        related to stack-allocated structures. Macroexpand them into
        relevant LDRK/STRK instructions.

1 Aug
        driver
        arrange (with a remarkable amount of pain) that either -s<file>
        or -s <file> (note whitespace) is valid, and similarly for all other
        flags taking an argument. Disable -s and -g without an arg defaulting
        to file with useful extension (at request of Lee Smith). The
        number of places I test for the names of flags that need args
        really upsets me & the code needs reworking to improve its
        long-term robustness.

1 Aug
        armsys.c
        change way of deciding how to read clock from osbyte(0x81, 0, 255)
        to osbyte(0, 1), and exploit osword(14,3) on Arthur. NB further
        adjustment may be needed to support Master-ET host with AES,
        Springboard and other possibilities.

1 Aug
        builtin, armobj, startup, driver
        undo hacks re unique dataseg names & position of entry address
        since Acorn linker now better behaved.
        Check for IO error in a better way - Note that rewind() clears
        the error flags on a stream. Also need to do fflush() before
        fclose() or check the result of the fclose().
        Reminder: the unique names problem used to show up only when
        linking to give AOF output for use with M2RUN or equivalent,
        and I have not checked that again.

28 July lex, syn, misc, sem, cg, synprint
        continuation of work on valof blocks.

27 July syn
        start (again) at support for 'valof block' extension to the syntax.

27 July driver
        missing line of code meant that if -test was specified all other(?)
        command line options were ignored. Fixed.
        Agreement in outline with S. Bratt re terms for putting in
        debugging tables for the Acorn/TopExpress debugger and handing over
        the squashed-memory version of the compiler.

*******************************************************************************
*******************************************************************************
               This is version 1.49 to be handed to Acorn.
*******************************************************************************
*******************************************************************************

26 July
        <all files returned by AM>
        scanf   bug fix wrt single precision FP conversion,
        driver  rework -arthur switch
        genhdr, headers  include <arthur.h>
        signal  provide two signal numbers for use of customers via raise()
        startup correction re escap handling & sqrt(-1.0) result
        armobj  check for ferror() on object stream from time to time.
        cg      bugfixes re structure results and integer-like (one-word)
                structures with (a?b:c) expressions.
        alloc   malloc should now be faster in cases where very many
                blocks of store are allocated.

17 July
        <essentially all files>
        code back from AM. Storage requirements during compilation
        substantially reduced. Better parameterization of the compiler
        source files to allow for the underlying architecture of the
        computer. Change driver.c to support the new command-line flags
        -arthur & -super in accordance with Acorn's new system-specific
        libraries (code suggested by Acorn). Improvements to library so that
        <escape> is at least sometimes noticed and treated sensibly.
        Check for errors on object (etc) files (in case a floppy disc got
        full up, for instance).

7 June  cg, armgen, printf, fpprintf
        rearrange code to reduce storage demands during compilation,
        e.g. by splitting __vfprintf into two procedures.

6 June  all files
        files back from AM with conversion to VRegnum complete. Arrange
        system so that modules can be compiled one by one & then linked.
        rearrange header files a bit as a start on the path towards removal
        of all 'extern' declarations into the headers.

31 May  modes, armgen, cg, cgsubs, flowgraph, jopprint, loopopt,
        misc, regalloc, s370gen, driver
        withdraw the -O option (which has not been tested for a long
        time anyway) and start changing representation of VRegisters
        into VRegnums for store improvement suggested by AM.

31 May  lex, armasm, sem
        Ensure that compiler can be built without need for floating point
        printf. This involved changes from printf(s) to printf("%s", s)
        and printf(a ? "%d" : "%u", n) to code with the test outside the
        call to printf. If -Qu is enabled than sem warns of any calls to
        printf that may required floating point conversion.

30 May  builtin, sem, synprint, jopprint, misc, printf, fpprintf, ansilib
        stdio.h, headers.c
        make printf with integer-only parms a special case so less code gets
        loaded when FP conversion is not needed. This saves about 3.5Kbytes
        in relevant circumstances.

        NB. With FPE active on evaluation kit the command to rebuild the
        library (in cc.admin.test & cc.admin.mklib) fails because of an
        overlong input line. Hence change to cc.admin files to exit from
        FPE before rebuilding.

30 May  many files (again)
        new version from AM, improving store allocation, improving
        error recovery after bad syntax (e.g. missing " at end of
        string is treated more kindly), reworking of representation
        of block headers.

29 May  codebuf, armasm, s370asm, driver, synprint.  sem
        Optional compilation so that -s option can be disabled to save
        the space taken by the disassembler.
        sem reduced (x & 0) -> 0 if x is a (non-volatile) variable ref.

28 May  armgen, cg, cgsubs, driver, flowgraph, loopopt, s370gen, ccarm;
        armspec, modes, <float.h>
        Install new AM version with much improved storage management etc.
        (re-)correct unsigned fix (cg)
        change log file name from C-log to Clog to support file systems
        where '-' is a bad character
        Avoid conditional execution of FP instructions if not done
        in hardware.
        Restore FP regs in one place if any were saved in a proc.
        Put in symbols such as ENABLE_CG to enable the -Qg debug switch.
        remove the call to print_opname() from s370gen.
        undo an AM change to <float.h>

26 May
        meeting at Acorn re support for C debugger.

19 May  cgsubs
        correction (to register use) to make unsigned fix work properly

19 May  armgen, armspec, s370spec, regalloc
        startup.s, setjmp.h
        Further work re floating point regs. Change to setjmp to
        preserve fp var regs.

5 May   armspec.h, s370spec.h, armgen.c
        start to arrange to preserve some FP registers over proc calls.

5 May   genhdr.c, driver.c, modes.h
        VOID main() ...   & #include <stdlib.h>
        some thoughts re 'ARM applications card' version of C compiler
        that uses MS-Dos file name conventions if -fx is specified.

5 May   stdio.c, stdio.h, float.h, nonansi.ibmfloat.h, nonansi.ieeefloat.h,
        headers.c, locale.c, setjmp.h, startup.s
        correct FLOAT_DIG to FLT_DIG
        provide value for OPEN_MAX and hide the name SYS_OPEN as
        _SYS_OPEN.
        correct treatment of setlocale(xxx, "") which is not an error and
        so should not return NULL.
        provide setjmp() as a function.

29 Apr  jopcode, armspec, s370spec, sem, flowgraph, cg,
        armgen, main, s370gen, cgsubs, jopprint
        new versions from AM. Improve treatment of (signed) division
        by powers of 2. Remove bugs relating to out-of-range shift
        amounts.

25 Apr  codebuf, misc, cg, syn, bind, flowgraph, modes.h
        codebuf_reinit() does not now do a LocAlloc().
        Get ready to discard the local store that the parser used for
        its AE tree as soon as the tree has been flattened into J-CODE
        Binders allocated in a separate store pool sunce they seem to
        be needed for longer than the rest of the items in the AE tree.
        Ditto ditto string segment lists.
        bind.c no longer calls nextlabel().
        binduses_() now contains the information that mcrepofexpr() would
        produce, so flowgraph need not depend on bindtype_() still being
        valid. In due course this cached mcrepofexpr should clean up
        cg too.

25 Apr  regalloc, modes.h
        AVL tree representation of ClashLists removed in favour of
        simple linear lists (= RegList), since that substantially
        simplifies the code & even seems to speed it up a bit.
        ClashMaps accessed by byte operations not word ones, and
        better abstraction for their access.

23 Apr  new versions of cg, cgsubs, regalloc, modes.h,
        jopprint, driver, main, loopopt, misc from AM. Major changes
        in area of register allocation where bitmaps are used to save
        store. Bug fix on 0*f() and friends where optimization of the
        multiplication by 0 used to throw away the function call.

        the following files have to go back to AM
            builtin.c, driver.c, cg.c, armobj.c, startup.s,
            armasm.c, armops.h, modes.h

17 Apr  builtin, driver
        make v$codesegment & v$datasegment into names that depend on
        the time of day with the intent that a linker bug be avoided.
        This is relevant if relocatable image files are made by the
        linker using a -library file, and I am unhappy about it!

15 Apr  cg, armobj, startup.s
        flag to say if main() is defined, used in armobj to cause an
        entrypoint to be established.

12 Apr  armops.h
        correction to a comment re arg range for ROR shift range
        armasm.c
        export decode_instruction so I can call it from the debugger

11 Apr  driver, modes.h
        -fr sets FEATURE_RELOCATE as a bit in feature. Intended to support
        generation of absolutely relocatable code when there are no
        statics initialized to pointer values. Change default load
        address to &8000.  28-oct-87 default load address to linker default.

07 Apr  driver: permit -s and -g to default to s.<file> and g.<file>
        (useful for cc a b c -s).  Tidy (emasculate) baroque cc -test.
        flowgraph, codebuf, cg, cgsubs, armgen, jopprint, jopcode.h:
          add debugger output (option -gFILE).
        armgen: change interface to xxxgen (no more BindList envs).
        lex, bind, syn, aeops.h: remove old s_argclass to s_auto.
          Error for 'int;' now.
        s370gen, s370asm, s370obj keep in step, remove warnings.
        misc, flowgraph: add extra info to -qu.
        regalloc, loopopt: tidy, proceduralise.  spill_list as arg to regalloc.
        main, pascsyn, armspec.h, modes.h: minor changes.

30 Mar
        AM upgrades consolidated in. Version 1.39 handed to Acorn.

26 Mar  s.startup, scanf, printf, regalloc
        fixups to use of ldfp/stfp & floating point formatting.
        fix bug relating to removal of trailing zeroes in FP print.
        adjust comments in regalloc re clashes between int & float regs.

25 Mar  clib.c.nonansi
        replacement lrand(), slrand()

25 Mar  cgsubs, regalloc, armgen, armasm, armops, jopcode, jopprint
        scanf printf s.startup sem driver main
        support new Acorn floating point system.
        peephole optimiser spots cases where auto-index address modes
        can be used.
        printf/scanf use floating point subsystem options for internal
        to BCD conversion if that is available
        support for ARM2 which has hardware multiply.

14-Mar-87: flowgraph: branch chaining reworked.
         cg, cgsubs, regalloc: make regalloc more modular by moving
           vregister() and initialisation code there.  Also add condition
           for conditional branches to compares.  This facilitates
           transputer code generation, peepholing and kills J_CML.
         armgen: add peepholer.  Kills J_SETSP1.
         misc: merge alloc_init and initsynstore.  rename reinitsynstore
           as alloc_reinit.  Enable $e in error messages to see through
           s_invisible.  Finally remove symtab_alloc and SynAlloc.
         codebuf: reorganise literal pool.
         syn: warning for f() {}.
         jopcode.h, jopprint, armops.h, modes.h, driver, main, loopopt, lex,
           s370gen: minor changes to support above.
         armgen, armasm, jopcode, jopprint, regalloc
            start of support for ARM2 and FPE2


25 Feb  argmen, flowgraph, jopcode.h, cgsubs, jopprint, regalloc
        Better codegeneration for loading integer values that can not
        be loaded using a single ARM instruction.
        Support for scaled index address modes with right as well as
        left shifts, so x += x >> 12 (for instance) now compiles rather
        better. (change in regalloc just because it calls print_jopname).

17 Feb  AM: create version 1.31 for delivery to Acorn tomorrow.
        armgen.c: fix bug concerning f.p. literals
        cgsubs.c: fix bug (from 1.00) in (int)(unsigned)(double)x and
                  syserr() from (char)(double)x.
        sem.c:    re-allow *(int *)<intconst>.  Smash [] to [1] on error.
-------------------------------------------------------------------------
16 Feb  AM: version 1.30 delivered to Acorn.
        Many internal tidying changes and fixes in this version.
        No drastic change to code quality, but small reduction in code size.
        Changes:   introduce options -w -e for supressing warnings/errors.
                   Remove uses of h2_ and most of h1_.
                   Use proper structs for things like RegList.
                   Improve removal of no-ops caused by register allocation -
                     this only indirectly improves jump-chain optimisation.
                   Volatile variables now treated properly.

9 Feb   BSI meeting on C standards in London.

6 Feb   math.h, math.c, stdlib.h
    HUGE_VAL needs to be machine-specific (in particular floating-
    point format specific). Reworked in above files so that HUGE_VAL
    expands to a reference to the external variable _huge_val which
    is then defined in math.c

5 Feb   armgen.c driver.c
    swop SP and SL (optionally on command line option -X). This funny
    facility was a special request passed on via Acorn.

5 Feb   regalloc.c
    remove test for special registers (it was dead anyway). Insert
    #error line to mark where voided access to volatile values can
    be optimized away incorrectly. This needs fixing!

5 Feb   genhdr.c, headers.c, nonansi.ibmfloat.h, nonansi.ieeefloat.h
    adjustment to genhdr so that headers.c can select an instore <float.h>
    that reflects the floating point character of the target machine.
    Expect installation procedure to copy one of nonansi.ieeefloat.h or
    nonansi.ibmfloat.h to float.h to cover the case where a user looks
    in $.arm.clib.h directly.

5 Feb   math.c
    further adjustment to range-overflow tests in pow().

3 Feb   cc.admin.ibmfp, cc.admin.ieeefp
    see these files! they build & test software FP versions of the
    compiler.

31 Jan  sem.c
    #if -> #ifdef, correcting a typo.

31 Jan  driver.c - all of the library - cc.admin.mklib
    library now made as a library (rather than just a single big file)
    with separate compilation of its components. see cc.admin.mklib
    for the protocol for doing this. driver.c changed to link in the
    library in the newer way.

31 Jan  printf.c
    %f format now believed OK.

30 Jan  printf.c
    some bugs removed, particularly in formatting of %f FP values.
    further bugs remain (to be fixed soon!)

30 Jan  scanf.c, stdlib.c, stdio.h => headers.c
    strtoul() implemented.
    rounding in IBM scanf conversions juggled with.
    stdio.h defined errno since same seems generally wanted. hence
    need to rebuild headers.c

27 Jan  driver.c
    of SOFTWARE_FLOATING_POINT is enabled link in a different
    library by default.

27 Jan  math.c
    sinh() tested and corrected.
    tanh() ditto.

26 Jan  math.c
    atan() corrected.

26 Jan  <version handed to AM>

26 Jan  cg.c
    unsigned division/remainder by power of two turned into shift/mask.

26 Jan  printf.c
    %p format mangled because of string "012345789abcdef" (missing out 6!!).

23 Jan  math.c
    pow() completed (almost...) + the test code for it.

22 Jan  math.c, printf.c, bench.c.fptest
    printf() in IBM mode should be able to display up to 18 digits,
    whereas in IEEE more 17 are always enough.  
    sqrt, exp, log, sin, cos coded in software, and test code produced
    and used on same.

15 Jan  sem.c, math.c
    fixup for x.a = x.b = c where the given fields are bitfields. Use of
    an extra let statement should cheer things up.
    more work on math.c to implement & test some more of the elementary
    functions

10 Jan  clib.c.softfplib, ieeeflt.c
    software floating point seems to work tolerably well now! A few bugs
    in ieeeflt.c (re rounding) corrected.

09 Jan  cg, cgsubs
    (xx , <structure>) is horrible & is not coped with in various ways.
    Now fixed, I hope!

08 Jan  s370flt.c, ansilib.c etc
    correct a bug in IBM-format floating multiplication software.
    more work towards support of SOFTWARE_FLOATING_POINT.

06 Jan  cg.c, armgen.c, s370gen.c, jopcode.c, jopprint.c
    new opcode ADCONF to take address of floating point constant. Wanted
    for FP done by software.

06 Jan  sem, builtin, main
    new option SOFTWARE_FLOATING_POINT maps all FP operations onto
    function calls. Useful for testing purposes at least!

05 Jan  math.c
    some work on elementary function code that was not needed for ARM
    because of the support for sin, cos, sqrt etc in the Acorn instruction
    set.

03 Jan  math.c, printf.c, scanf.c
    review code in view of IBM format floating point arithmetic.

02 Jan  clib.c.printf
    look at an oddity that AM had noticed & make tiny adjustment to code
    wrt printing nnn00000000.0 for very large F format FP values.

01 Jan  clib.c.time, clib.c.locale, clib.h.locale, headers.c
    mktime() and strftime() implemented.
    spelling error in locale.h fixed.

01 Jan  c.armgen
    (unsigned)u >= 366 generated incorrect code [plus lots of other
    comprisons that needed two or more instructions]. compare_integer()
    adjusted. Also worry about comparisons against integers close to
    MAXINT.

30 Dec  h.armspec, c.cg, c.genhdr, c.headers, h.stdio
    new version back from AM. Minor tidy-ups by ACN.
    genhdr removes comments & spurious newlines.
    definition of NULL reinstated in <stdio.h>

<AM adjusts library for new version of ANSI spec and for support of IBM,
 ACN does a bit more work on the Pascal front-end>

16 Dec  <many files in compiler>
    Fix bug relating to overenthusiastic loop optimisation when structure
    assignments generate open-coded loops.
    Pascal lexical analyser installed & various changes to help that.

10 Dec  clib.c.stdio s370obj
    "wb+" as well as "w+b" now admitted by fopen(). Treatment of "a" mode
    files corrected so that writes should now always go to the end of the
    file. fopen call in s370obj corrected to say "w+b"

10 Dec  lex, sem, s370flt, IEEEflt
    casts from float to integers can be done at compile time. FP
    comparisons done at compile time now get right answers. FP division
    in s370flt now complete. rounding vs truncation in real_to_real
    now organized properly.

9 Dec   <code passed to AM>

9 Dec   sem, lex, ieeeflt, s370flt
    optimise() upgraded to exploit associativity and commutativity for
    some operators so that better constant folding can happen.
    1.3f computed by rounding whereas (float)1.3 may be by truncation

8 Dec   cg
    it seems that f(g()) where g() returns a structure has not worked (ever?)
    work on same problem - I think it is now mended for both one-word and
    general structures. Also related possible bug with one-word voided
    structure-returning calls fixed.

8 Dec   armgen
    check literal addressability at critical place within multiply_integer()
    which could otherwise lead to trouble.

8 Dec   code handed to Acorn and AM as version 1.25

7 Dec   s370flt, main370
    IBM format floating point arithmetic moved to a separate file &
    conversion work for it started.

6 Dec   sem, cg, cgsubs
    f().a mended (a simple typo caused it to crash - it had never worked)
    treatment of functions that return one-word structures made as
    I want it to be.

5 Dec   All files returned by AM

3 Dec   clib.s.startup, clib.h.nonansi.norcrosys
    new versions of osbgbp, osfile installed so that all results values
    from the SWI can be accessed by the user.

16 Nov  cc, cgsubs, syn, sem, misc, jopcode, jopprint, flowgraph
        armgen, s370gen
    cg_stind improved in case of (content (displace var ...)).
    fp_minus_sp now local to xxxgen via use of J_STACK opcode.
    some uses of listn() changed to mk_expr() and mk_typeexpr() to improve
    the type consistency of the whole system.
    performance is now 3441 dhrystones or 4325 goofed dhrystones.

14 Nov  cc, cgsubs, builtin, regalloc, clib.s.startup
    when x$multiply or x$divide is called the register allocator now knows
    how to cope if the result is not needed. This involved a change to the
    argument order for x$divide & x$remainder so old & new libraries are not
    compatible: sorry!
    'optimization degraded' message removed at request of AM.

13 Nov  armgen, misc, s370gen
    correction to codegeneration for conditional_branch_to(RETLAB) in the
    BXX case, with leaf procedures that have stacked some vars but not LR.
    Only one word must be generated - if necessary a branch.
    Move bitcount to section misc.

13 Nov  <all files returned by AM with substantial rework to both tidy
         things up and to implement an IBM 370 back-end>

08 Nov  loopopt, cg, cgsubs, flowgraph
    Avoid generating SETSP when it would be a noop. Yet further adjustment
    to strategy for spilling registers.

08 Nov  clib.alloc
    Maybe at last I have got things right re behaviour when store can
    not be allocated! calloc now checks that its call to malloc got
    somewhere before clearing the vector that it (maybe didn't) get. Also
    better behaviour when the map of blocks gets full.

07 Nov  cg, cgsubs, regalloc
    Yet further adjustment of code that selects binders for spilling.

06 Nov
    cg, cgsubs, regalloc, loopopt
    Arrange to spill values to stack when expressions get over-complicated.
    re-work code that decides what binder to spill to improve general
    behaviour in this area.

    misc, h.modes
    Rework mk_binder. give binders and extra refcount field for use in
    spill-related code

    cg
    Treatment of (a/b) in void context changed so that a gets evaluated in
    void context than 1/b gets computed. This is intended to provide minor
    speedup in silly cases!

    <hand working copy of code to AM>

    driver, misc
    Do free() at end of compilation step to match malloc(), thereby
    making one-part compiler able to cope with several source files
    without running out of store

    flowgraph, h.jopcode
    branch_chain() recoded to use pointer reversl to avoid undue use of stack.

    regalloc, armgen
    Correction to treatment of CALL opcode (wrt link register use)

    cg, cgsubs
    Correction re single/double floating point operations and remembering
    what length value is in a register

    stdio
    Correction to rename()

    stdlib
    Correction to onexit()

    alloc
    Make malloc() etc perform careful tests on their args so that large
    values are trapped properly without arithmetic overflow foiling this.

    <all>
    incorporate a collection of AM's improvements.

19 Oct  cc.c.syn
    Correction to addcase() spotted by AM on 17th. Two cases with the
    same constant were permitted if the constant was the largest value seen
    to date.

17 Oct
    Version called 1.10 handed to Acorn (including source).

16 Oct  codegenerator
    floating point regs saved over fn calls are now saved as single or
    double precision depending on what sort of value they really contain.

16 Oct  codegenerator files again
    Virtual registers can now be either integer or floating point, and
    as a result register allocation can be implemented for FP values,
    and FP register variables can be implemented.

15 Oct  cc.c.regalloc etc
    Having merged back code from AM, make yet further improvements to
    the register allocation code, removing various hot-spots that tend to
    make the compilation of big functions very slow.

11 Oct  cc.c.regalloc cc.h.modes
    further speed improvements to register allocation code.

11 Oct  cc.h.modes cc.c.cg cc.c.cgsubs cc.c.flowgraph cc.c.loopopt
    labels now have names (small integers) so that debugging output
    can make more sense.

10 Oct  clib.s.startup
    mend a bug I introduced a while ago that stopped ESCAPE trapping
    from working.

10 Oct  <code handed to AM>

10 Oct  cc.c.regalloc cc.h.modes etc
    ClashList in register allocation package now implemented with
    balanced binary tree (rather than linear list). Speed of compiler
    when processing large functions improved considerably, e.g. building
    the compiler takes 6 mins rather than 9.

06 Oct  cc.c.regalloc cc.c.armgen cc.c.flowgraph cc.c.cgsubs cc.h.jopcode
        cc.h.modes
    better printing of virtual registers in diagnostic output, and correction
    of a bug that meant that multiplication of an integer by a constant
    could sometimes corrupt register IP while that register's value was
    still needed.

06 Oct  clib.s.startup
    restore FPPSW to trap interrupts again if I reach huge_error. Previously
    taking the huge_error exit left further overflows etc untrapped.

06 Oct  <all files in cc also clib.c.time>
    code collected back from AM, who had improved pp (wrt ## eg),
    tightened up store use (codevec now allocated in hunks) and cleaned
    up lots of other mess.

21 Sept cc.h.modes cc.c.cg cc.c.cgsubs cc.c.flowgraph cc.c.regalloc
        cc.c.armgen cc.c.loopopt
    Virtual registers now represented as records allocated in the
    general (local) heap. Thus there is now no fixed limit on the number
    of virtual registers that can be used in a function. Doing this
    involved general tightening up of type control throughout codegenerator,
    and in particular some more careful distinction between real and
    virtual registers (which are now separate data types).

20 Sept cc.h.modes cc.h.jopcode cc.c.armgen cc.c.cg cc.c.cgsubs
        cc.c.regalloc cc.c.flowgraph
    Move various typedefs from jopcode to modes, and rework things
    so that labels are now resolved using strutures built in the local
    heap rather than slots in a special vector. That leaves
    registervec[]/registervec1[], copyvec[] and codevec[] as things that
    impose fixed limits on what can be compiled.

19 Sept clib.c.time
    If running on a Master series IO processor I base time() on the
    built-in CMOS clock.  clock() is still based on the normal
    interval-timer. [changed WS to do the same too so that all my files
    should have consistent stamps]

19 Sept clib.s.startup cc.c.stdio
    After _oscli() has reported failure by returning zero, extra information
    can be found in _Error_Code which is struct {int code; char mess[80];}
    Files created with fopen() now get datestamped. In particular this means
    that object files get datestamped.

17 Sept cc.c.flowgraph cc.h.jopcode cc.c.armgen
    Use conditional execution for certain small conditional expressions.

17 Sept cc.c.cg
    correction to a typo in cg_fnap in its treatment of structure args
    that led to frequent bugs in the resulting code.

17 Sept cc.c.syn cc.c.driver
    More case where error nodes and indicators could percolate up & cause
    trouble - the case that prompted investigation was
       { int a,; ... }
    which caused an abort. More filtering of error nodes now performed.
    Also a stray '}' in the input caused loops in error messages. Check
    for unwanted '}' in rd_declrhslist if TOPLEVEL bit is set, and skip over.
    I hope this is enough! How can we find all other possible loops of this
    sort?

17 Sept clib.c.printf
    reduce max number of sig digits that fp numbers try to display from
    18 to 17 to reduce tendancy to use .9999999999999999 type displays.
    This should not effect overall accuracy since 16 to 17 digits is all
    that is necessary to cover the full IEEE resolution.

17 Sept clib.c.string cc.c.builtin cc.c.cg
    Use _memcpy() rather than memcpy() for structure assignments, with
    _memcpy() being a cut-down cheaper version that assumes word alignment
    etc etc and which does not bother about overlapping source & destination.
    Open compilation for _memcpy() in some cases.

17 Sept cc.c.syn
    See line 1287 - this is to respond to a view that external definitions
    (i.e. with initialisers) may only happen at the top level, and not
    within blocks. AM please check both this requirement & my implementation!
    The error will say 'extern variables may not be initialised' & one might
    like to qualify that with an 'except at top level' phrase?

16 Sept cc.c.sem
    mktest() cound hand back an error node. In the processing of !s
    this could turn into (<error> == 0) rather than <error>. Fixed.

15 Sept cc.c.regalloc + files already adjusted
    Further improvement to (a + n*b) where n has a factor that is a
    power of 2.

15 Sept cc.c.flowgraph cc.c.cgsubs
    Try to remove (STR v; LDR v) combinations where v is a variable. Note
    that I should really be a bit more careful than I am if v has the
    volatile attribute.

15 Sept cc.h.jopcode cc.c.jopprint cc.c.armgen cc.c.cg cc.c.cgsubs
    Do a little better with (a + 4*b) or (a - (b << 1)) where ARM can
    do the shift at the same time as the arithmetic. But only try this
    in the cases of shifts by 1 or 2 in the context of adds and subtracts,
    since these occur in address calculation which I am guessing is an
    important special case.
    multiplication by fixed numbers changed to use ADD nor RSB for
    multiplication by 3.

15 Sept cc.c.flowgraph
    If the conditional exit from a block goes to the same place as the
    regular exit then I can drop it, leaving just the regular exit.

15 Sept cc.c.cg cc.c.cgsubs cc.c.flowgraph
    some attempt to keep track of what is in registers with a particular
    concern for ADCONs, which, after all, are constants and so need less
    care re invalidation than most other things.

14 Sept cc.c.cgsubs cc.c.builtin
    arrange that if v is a static variable that will be addressed as
    *(datasegment + nnn) and nnn is >= 4096 (or less if floating point
    access) then an adcon that is offset from datasegment will be used
    thereby avoiding need for an explicit addition to compute a long
    offset in the address.

12 Sept cc.c.fullc cc.c.main cc.c.altmain
    compilation of altmain makes a system where the facilities of 'cc'
    are folded in with the main compiler, and the directory $.tmp is only
    relevant if the -spool option is given.

12 Sept cc.c.cg cc.c.cgsubs cc.h.jopcode cc.c.jopprint cc.c.armgen
    use single precision floating point operations when doing arith
    on vars of type float (not double). Also if actual args in a function
    call are single precision they just contribute one word. This leaves
    the widening of float to double in arg lists (and the adjustment at
    the callers end) in the hands of the semantic analysis phase.

11 Sept clib.s.startup, clib.c.opsys, clib.h.nonansi.norcrosys
        cc.h.modes cc.c.main cc.c.driver cc.h.jopcode cc.c.jopprint
        cc.c.regalloc cc.c.armgen cc.c.cg cc.c.builtin cc.c.cgsubs

    profile option for compiled code, with _mapstore() to display
    results, with command line option -k for counting just calls
    and -K for full counting.

===============================================================================
===============================================================================
===============================================================================
===============================================================================
===============================================================================
===============================================================================
===============================================================================

01 Sept final merge with AM code, delivery to Acorn as version 1.00

31 Aug  clib.c.stdio clib.h.stdio
    fseek made to work. tmpfile()-created files now get deleted when
    they are closed. fopen(xxx, "w+") creates the file if it did not
    already exist.  N.B. that this change alters sizeof(FILE)

31 Aug  clib.s.startup
    error trapping in m/c interface sorted out somewhat.

31 Aug  fltrep
    floating point package (maybe!) complete.

30 Aug  cgsubs, cg, lex, flowgraph, armobj, loopopt, armgen,
        regalloc, armasm, fltrep, h.jopcode, h.modes
    Use structure to represent 3-address instructions. Introduce loop
    optimisation for ADCONV. Arrange to get register clash info correct
    in the face of loop optimisation. sieve test down to 0.59 seconds.
    work on fltrep towards providing an implementation of IEEE-format
    arithmetic done using only integer operations (for use in cross-
    compilation etc).

29 Aug  files collected back from AM and merged in

28 Aug
    Clean up of some more implicit casts across fn calls etc.

27 Aug  clib.c.scanf
    Correction to atoi(), which had never worked.

27 Aug  flowgraph
    compilation of nonterminating empty loops such as (for(;;);)
    caused the compiler to recurse without limit. Fixed.

27 Aug  clib.s.startup
    correction to longjmp to make it work

27 Aug  lex, armgen, cg
    floating point numbers should truncate towards zero when fixed,
    and now unsigned fixing works (at great cost!).

27 Aug  code handed over to AM

27 Aug  arggen, sem, h.modes
    Arrange that literal pool can never overflow.

27 Aug  armgen, flowgraph, loopopt, cgsubs, cg, regalloc, misc
    Better control over types across procedure calls

26 Aug  regalloc, cg, cgsubs, h.jopcode
    structure for recording copy opcode usage. New register colouring
    heuristic. Sieve example down to 0.62 seconds.

26 Aug
    collect back complete system from AM, with checking on arg types
    on calls. Install this as 0.40

22 Aug
    loop invariant detection implemented. All code handed to AM for
    merge job.

18 Aug      syn
    patch so that sizeof ((double)d, (char)c) == sizeof((char)c).

17 Aug      back-end files
    change REGISTER to Register, LABELNUMBER to LabelNumber to make things
    look prettier.

*******************************************************************************
               This is version 0.31 to be handed to Acorn.

17 Aug      fltrep, sem
    make undeflow in a literal constant a recoverable rather than fatal
    error. Remove warning on use of &array or &function since these cases
    arise in use of offsetof()

16 Aug      All compiler files
    merge in code as adjusted by AM, with large changes to use structures
    throughout much of the compiler.

15 Aug      cgsubs, cg etc
    Finish off implementation of lightweight entrysequence for leaf
    procedures. New opcode SETSP1 used to reset stack pointer register
    just before return from a lightweight leaf procedure.

14 Aug      cc.cdoc
    Acorn calling conventions seem to be stabilising on something rather
    along the lines described in this document. Change notation to help
    bring out the alignment.

14 Aug      cg, armgen, flowgraph
    Notice when I am compiling a procedure that does not call any others
    and use a lightweight entry and return sequence.

14 Aug      armgen, flowgraph, cg, regalloc, jopprint, h.jopcode
    change PUSHV, STACKCHECK etc combination into a single new abstract
    opcode ENTER.

*******************************************************************************

13 Aug
    Handed complete set of files to AM for him to merge with his latest
    adjustments.

13 Aug      cg
    Compilation of a goto statement in dead code left branch patching able
    to corrupt the previous real instruction.
    Boolean negation (!) in void context was treated wrongly.

12 Aug      cc.syn
    The parsing of array subscripting etc was incorrect - this shows up in
    that  string++[i]   is supposed to be legal. Moved some code from
    rd_primary to rd_prefix to correct this.

11 Aug      <codegenerator files in general>
    structure results processed by handing an implicit pointer argument to
    the function involved.

10 Aug      cc.c.pp cc.c.genhdr (cc.c.headers)
    Header files kept within compiler to avoid need for extra disc
    access when including a header from the <standard place>. Utility
    called genhdr can be run to create cc.c.headers, the file that actually
    contains the header guff.

09 Aug      cc.c.armgen, cc.c.regalloc
    keep register IP free in cases where it may be needed to get access
    to remote variables in a huge stack frame. Use it in LDRV and friends.

09 Aug      clib.s.startup, clib.c.opsys, cg etc
    generate code that checks stack limits, and raises a new exception
    SIGSTAK on overflow. (treatment of stack overflow is subject to
    revision - the new exception is a placeholder). Code at x$stack_overflow
    and x$stack_overflow1 in clib.s.startup handles things.

09 Aug      cc.c.armasm, cc.c.armobj, cc.c.cg cc.c.flowgraph
    reinstate function names in the code.

09 Aug      clib.s.startup, clib.c.opsys (etc)
    Things like _oswrch() that are really in assembly code are now in
    the file clib.s.startup. Reworking of backtrace code to fit in with
    new stack layout.

*******************************************************************************
08 Aug      cc.c.cg, cc.c.armgen cc.h.armops cc.c.armasm clib.s.startup
            cc.c.regalloc
    Start made on changing calling conventions so that they can agree
    with Modula 2 and provide stack overflow checking capability etc.
    New entry and exit sequences with some vars addressed via SP and some
    via FP seems to work with remarkably little agony. This change is
    sufficiently significant that I move to use the new compiler (0.27)
    as the basis for future bootstrapping.

*******************************************************************************
08 Aug
    Heads of agreement with Acorn signed. Source files delivered to
    L Albinson, installed on his machine and demonstrated by rebuilding
    the compiler from source. Arrangements with Acorn for first stage
    of payment arranged.

08 Aug      clib.h.setjmp
    jmp_buf was a structure type, and that led to it being passed to
    setjmp by value rather than by reference, with the effect that
    setjmp did not work. Now jmp_buf is an array type, which behaves
    rather better.

07 Aug      cc.c.armasm cc.h.xrefs
    Disassembly of FLTS, FLTD and friends corrected. Better treatment of
    single precision numbers.

07 Aug      cc.c.cg cc.c.armgen
    in a function of type void the use of 'return f()' (where f was
    probably also a function returning void) caused trouble.
    Also bfreeregister changed to ignore attempts to release the
    'register' -1 that indicated a void status.
    casts from floating to integral types done better, including casts
    to (short) and (unsigned short), and casts from float as well as
    double.

07 Aug      various
    merge in code from AM that improves treatment of floating point
    numbers and recognizes qualifier characters on the end of numbers,
    e.g. -1u, 0.1f

06 Aug      clib.c.math
    floor, ceil, modf, fmod implemented. Rather grubbly code using
    integer arithmetic on the representations of numbers, but that seems
    the best I can do for now. realloc completed (well, sort of!)

05 Aug      clib files
    qsort worked over to try to ensure both performance and correctness
    are adequate. stdio functions remove(), rename(), tmpfile(), tmpnam()
    implemented. malloc and free coded, but realloc incomplete.

04 Aug      clib.c.stdlib + various other header files
    qsort, bsearch, onexit etc implemented

03 Aug      clib.s.startup, clib.h.assert
    ErrorHandler corrected so that (e.g.) _osfind to open a file in a
    directory that does not exist now behaves sensibly.
    assert_failed needed to hand stderr to fprintf.

03 Aug      cg
    shifts by 0 and by overlarge amounts detected and processed.

03 Aug      many many files!
    merge in improvements from AM

02 Aug      cc.cdoc, clib.h.float
    floating point limits put in properly.

02 Aug      cg, armgen, jopcode, jopprint, armasm, clib.c.math
    J_MOVDFR and J_MOVFDR to deal with casts from float to double and back.
    correct decoding of FP opcodes in armasm. Correct sqrt etc in clib.c.math
    where the assembly code was wrongly written (though it assembled into
    the correct bit pattern, mainly because I was using f0, and a zero put
    into the wrong place is not to vital!). Make (float)(double)x into
    just (float)x.

02 Aug      clib.c.scanf
    character counting ignored leading whitespace so %n was incorrect.

01 Aug      clib.c.math
    frexp improved to treat 0.0 specially and to unpack IEEE unnormalized
    numbers properly.

*******************************************************************************
        <these updates passed to AM>

25 July
    Consolidated version made as 0.24, with reworked library from AM.
    This version declared to be a new baseline.

23 July     loopopt, main, driver, h.modes, cg
    New section 'loopopt' & new debugging flag (set by -Qy, where maybe
    we can remember Y = fixpoint operator?). To start with loopopt just
    prints out a list of the loops that were found in the code.
    Compilation of 'for' and 'do' loops now done via one procedure.

23 July     clib.h.assert
    make it expand to ((void) 0) rather than null text when debugging is
    switched off. Consider
        (a ? assert(...) : b);
    for example.

22 July     h.jopcode, c.cg, c.flowgraph
    mark loops and inner loops in the flowgraph (based on syntactic
    analysis, so loops expresses using for, while and do will get better
    treatment than those built out of goto statements)

21 July     clib.c.printf clib.c.scanf clib.h.stdlib clib.c.math
    strtod and friends looked at.
    HUGE_VAL in math.c and math.h
    Now scanf should deal with overlarge floating point numbers by
    dumping the value HUGE_VAL and setting errno to ERANGE. For single
    precision conversions the value stored is a single precision huge
    floating point value. Underflow on floating point input also sets
    errno to ERANGE and stores the value 0.0
    %i conversions have yet to be implemented properly.
    Assume that ... compilation is now correctly done.
    Merge in a collection of updates provided by AM.


*******************************************************************************
        <these updates passed to AM>

20 July     cg
    fairly longstanding bug found and removed - when a function is called
    the number of registers in use just prior to the call is determined
    by the number of words of argument data, NOT by the number of args
    passed. A muddle relating to this caused corruption of arguments
    when floating point and/or structure values were passed (sometimes),
    and in particular meant that the library functions for trig fns were
    all mangled. This bug was in version 0.19.

18, 19 July
    local variables now addressed relative to SP rather than FP so
    quite soon FP will be (almost) redundant. Various bugs of the
    form of typing errors etc fixed in h.jopcode, armgen. Extra
    care about discarding registers no longer used in CG, so that
    the code that clears out registers between commands is now in
    effect an assert() that no regs are in use there.

17 July     cg, armgen, regalloc
    Further work to make the change noted for 15 July work properly -
    in particular addresses of stack-allocated variables are now put
    into the bindaddr_() field as a list of binders between FP and the
    variable of interest (inclusive). {Note that some arg variables
    are on the other side of FP and are treated differently - this is
    fudged at present and will have to be rationalised soon}

16 July     h.modes, driver, syn, sem
    -Qn    shows unused names at end of compilation
    -Qf    notes start of every function

15 July     h.jopcode, jopprint, cg, armgen, regalloc, main
    Start to replace ssp (simulated stack pointer) with a list of
    binders active at various places in the generated code so that
    the real SP register will not have to be adjusted when local
    bindings manage to get slaved in registers. Call this one version .21

14 July     sem, regalloc, cg
    remove definition of b_ACNreg, since it is no longer used.
    Attempt to give preference to things that the user has marked as
    'register' when spilling vars to the stack. If any argument has its
    address taken then all non-register arg vars are treated as if they
    have their addresses taken (this for security!). Put in extra
    declarations in sem to quieten down the compiler.

14 July     h.jopcode, jopprint, armgen, cg
    LDRR2, LDRR4 and friends as a way of capturing the idea of a scaled
    index address mode. This saves almost 1% on the size of the compiler
    compared with 0.19.

13 July     pp, main
    __DATE__ installed as a macro (you may want to juggle with the format),
    main.c changed to use this to datestamp compilers.

13 July     cg, regalloc, armgen, syn
    put at_least_once() back together by ignoring casts in the initializer.
    use R_IP and R_LK before A1 to A5. Cheaper return is none of A1 to A5
    in use and named functions. pass on max- and min-args to fndef nodes,
    and inspect them in cg to decide how to stack args. Otherwise
        fn(a, ...) { va_start()... }
    fails by stacking a below FP not above it.

13 July     obtained copy of May 1st version of X3J11 information bulletin.
    stdarg.h adjusted, and printf changed to use va_arg macros, also to
    support a couple of new options (%p, %i, %n, vfprintf,...).
    Ditto scanf.  Note that scanf %i is not yet implemented.

11 July     clib.c.math
    use bitfield structures to implement frexp and so on.

*******************************************************************************

11 July     Version 0.19 delivered to Acorn, and a copy passed to AM
            as new reference point.

10 July     clib.c.math
    corrections to trig functions (which were all mangled, e.g. they
    only pretended to work if the EQ condition was satisfied!).

10 July     regalloc and friends
    Register allocation, spilling, copy avoidance etc got working
    tolerably.

09 July     h.jopcode
    CASEBRANCH must treat r3 as a virtual register.

09 July.    armgen
    Register IP used as a temp work register now. It is used on occasions
    my multiply, so when MULK occurs IP must be avoided.

07 July.    armasm, flowgraph, regalloc, h.modes
    Generate register use information by a backwards pass over code
    rather than forwards (during flowgraph creation) so that randomish
    copy operations on unwanted data will no longer lead to an illusion
    that the data is required. blkuse_() and blkdef_() removed.

07 July.    builtin, driver.
    Put "B _main" at start of each module so that any code can be entered
    at its first word.

07 July.    cg, sem
    Registers needing to be saved across fn calls now stored away in
    slots allocated via bindvars (i.e. with binders to show where they are).
    This ought to make register use information flow through them neatly.
    Bad semicolon removed from definition of macro gentempbinder().

07 July.    h.modes, driver, regalloc
    debug flag DEBUG_X for temporary use.

06 July.    flowgraph, cg
    BL uses registers from R_A1 to min(R_A4, R_<nargs>) [not all the
    way up to R_<nargs>]. This matters if a function with MANY args
    gets called!
    Whole treatment of (usedregs) in cg_fnap is WRONG since in current
    code usedregs is a list of actual (rather than virtual) registers.
    Wait until tomorrow to think this one out & fix it!

04 July.    cg, synprint
    remove the dull 'Top level declaration' message from trace output
    and move setting of entry-label to a more sensible place in trace.

04 July.    driver, flowgraph, main, clib.c.math, h.modes, sem, syn
    merge in updates provided by AM, whereby bitfield access is done
    more smoothly.


===============================================================================
04 July.
    files copied to AM. Codegenerator can NOT compile itself: BEWARE.
    Suggest clib.startup should be adopted as new useful code, rest
    of this treated as 'work in progress'. Maybe I will have it fixed in
    a day or 2.

03 July.    cg
    Compilation of some casts (particularly (char)<int>) failed to
    free the source register. Mended.

03 July.    clib.startup
    Better handling of escape events - maybe it is OK now??

02 July.    cg, armgen, flowgraph, regalloc
    Operand for PUSH and POP is now a list of registers (rather than
    a bitmap). This is to allow for use of virtual registers again.
    Change PUSHV as well for compatibility even though it does not need
    the extra flexibility.

31 June.
    optimiser seems to work now, although code is still pretty dreadful.

30 June.    syn
    struct {int a:1, :1;}
    causes a read from address 0 via a prunetype(0) just after the ':'
    for the unnamed field has been read. Change code to do something like
    t==0 ? te_int : prunetype(t) instead. Note: this is possibly a patch
    to a symptom not a cause - struct {int a:1, :1, b:1;} seems unhappy
    about the type of b at least sometimes, so perhaps the proper fixup
    would involve ensuring that the 'int' type is carried over.
    (currentfunction) changed to be type (char *) rather than (Decl *).

30 June.    cg, armgen, jopcode
    ADDKRV is like ADDK but adds in REGVARSIZE as well. Similarly SUBKRV.
    FP should now point ABOVE the register vars at the regular save area,
    so backtraces should be OK again. J_ADCONV to take address of a local
    variable so that the offset of REGVARSIZE is dealt with properly.

30 June.    cg, regalloc, armgen, flowgraph.
    Make a list 'local_binders' of all binders that are bound in a proc.
    For vars without the b_addrof bit set allocate a virtual register &
    save its numver in the bindxx field.

            h.jopcode, jopprint, h.armops.
    New opcode LDRV1, like LDRV but never gets converted into a MOVR even
    if corresponding stack frame location gets slaved. Code to stack reg
    vars across procedure calls - this involves reallocating addresses
    to all local variables when it is known how many reg vars will be used.
    Also PUSHV, just like PUSH but the mask field gets extended late in
    the codegeneration scheme to include reg vars used in this proc.

    An effect of all the above is that FP now points a somewhat odd way
    into a frame. Also (pro tem) '&<local var>' will generate bad code &
    backtraces will fail. Sometime soon I will want to make FP point back
    where it used to to fix these problems.

30 June.    clib.s.startup
    ESC while one is inside a system call (e.g. to read a character)
    is a shambles. Indeed all escape & abort processing seems a bit
    fragile. Improve it(?)

30 June.    h.modes c.driver
    Make optimising the default state. Option -o in driver now flips its state

30 June.    regalloc
    After 'MOV r1, r2' I want to make r1 and r2 into the same register
    if I possibly can, but it seems dangerous to do so if both r1 and
    r2 are REAL registers. Disable same.
    This bug hit because a spurious saving of a dead value on the stack
    left a LDM that loaded then instantly discarded a value, but the
    relevant clash data did not get set up. I had a comment in the code:
    /* I do not do anything about popping a value and then not using it. */
    which I now see was wrongminded! Fix it up.

28 June.    clib.s.startup
    various forms of interrupts trapped and fed into the <signal>
    facility. Code for doing so lookas as if it might be quite fragile
    and will need revision if changes happen inside the Executive.
    Note use of undocumented arrangement to defer callback until
    exit from kernel to USER more rather tna to some other layer in
    the operating system. Code may well fail in a DISASTEROUS way if
    (e.g.) the floating point emulator is interrupted when r12 (=sp)
    is in a nonstandard state.

27 June.    main
    version number changed.

27 June.    armgen
    change floating point pop to use post-indexed addressing since in
    v17 of the FPE this works correctly.

27 June.
    Version 15 handed to Acorn to take to USA for evaluation.
