Targeting the Generic Assembler at other CPU Architectures
----------------------------------------------------------

Intro

Where to find the sources

use of berkly pd yacc
	- also will be available on Helios
	- use of BISON means that your assembler must be public domain
	- where to find the sources

altering the makefile

	changing target CPU specific files:
		lex/parse/header/pass2/object formatter


use of #ifdef CPUTARGET


header	(header_CPU.h)
	Instruction structure - conditional + opcode field manifests
	combine commands

lexical analyser (lex_CPU.c)
	Use of the symbol table to store CPU specific tokens
		- mnemonic tokens
			- associate with instruction opcode template
			- conditional instructions to combine cond into template
		- register tokens
			- return register selector value
		- cpu specific patch tokens
		- additional assembler directives?
		

YACC parser (yyrules_CPU.ypp + yytokens_CPU.ypp)
	Add list of tokens used for mnemonics, registers and patches to
		yytokens_CPU.ypp

	Use of predefined generic rules
		ns_codeconst
		codeconst
		codeconstlist
		namelist

	adding your own directives
		namelist

	creating parse tree and inserting expressions and combine commands
	into mnemonics.


Pass Two (Pass2_CPU)
	Staying compatible with different output formats
	WriteCodeByte/Short/Word
	checking combine commands

Adding new object formatters - COFF (GHOF.c)
	altering main.c to target correct object code formatter
	undefing #ifdef GHOF?
	The parse tree contents and how to process them
		- running Pass2_CPU on all INSTRUCTION parse items


Example assembler - ARM


Testing your assembler
	lots of examples - exaustive testing
	disassembler comparison
	objdump + built in disassembler


References:

GHOF
COFF

YACC
BISON

FLEX
LEX

