/*
 * File:	rules_M68K.c
 * Subsystem:	Generic (M68K) Assembler
 * Author:	P.A.Beskeen
 * Date:	June '93
 *
 * Description: YACC grammer rules and actions to implement the M68K
 *		specific parts of the parser.
 *
 *
 * RcsId: $Id: rules_M68K.ypp,v 1.1 1993/06/25 12:09:11 paul Exp $
 *
 * (C) Copyright 1993 Perihelion Software Ltd.
 * 
 * RCSLog: $Log: rules_M68K.ypp,v $
# Revision 1.1  1993/06/25  12:09:11  paul
# Initial revision
#
 *
 */

/*
 * The rules define the syntax of acceptable input, enabling the parser to
 * identify individual instructions, operands and addressing modes. If the
 * input does not match these rules, then a syntax error is generated and
 * the parser will attempt to recover and find the next instruction to parse.
 *
 * The actions associated with the rules add Instruction type parse items
 * into the parse tree, incrementing the logical program counter (curPC)
 * as they do so. These items are then used by the second pass CPU
 * specific module to place binary instructions into the object code.
 *
 */


/* *** REGISTER ADDRESSING ********************************************	*/

#if 0
reg:		R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 |
		R8 | R9 | R10 | R11 | R12 | R13 | R14 | R15
		| error
		{	Error("Expecting an M68k register");	}
		;
#endif


/* ******************************************************************** */
/* M68K specific mnemonic grammers and actions				*/
/* ******************************************************************** */
/* Parsed opcodes should increment the logical program counter (curPC)	*/
/* and add themselves to the parse tree.				*/
/* ******************************************************************** */


machine_op:	{
			/* create instr. template to be filled in by parser */
			if ((CurInstr = malloc(sizeof(Instruction))) == 0)
				Fatal("Out of Memory for new instruction");

			/* initialise instruction template */
			CurInstr->opcode = 0;
			CurInstr->optexpr = NULL;
			CurInstr->combine = 0;
		}
		M68K_op	/* match 'M68K mneumonics */
		{
			/* add new instruction into the parse tree */
			ParseTreeItem *pti = NewParseTreeItem(INSTRUCTION);
			pti->type.instr = CurInstr;

			curPC += sizeof(int);
		}
		;

M68K_op:
	trap
#if 0
	| branch
#endif
	;



/* *** TRAP INSTRUCTIONS **********************************************	*/

trap:		TRAP imm_constexpr
		{
			if ($2 < 0 || $2 > 15)
				Error("trap: illegal vector size (must be 0-15)");

			CurInstr->opcode = $1->template | $2;
		}
		;



#if 0 /* Example */

/* *** BRANCH INSTRUCTIONS ********************************************	*/

branch:		branch_ops armconstexpr
		{
			CurInstr->opcode = $1->template;
			CurInstr->optexpr = $2;

			/* specifies eval and check of 24 bit pcrel value */
			CurInstr->combine = COM_PCREL_24;
		}
		;

branch_ops:	B | BL ;
#endif


/* *** XXXXXX INSTRUCTIONS ********************************************	*/




/* ******************************************************************** */
/* M68K specific linker instruction patches				*/
/* ******************************************************************** */
/* These patches are implemented by the target CPU's linker.		*/
/* They enable instructions to be patched with data that is only	*/
/* available at link time, such as the module number, or offsets into	*/
/* the module table for static data. The patch usually masks in the	*/
/* information into the immediate data area of specific instructions.	*/
/* The instrpatch rule fakes up a Expression struture to allow normal	*/
/* expressions to be used as patch number arguments as well.		*/
/* ******************************************************************** */


instrpatch:
		constexpr
#if 0
		/* No M68k specific patches yet defined */
		| M68Kpatches
			/* fake up constexpr item with our patch number */
		{	$$ = NewExprNum($1);}
#endif
		;


#if 0
		/* No M68k specific patches yet defined */
M68Kpatches:
		;
#endif



/* End of rules_M68K.ypp */
