
The TMS320C40 Assembler
-----------------------

P. A. Beskeen
September 1991


The TMS320C40 ('C40) assembler is derived from the Helios generic assembler.
All the directives are therefore the same as the ones defined in the
Helios Generic Assembler document.

The 'C40 assembler is syntax compatible with the Texas Instruments definition
as described in the TMS320C4x Users Guide (Available from Texas Instruments).
Small deveations from this are described later.

As Texas Instruments own assembler is targeted at producing COFF (Common Object
File Format) output, it has some assembler directives that are designed to
support this format that are not implimented by the current version of the
Helios assembler. The Helios assembler supports GHOF (Generic Helios Object
Format) output and has directives that support this.

Other differences between the Helios 'C40 assembler and Texas's are in the
standard assembler directives that define code constants, listing options,
macros, etc. Most of these differences are automatically translated by
pre-processing the source file with AMPP (the Helios assembler macro
pre-processor) in conjunction with the 'C40 compatibility macros 'c40compat.m'.

The most important difference to note between COFF and GHOF formats is that
COFF format allows absolute addressing and GHOF does not. GHOF is designed
to enable multiple programs to coexist on a CPU with no memory address
translation hardware (MMU). It can therefore only allow relative addressing
of memory. Absolute addressing would 'fix' a programs position in memory and
preclude any way of concurrently sharing the available address space with
other programs.

Absolute addresses can only be used if they are calculated at runtime.
To get hold of the absolute address of a label, use the
"ldabs32/ldabs16 label Areg" ampp macros. These are defined in the ammp
macro include file "c40.m".

The biggest impact of the restriction on absolute addressing on the 'C40
instruction set is to direct addressing.
	@@@ Currently doesn't make sense.
	@@@ may add pseudo-ops:
		DPUSING addr		// DP is currently pointing to here
		LDPADDR	addr		// load DP with absolute address
		PSEUDOORG addr		// set logical pc

All uses of labels result in pc-relative word offsets (the offset between the
current location and the label's). In constant expressions label1 - label2
can be used to give the number of words between two labels. labels and
numeric expressions passed to branch instructions will automatically be
adjusted for the C40 pipeline. Labels and instructions must be word aligned,
use an align directive if code constant directives such as byte and short
misalign the current position. Space between code constants does not have to
be word aligned. This allows efficient packing of data.



@@@ FOLLOWING NEEDS TO BE RE-WRITTEN:
If you use a numeric expression, rather than a label with an instruction
that is expecting a pc relative value, then the value is taken as a
displacement from the current instruction. In the TI assembler the value would
have been taken as an absolute address reference and relocation information
would have been generated.

This means that for direct addressing for instance, you should always subtract
the offset label from the base label that the DP register points at.
@@@@@@@


@@@@ IMPLEMENT AS A MACRO?
To get the absolute address at runtime of a label, use the LDADDR pseudo op.

LDADDR label, reg
		laj 4			// corrupts r11
		ldi	label-3, reg
		addi	r11, reg
		NOP


To get the absolute address of a label into DP for use with direct addressing,
use the LDPADDR pseudo op.

LDPADDR label
		laj 4			// corrupts r11
		ldi	label-3, DP
		addi	r11, reg
		lsh	-16, DP


To get a 32bit constant into a register use the LDI32 pseudo-op:

LDI32	constexpr, reg
		ldhi	((constexpr) >> 16 &0xffff), reg
		ori	((constexpr) & 0xffff), reg


The 'C40 specific instruction patches
-------------------------------------

These patches are used in conjunction with the instrpatch assembler directive.

	{"PATCHC40DATAMODULE1",	PATCH_C40DATAMODULE1,		0	},
	{"PATCHC40DATAMODULE2",	PATCH_C40DATAMODULE2,		0	},
	{"PATCHC40DATAMODULE3",	PATCH_C40DATAMODULE3,		0	},
	{"PATCHC40DATAMODULE4",	PATCH_C40DATAMODULE4,		0	},
	{"PATCHC40DATAMODULE5",	PATCH_C40DATAMODULE5,		0	},
	{"PATCHC40MASK24ADD",	PATCH_C40MASK24ADD,		0	},
	{"PATCHC40MASK16ADD",	PATCH_C40MASK16ADD,		0	},


Texas Instruments Assembler Optional Syntax Rules:
--------------------------------------------------

#1:
#2:
.
.
.
#14



TMS320C40 Instruction Set
-------------------------



LOAD AND STORE
--------------

LBb		load byte
LBUb		load byte unsigned
LDA		load address register
LDE		load floating point exponent
LDEP		load integer expansion file register to primary register
LDF		load floating point
LDFcond		load floating point conditionally
LDHI		load 16bit unsigned immediate to top 16 bits
LDI		load integer
LDIcond		load integer conditionally
LDM		load floating point mantissa
LDPE		load integer primary register into expansion file register
LDPK		load DP register immediate
LHW		load halfword signed
LHUw		load halfword unsigned
LWLct		load word left shifted
LWRct		load word right shifted
POPF		pop floating point value
PUSH		push integer to (SP)
PUSHF		push floating point to (SP) + (SP + 1)
STF		store floating point value
STI		store integer
STIK		store integer immediate



DIADIC INSTRUCTIONS
-------------------

Optional syntax allows the second register to be omitted if it is the
same as the first.


ABSF		Absolute value of fp number
ABSI		Absolute value of integer
ADDC		add integer with carry
ADDF		add fp values
ADDI		add integer values
AND		bitwise and
ANDN		bitwise and with complement
ASH		Arithmetic shift
CMPF		compare fp values
CMPI		compare integer values
FIX		Convert fp to integer
FLOAT		convert integer to fp
FRIEEE		convert IEEE float to std fp
LSH		logical shift
MBct		Merge byte left shifted
MHct		merge halfword left shifted
MPYF		multiply fp values
MPYI		multiply integers
MPYSHI		multiply signed integer - 32 bit product
MPYUHI		multiply unsigned integer - 32 bit product
NEGB		negate integer with borrow
NEGF		negate fp value
NEGI		negate integer
NORM		normalise fp value
NOT		bitwise ones complement
OR		bitwise or
RCPF		reciprocak floating point
RND		round fp value
ROL		rotate left
ROLC		rotate left through carry
ROR		rotate right
RORC		rotate right through carry
RSQRF		reciprocal of square root fp
SUBB		subtract integers with borrow
SUBC		subtract integers conditionally
SUBF		substract fp values
SUBI		subtract integers
SUBRB		subtract reverse integer with borrow
SUBRF		subtract reverse floating point value
SUBRI		subtract reverse integer
TOIEEE		convert std fp to IEEE format
TSTB		test bit fields
XOR		bitwise exclusive or



TRIADIC INSTRUCTIONS
--------------------


Optional syntax allows the '3' to be omitted when writing these
instructions. If the second operand is the same as the destination, then
the destination register may be omitted.

Any commutative operations source operands may be written in either order
e.g.:
		ADDI	*AR0,R1,R2
is equivalent to:
		ADDI	R1,*AR0,R2


ADDC3		add integers with carry
ADDF3		add fp values
ADDI3		add integers
AND3		bitwise and
ANDN3		bitwise and with complement
ASH3		arithmetic shift
CMPF3		compare floating point values
CMPI3		compare integer values
LSH3		logical shift
MPYF3		multiply fp values
MPYI3		multiply integers
MPYSHI3		multiply signed integer - 32 bit product
MPYUHI3		multiply unsigned integer - 32 bit product
OR3		bitwise or
SUBB3		subtract integers with borrow
SUBF3		substract fp values
SUBI3		subtract integers
TSTB3		test bit fields
XOR3		bitwise exclusive or


PROGRAM CONTROL
---------------

Optionally, BU can be written as just B

Bcond		branch conditionally
BcondAF		delayed branch with annul if false
BcondAT		delayed branch with annul if true
BcondD		delayed branch conditionally
BR		branch
BRD		delayed branch
CALL		call subroutine
CALLcond	call subroutine conditionally
DBcond		decrement and branch
DBcondD		decrement and delayed branch
LAJ		link and jump
LAJcond		link and jump conditionally
LATcond		link and trap conditionally
RETIcond	return from trap or interrupt conditionally
RETIcondD	return from trap or interrupt conditionally, delayed
RETScond	return from subroutine conditionally
RPTB		repeat block of instructions
RPTS		repeat single instruction
TRAPcond	trap conditionally



INTERLOCK INSTRUCTIONS
----------------------

LDFI		load fp, interlocked
LDII		load integer interlocked
SIGI		signal, interlocked
STFI		store fp value, interlocked
STII		store integer, interlocked


MISC INSTRUCTIONS
-----------------

IDLE		idle until interrupt
NOP		no operation
IACK		interrupt acknowledge


PARALLEL INSTRUCTIONS
---------------------

These can be written in either order. 

ABSF || STF	ABSI || STI	ADDF3 || STF	ADDI3 || STI	AND3 || STI
ASH3 || STI	FIX || STI	FLOAT || STF	FRIEEE || STF	LDF || STF
LDI || STI	LSH3 || STI	MPYF3 || STF	MPYI3 || STI	NEGF || STF
NEGI || STI	NOT3 || STI	OR3 || STI	SUBF3 || STF	TOIEEE || STF
SUBI3 || STI	XOR3 || STI


Note that order of ASH/LSH/SUBF/SUBI source operands is swapped from the
normal case. This only occurs in parallel instructions.


PARALLEL LOAD INSTRUCTIONS
--------------------------

LDF || LDF
LDI || LDI


PARALLEL MULTIPLY, ADD and SUBTRACT INSTRUCTIONS
------------------------------------------------

MPYF3 || ADDF3
MPYF3 || SUBF3
MPYF3 || ADDI3
MPYF3 || SUBI3




CONDITION CODES
---------------


Condition	Code	Description			Flags Tested
--------------------------------------------------------------------

Unconditional compare
U		00000	unconditional			

Unsigned compares
LO		00001	lower than			C
LS		00010	lower than or same		C or Z
HI		00011	higher than			~C and ~Z
HS		00100	higher than or same		~C
EQ		00101	equal				Z
NE		00110	not equal			~Z

Signed compares
L		00111	less than			N
LE		01000	less than or equal to		N or Z
GT		01001	greater than			~N AND ~Z
GE		01010	greater than or equal to	~N
EQ		00101	equal				Z
NE		00110	not equal			~Z

Compare to zero
Z		00101	zero				Z
NZ		00110	not zero			~Z
P		01001	positive			~N and ~Z
N		00111	negative			N
NN		01010	not negative			~N

Compare to condition flags
NN		01010	not negative			~N
N		00111	negative			N
NZ		00110	not zero			~Z
Z		00101	zero				Z
NV		01100	no overflow			~V
V		01101	overflow			V
NUF		01110	no underflow			~UF
UF		01111	underflow			UF
NC		00100	no carry			~C
C		00001	carry				C
NLV		10000	no latched overflow		~LV
LV		10001	latched overflow		LV
NLUF		10010	no latched fp underflow		~LUF
LUF		10011	no latched fp underflow		LUF
ZUF		10100	zero or fp underflow		Z OR UF



ADDRESSING MODES
----------------


Register
--------

	written		op reg, reg

	Name	Value
	----	-----
Extended precision registers
	R0	00
	R1	01
	R2	02
	R3	03
	R4	04
	R5	05
	R6	06
	R7	07
	R8	1C
	R9	1D
	R10	1E
	R11	1F

Address (Auxiliary) registers
	AR0	08
	AR1	09
	AR2	0A
	AR3	0B
	AR4	0C
	AR5	0D
	AR6	0E
	AR7	0F

Data Page pointer
	DP	10

Index registers
	IR0	11
	IR1	12

Block Size register (used in circular addressing)
	BK	13

System stack pointer
	SP	14

Status register
	ST	15

DMA interrupt enable
	DIE	16

Internal interrupt enable
	IIE	17

IIOF flag pins and interrupt flag register
	IIF	18

Repeat start, end and count registers
	RS	19
	RE	1A
	RC	1B

CPU Register expansion file registers

Interrupt vector table
	IVTP

Trap vector table
	TVTP

These must always lie on a 512 word boundary (2k byte).
They are loaded via a LDPE, and stored via a LDEP instructions.



Direct
------

	written		op @num, reg



Indirect
--------

Optionally *+AR0(0) is equivalent to: *AR0

In situations where only a displacement of one is used, you may
optionally use *AR0++(1) or *AR0++.

	'*' ARn
	'*' ARn '++' '(' IR0 ')' 'B'
	'*' pre ARn disp
	'*' ARn post disp
	'*' ARn post disp '%'

	pre ::=	'-' | '+' | '--' | '++'
	post ::= '--' | '++'
	disp ::= ('(' constexpr ')') | ('(' IRn ')')


Immediate
---------
	written:	num, reg
	optionally:	@num, reg



PC Relative
-----------

		written	BU label


Address placed in instruction is label - 1 for normal branches, and
label - 3 for delayed branches.

Optionally unconditional branches may be written as simply: B label





TO DO
-----


Must do:
	.float / float fpexpr [,fpexpr]
	and fpexpr's IEEE vs texas ???


Option syntax polishing:

	labels without colon ':' - optional syntax #7 (just newline/whitespace
	allowed before label).

	Parsing of commutative operands - optional syntax #14
	(mpy a b || xxx -> mpy b a || xxx type is already done).
	add / mult / and / or / xor

	Check LDP opt syntax #10 is as in opt syntax, not instr defn.

Other 'C40 compatibility features:

	Add . in front of all pseudo ops

	Need to add support for:
		.include/.copy
		.end
		.field
		.float

	Allow hex constants to be postfixed with h: 67fd8eH

	c40compat.m:
		.align 		= align 128
		.word		= byte
		.even		= align
		.def		= export
		.ref		= ref (import - probably ok to leave)
		.hword		= short
		.int/.long	= word
		.space n	= .space n*4
		.string		= .byte

	Errors for (COFF support directives):
		.asect
		.bss	(or just translate into a helios data directive)
		.data
		.sect
		.text	(or just ignore)
		.usect	

	Possible later support for (in meantime raise error)
		.if/.else/.endif
		.length/.width/.page/.nolist/.list/.title
		.mlib/.mlist/.mnolist
		.option
		lab	.set value
		Macro definition and expansion + args


	Test with known set of errors - check that error reports are
	accurate.

	LDADDR and LDPADDR
