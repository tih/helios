Only in ./ARM: RCS
Only in ./ARM: Xinstall
Only in ./ARM: ampp
Only in ./ARM: ampp.o
Only in ./ARM: builtin.o
Only in ./ARM: charstack.o
Only in ./ARM: defs.o
Only in ./ARM: install
Only in ./ARM: lex.o
Only in ./ARM: macro.o
Only in ./ARM: output.o
Only in ./ARM: putback.o
Only in ./ARM: sym.o
Only in ./C40: RCS
Only in ./C40: Xinstall
Only in ./C40: ampp
Only in ./C40: ampp.o
Only in ./C40: builtin.o
Only in ./C40: charstack.o
Only in ./C40: defs.o
Only in ./C40: install
Only in ./C40: lex.o
Only in ./C40: macro.o
Only in ./C40: output.o
Only in ./C40: putback.o
Only in ./C40: sym.o
Only in .: HELIOSTRAN
Only in ./HP: RCS
Binary files ./HP/ampp and /giga/Helios.ARM/cmds/ampp/HP/ampp differ
Binary files ./HP/ampp.o and /giga/Helios.ARM/cmds/ampp/HP/ampp.o differ
Binary files ./HP/builtin.o and /giga/Helios.ARM/cmds/ampp/HP/builtin.o differ
Binary files ./HP/charstack.o and /giga/Helios.ARM/cmds/ampp/HP/charstack.o differ
Binary files ./HP/defs.o and /giga/Helios.ARM/cmds/ampp/HP/defs.o differ
Binary files ./HP/lex.o and /giga/Helios.ARM/cmds/ampp/HP/lex.o differ
Binary files ./HP/macro.o and /giga/Helios.ARM/cmds/ampp/HP/macro.o differ
Binary files ./HP/output.o and /giga/Helios.ARM/cmds/ampp/HP/output.o differ
Binary files ./HP/putback.o and /giga/Helios.ARM/cmds/ampp/HP/putback.o differ
Binary files ./HP/queue.o and /giga/Helios.ARM/cmds/ampp/HP/queue.o differ
Binary files ./HP/sym.o and /giga/Helios.ARM/cmds/ampp/HP/sym.o differ
Only in ./R140: RCS
Binary files ./R140/ampp and /giga/Helios.ARM/cmds/ampp/R140/ampp differ
Binary files ./R140/ampp.o and /giga/Helios.ARM/cmds/ampp/R140/ampp.o differ
Binary files ./R140/builtin.o and /giga/Helios.ARM/cmds/ampp/R140/builtin.o differ
Binary files ./R140/charstack.o and /giga/Helios.ARM/cmds/ampp/R140/charstack.o differ
Binary files ./R140/defs.o and /giga/Helios.ARM/cmds/ampp/R140/defs.o differ
Binary files ./R140/lex.o and /giga/Helios.ARM/cmds/ampp/R140/lex.o differ
Binary files ./R140/macro.o and /giga/Helios.ARM/cmds/ampp/R140/macro.o differ
Binary files ./R140/output.o and /giga/Helios.ARM/cmds/ampp/R140/output.o differ
Binary files ./R140/putback.o and /giga/Helios.ARM/cmds/ampp/R140/putback.o differ
Binary files ./R140/queue.o and /giga/Helios.ARM/cmds/ampp/R140/queue.o differ
Binary files ./R140/sym.o and /giga/Helios.ARM/cmds/ampp/R140/sym.o differ
Only in .: RCS
Only in .: RS6000
Only in ./SUN4: RCS
Only in ./SUN4: ampp
Only in ./SUN4: ampp.o
Only in ./SUN4: builtin.o
Only in ./SUN4: charstack.o
Only in ./SUN4: defs.o
Only in ./SUN4: install
Only in ./SUN4: lex.o
Only in ./SUN4: macro.o
Only in ./SUN4: output.o
Only in ./SUN4: putback.o
Only in ./SUN4: queue.o
Only in ./SUN4: sym.o
Only in .: TRAN
Only in .: achg
diff -r ./ampp.c /giga/Helios.ARM/cmds/ampp/ampp.c
15c15
< static char *RcsId = "$Id: ampp.c,v 1.6 1992/10/08 16:17:02 nickc Exp $";
---
> static char *RcsId = "$Id: ampp.c,v 1.5 1992/07/03 09:25:47 nickc Exp $";
92c92
< 	fprintf( verfd, "AMPP: Error: %s %d : ", infile, in_line );
---
> 	fprintf( verfd, "Error: %s %d : ", infile, in_line );
94c94
< 	fprintf( verfd, "AMPP: Error: " );
---
> 	fprintf( verfd, "Error: " );
123c123
<     fprintf( verfd, "AMPP: Warning: %s %d : ", infile, in_line );
---
>     fprintf( verfd, "Warning: %s %d : ", infile, in_line );
125c125
<     fprintf( verfd, "AMPP: Warning: " );
---
>     fprintf( verfd, "Warning: " );
197c197
< 	fprintf( verfd, "AMPP: Warning: %s %d : ", infile, in_line );
---
> 	fprintf( verfd, "Warning: %s %d : ", infile, in_line );
199c199
< 	fprintf( verfd, "AMPP: Warning: " );
---
> 	fprintf( verfd, "Warning: " );
223c223
<   _fprintf(verfd,"AMPP: Error: %s %d :", infile, in_line );
---
>   _fprintf(verfd,"Error: %s %d :", infile, in_line );
239c239
<   _fprintf(verfd,"AMPP: Warning: %s %d :",infile, in_line );
---
>   _fprintf(verfd,"Warning: %s %d :",infile, in_line );
471c471
< 	      report( "ampp V1.3 (RCS version $Revision: 1.6 $)" );
---
> 	      report( "ampp V1.3 (RCS version $Revision: 1.5 $)" );
Only in .: bs.a
diff -r ./builtin.c /giga/Helios.ARM/cmds/ampp/builtin.c
7c7
< static char *RcsId = "$Id: builtin.c,v 1.5 1992/10/09 08:27:09 nickc Exp $ Copyright (C) Perihelion Software Ltd.";
---
> static char *RcsId = "$Id: builtin.c,v 1.4 1992/07/03 09:26:58 nickc Exp $ Copyright (C) Perihelion Software Ltd.";
497c497
<         if ( infd == NULL ) error( "Cannot open %s for input", fname->text );
---
>         if ( infd == NULL ) warn("Cannot open %s for input",fname->text);
diff -r ./macro.c /giga/Helios.ARM/cmds/ampp/macro.c
9c9
< static char *RcsId = "$Id: macro.c,v 1.1 1990/09/26 19:02:42 paul Exp $ Copyright (C) Perihelion Software Ltd.";
---
> static char *RcsId = "$Id: macro.c,v 1.1 90/09/26 19:02:42 paul Exp $ Copyright (C) Perihelion Software Ltd.";
diff -r ./output.c /giga/Helios.ARM/cmds/ampp/output.c
9c9
< static char RcsId[] = "$Id: output.c,v 1.3 1992/10/08 13:08:58 nickc Exp $ Copyright (C) Perihelion Software Ltd.";
---
> static char RcsId[] = "$Id: output.c,v 1.2 1991/11/04 10:30:42 nickc Exp $ Copyright (C) Perihelion Software Ltd.";
15,17c15
< 
< #define LINEBUF_SIZE 128
< PRIVATE BYTE linebuf[ LINEBUF_SIZE + 2 ];
---
> PRIVATE BYTE linebuf[128];
35,71c33,61
<   if ( outbuf == NULL )
<     {
<       /* This is a bit kludgy, but under certain circumstances */
<       /* brackets will find themselves in the output           */
< 
<       if ( ch == c_lbra || ch == c_rbra ) return;
<       
<       linebuf[ linepos++ ] = ch & 0x7f;
< 
<       if ( ch == c_nl )
< 	{
< 	  if ( !lineempty )
< 	    {
< 	      linebuf[ linepos ] = '\0';
< 	      fputs( linebuf, outfd );
< 	      lineempty = TRUE;
< 	    }
< 	  linepos = 0;
< 	}
<       else if ( ch != c_space && ch != c_tab ) lineempty = FALSE;
< 
<       if (linepos == LINEBUF_SIZE)
< 	{
< 	  linebuf[ linepos ] = '\0';
< 	  
< 	  fputs( linebuf, outfd );
< 	  
< 	  lineempty = TRUE;
< 	  linepos   = 0;	  
< 	}      
<     }
<   else addch(outbuf,ch & 0x7f);
<   
<   /*
<    * top bit stripping added by NC 4/11/91
<    * top bit is used by lex to indicate a non-parseable character
<    */
---
>         if( outbuf == NULL )
>         {
>                 /* This is a bit kludgy, but under certain circumstances */
>                 /* brackets will find themselves in the output           */
>                 if( ch == c_lbra || ch == c_rbra ) return;
> 
>                 linebuf[linepos++] = ch & 0x7f;
>                 if( ch == c_nl ) {
>                         if( !lineempty ) {
>                                 linebuf[linepos] = '\0';
>                                 fputs(linebuf,outfd);
>                                 lineempty = TRUE;
>                         }
>                         linepos = 0;
>                 }
>                 else if( ch != c_space && ch != c_tab ) lineempty = FALSE;
>         }
> #if 0
> 	/* '\' escape characters only on first pass */
>         else addch(outbuf,ch & 0x7f);
> #else
> 	/* Permanently '\' escape characters. Macro definitions will output */
> 	/* text expected. */
>         else addch(outbuf,ch);
> #endif
> 	/*
> 	 * top bit stripping added by NC 4/11/91
> 	 * top bit is used by lex to indicate a non-parseable character
> 	 */
77,80c67
<   while( *s )
<     {
<       wrch(*s++);
<     }
---
>         while( *s ) wrch(*s++);
