#>DOC title: OBJASM,v0-02,29th May 1990,Active Book Company,James G Smith

Introduction
------------

The Helios assembler is an extended version of the Acorn assembler "objasm".
However, it should be noted that it is NOT directly source compatible. Aswell
as requiring extra information for the correct construction of Helios objects,
the assembler produces different results for certain directives.

Source format
-------------

        {label}         {instruction}           {;comment}

All fields are optional. The {label} field must be the first character
on the line. The {label} and {instruction} fields must be seperated by
at least one space character. The comment field is started by the
first semi-colon encountered (ignoring those in literal strings).

The assembler will treat ASCII tab characters (&09) as spaces (&20).
Lines are terminated by either CR (&0D) or LF (&0A). The sequences
CR/LF or LF/CR are treated as a single newline.

Symbols
-------

Symbols consist of upto 255 characters from the set "A-Z" "a-z" "0-9"
and "_". The case of alphabetic characters IS important. Normal
symbols must start with an alphabetic character. A special syntax
using vertical bars "|" to enclose the symbol allows any character to
be used in a symbol. Note: the enclosing vertical bars are not seen as
part of the symbol.


NOTE: With the current version of "hobjasm" it is not possible to have
      a "|" enclosed symbol where the first character is "." or
      ASCII 128.


Expressions
-----------

Expressions are combinations of direct values and unary or binary
operators. Parenthesis may be used to ensure the correct evaluation
order of expressions. Numeric values are unsigned 32bit integers
(&00000000 to &FFFFFFFF). Overflow is ignored when performing
calculations (ie. -1 evaluates to &FFFFFFFF). Comparisons are always
unsigned (ie. "-1 > 1" is TRUE). Strings are arrays of upto 256 8bit
values. Logical values are either TRUE or FALSE. Program-relative
values are simply offsets from the base of the assembled code.
Register-relative values are offsets from the value in a base register.

Numeric constants
-----------------

The assembler can accept numbers in one of three formats:
        12345678        decimal
        &12345678       hexadecimal
        n_xxxxxxxx      base n (where n is in the range 2 to xxx)

Directives
----------

        ^       {base}[,{reg}]  ; define a memory structure
[{label}]       #       {value} ; reserve space from the "^" base
        &               ; define an area of word values
{label} *       {value} ; number equating directive (numeric or PC relative)
        =               ; define an area of byte values
        %               ; declare an area of zero-initialised data
        !               ; warning/error message generation
        [               ; if/then
        |               ; else
        ]               ; endif
{name}  RN      {value} ; assign register number {value} to {name}
{name}  FN      {value} ; assign FP register number {value} to {name}
{name}	CP	{value}	; assign co-processor number {value} to {name}
{name}	CN	{value}	; assign co-processor register number {value} to {name}
        END             ; define the end of the assembly
        LIB             ; enable undefined symbol LABELREFs
        LNK     {file}  ; link to another source file
        GET     {file}  ; call another source file (returning on an "END")
        OPT     {number}        ; assembler run-time control options
        TTL     {text}  ; declare listing title
        DCB     {bytes} ; synonym for the directive "="
        DCW     {16bits}        ; define an area of half-word (16bit) values
        DCD     {words} ; synonym for the directive "&"
{label} EQU     {value} ; synonym for the directive "*"
	BGET	{file}	; include a binary data file (do not process)
        CODE    {label} ; defines a 4byte location in static code area
        DATA    {label},{size}  ; defines {size}byte location in static data area
        INIT            ; 4byte link-time reference to this word
        SUBT    {text}  ; declare listing sub-title
        WEND            ; end of while/wend loop
        MEND            ; end of MACRO definition
        GBLA    {var}   ; declare a global arithmetic variable
        GBLL    {var}   ; declare a global logical (boolean) variable
        GBLS    {var}   ; declare a global string variable
        LCLA    {var}   ; declare a local arithmetic variable
        LCLL    {var}   ; declare a local logical (boolean) variable
        LCLS    {var}   ; declare a local string variable
{var}   SETA    {value} ; assign a value to a arithmetic variable
{var}   SETL    {value} ; assign a value to a logical variable
{var}   SETS    {value} ; assign a value to a string variable
[{label}]       ROUT            ; define a local routine
        DCFS    {num}
        DCFD    {num}
        NOFP
        ALIGN           ; align the assembler program counter to next word
        WHILE   {cond}  ; top of while/wend loop
        MACRO           ; start of MACRO definition
        MEXIT           ; terminate MACRO expansion (including any loops)
        LABEL   {label} ; 4byte PC relative offset to {label}
        LTORG           ; define start of literal area
        ASSERT  {cond}  ; generate error on FALSE result
        IMPORT  {label}[,EXCEPTION] ; import an external symbol and generate a STUB
	LABREF  {label} ; import an external symbol (no STUB - label reference only)
        EXPORT  {label} ; export a symbol (global)
{label} EXTERN          ; EXPORT a non-static data area symbol
        MODULE  [{number}]      ; defines the helios module (-1 for undefined)
        COMMON  {label},{size}  ; defines a {size}byte shared static data area
        IMSIZE                  ; 4byte complete (post link) image size
        MODNUM  [{label}]       ; 4byte module number
        MODOFF  [{label}]       ; 4byte module table offset
        OFFSET  {label}         ; 4byte static data/code area offset

Operators
---------

        ?               amount of store allocated to label      (special case)
        :LAND:          logical/boolean AND
        :LOR:           logical/boolean OR
        :LEOR:          logical/boolean Exclusive-OR
        <               less than
        =               equal to
        <=              less than or equal to
        >               greater than
        <>              not equal to
        >=              greater than or equal to
        +               addition/unary +
        -               subtraction/unary -
        :ROR:           rotate right
        :ROL:           rotate left
        :SHR:           logical shift right
        :SHL:           logical shift left
        :AND:           binary/bitwise AND
        :OR:            binary/bitwise OR
        :EOR:           binary/bitwise Exclusive-OR
        :LEFT:          sub-string constructed from the left X characters
        :RIGHT:         sub-string constructed from the right X characters
        :CC:            string concatenation
        *               multiply
        /               division
        :MOD:           remainder after division
        :LNOT:          logical/boolean NOT
        :NOT:           binary/bitwise NOT
        :LEN:           return the length of a string
        :CHR:           single character string from the given ASCII code
        :STR:           8digit hexadecimal string from the given value

The following unary operators always return &00000000 when used in expressions.
They can only be applied to ARM data transfer or data processing instructions
(Suitable errors will be generated if these operators are used in unsuitable
locations). They are used to generate linker patches to access the relevant
external or static data area symbols:

        :MODOFF: {label}        Generate a module table offset patch
        :OFFSET: {label}        Generate a static data area reference patch
        :LSBOFF: {label}        As :OFFSET:, but lo8bits
        :MIDOFF: {label}        As :OFFSET:, but mid8bits
        :MSBOFF: {label}        As :OFFSET:, but hi8bits (really remainder)

The ":LSBOFF:", ":MIDOFF:" and ":MSBOFF:" directives are meaningless in data
transfer instructions, and will generate a suitable warning if used in such
instructions.

Examples:
        ; reference module containing |_printf|
        LDR     r2,[dp,#:MODOFF: |_printf|]

        ; and then reference the |_printf| entry in the static data area
        ADD     r1,r2,#:OFFSET: |_printf|

        ; patch the instruction... noting that the instruction will
        ; have an initial immediate value of 4
        ADD     r2,r2,#((:OFFSET: |_printf|) + 4)


Instruction extensions
-----------------------------
Note: These are NOT macros. The assembler generates the instructions directly.

The following when {label} is an external or static data area symbol:

        ADR     reg,{label}     ; generates the following code
                                ;       LDR     reg,[dp,#:MODOFF: {label}]
                                ;       ADD     reg,reg,#:OFFSET: {label}
        
        ADRL    reg,{label}     ; generates the following code
                                ;       LDR     reg,[dp,#:MODOFF: {label}]
                                ;       ADD     reg,reg,#:LSBOFF: {label}
                                ;       ADD     reg,reg,#:MSBOFF: {label}
        
        LDR     reg,{label}     ; generates the following code
                                ;       LDR     reg,[dp,#:MODOFF: {label}]
                                ;       LDR     reg,[reg,#:OFFSET: {label}]

        LDRB    reg,{label}     ; generates the following code
                                ;       LDR     reg,[dp,#:MODOFF: {label}]
                                ;       LDRB    reg,[reg,#:OFFSET: {label}]

        B       {label}         ; Where {label} is undefined.
        BL      {label}         ; This feature is only enabled if the
                                ; directive "LIB" is given. This is used
                                ; to call a function in another Helios object
                                ; file that will be linked with this one.

        B       {label}         ; Where {label} is an IMPORTed symbol.
        BL      {label}         ; The instruction will actually branch to
                                ; an automatically created STUB function.
                                ; This function will perform the actual
                                ; external referencing and calling.

        &       {label}         ; Can only be used with internal symbols.
                                ; It will insert the offset from the
                                ; current location to the specified symbol.


The following special cases exist, but are not of particularly great use:
        STR     reg,{label}     ; generates the following code
                                ;       LDR     reg,[dp,#:MODOFF: {label}]
                                ;       STR     reg,[reg,#:OFFSET: {label}]

        STRB    reg,{label}     ; generates the following code
                                ;       LDR     reg,[dp,#:MODOFF: {label}]
                                ;       STRB    reg,[reg,#:OFFSET: {label}]



UPDATE  IMPORTANT
------  ---------
        The MACROs "SADR", "SADRM" and "SADRL" should be used to address
        static data area symbols in preference to "ADR" and "ADRL". These
        MACROs will eventually become pseudo-instructions like "ADR" and
        "ADRL", which will revert to addressing internal symbols only.

Literals
--------

The directive "LTORG" (literal origin) defines an area where the
assembler can place literals. Literals are addressed using PC relative
addressing, so large programs may need several "LTORG" directives.

Syntax: LDR <register>,=<expression>

Note: An automatic "LTORG" occurs on the meeting of a "GET" or an
"END" directive.

      Helios STUB functions are placed at the end of a literal area. These
      STUB functions are used to reference external functions (ie. symbols
      which have been IMPORTed).


Strings
-------
Strings are delimited by double-quotes ('"'). Special escape sequences can
be used within strings to insert certain binary values.
       	\0	&00
       	\b	&08
       	\t	&09
       	\n	&0A
       	\f	&0C
	\r	&0D
	\"	&22
       	\'	&27
       	\\	&5C
       	\xxx	octal number (upto 3chars in range '0'..'7')

Variables
---------

Pre-defined (system) variables. These have a special syntax, where the
symbol name is enclosed by the characters "{" and "}".

        {PC}            Current PC offset (from start of assembly)
        {VAR}           Current variable definition offset
        {OPT}           Current listing options
        {TRUE}          Boolean TRUE
        {FALSE}         Boolean FALSE
        {MODOFF}        This evaluates to &00000000, but will generate
                        a suitable instruction patch.
                        Note: This variable is only meaningful when
                        used in the immediate fields of data
                        processing or data transfer instructions.
                        e.g.
                                MOV     r0,#{MODOFF}
                        after linking will initialise "r0" with the
                        constant offset of this module within the module
                        table.
        
Local variables
---------------
Local variables are identical to global variables, except that they
can only be referenced within the MACRO expansion in which they were
defined. As with global variables, they must be defined before they
can be used.


Local labels
------------

Normal labels cannot begin with a digit, however a special form of label
which is purely numeric. These labels have limited scope (as defined by
ROUT directives).
The assembler syntax for defining a new local label area is:

        {label}         ROUT

The start of a source file has an implicit ROUT. The format of a local label
definition is:
        {number{routinename}}
in the label field. {routinename} need not be present, but if it is it will
be checked against the {label} given against the ROUT directive.
The syntax for a local label reference is as follows:
                                        %{D}{L}{number{routinename}}
The "%" character introduces a local label reference. The special fields
{D} (direction) and {L} (level) are optional.

The {D} character can be:
        default (no character)  look backwards and forwards for the label
        B                       look backwards only for the label
        F                       look forwards only for the label

The {L} character can be:
        default (no character)  look at this macro level and all levels
        A                       look at all macro levels
        T                       look only at this macro level

example:

        normlabel       ROUT    ; This local routine is between the ROUTs
                                                ;
        00                                      ; local label 00
                                                ;
                        B       %00normlabel    ; branch backwards to 00
                        B       %FT01           ; branch forward to 01
                                                ;
        01normlabel                             ; local label 01
                                                ;
                                                ;
        nextlabel       ROUT    ; end of previous, start of new local routine


Conditional assembly
--------------------

The directives "[" and "]" delimit a section of conditionally
assembled source file. If the logical expression given to the "["
directive yields a {FALSE} result, then the assembler ignores the
source until a corresponding "|" or "]" directive is encountered. If the
command line parameter "-NOTERSE" is given then conditionally skipped
source is listed. Conditional expressions can be nested.


Repetitive assembly
-------------------

The assembler provides a single looping control structure, WHILE/WEND.
Since the syntax of while loops places the conditional test at the top of
the loop, it is possible to never assemble the source.

example:

                        GBLA    counter
                counter SETA    100
                        WHILE   (counter <> 0)
                        ; do some piece of assembly
                counter SETA    (counter - 1)
                        WEND


MACRO assembly
--------------

A MACRO facility allows similar pieces of code to be repeated
throughout the source. It can also be used to generate identical
pieces of code in situations where a procedure call is not the optimum
solution. Syntax:

                MACRO
        $label  macroname       $par1,$par2...
                ; macro code
                MEND

The {$label} is optional, though if present it is treated as another
parameter. All parameters are passed to the MACRO as strings, and
substited before syntax analysis. Any number of parameters (upto the
line length) may be given.


The MACRO is invoked by using its name ("macroname" above). Missing
parameters are indicated by commas, or may be omitted entirely if no
more parameters are to follow. The special character "$" may appear in
a string, provided that it is escaped by a "$" character. Thus:
                =       "The price is $$$par1"
will interpret the "$$" as a single "$" character, and the third "$"
as the start of the parameter identifier "$par1".

The MEXIT directive can be used to force the early termination of a
MACRO expansion. It will also abandon any WHILE/WEND loops that are
currently active.

Each line of source within a MACRO is scanned so that it can be
constructed in stages before being passed to the assembler syntax
analyser. The first stage is to substitute the MACRO parameters
throughout the source line. The second stage peforms the expansion of
local or global variables. If the variable is prefixed by a "$"
character then they are substituted by a string representation of
their value. Normal syntax checking is then performed upon the line.

In certain circumstances it may be necessary to prefix a MACRO
parameter or variable to a label. A special syntax is used to delimit
the name of the parameter from that of the attached label. A "."
character is used to delimit the parameter name. The source sequence:

                        MACRO
        $temp           macroname
                        =       "hello"
        $temp.internal
                        =       "there"
                        MEND


        fred            macroname

will generate the code:

                        =       "hello"
        fredinternal
                        =       "there"

MACROs may be nested upto a depth of 255.

Command line
------------

The assembler is invoked by executing the program "hobjasm". The
program must contain certain keywords to perform the desired assembly:

        -From     <file> : starting source file
        -To       <file> : destination object
        -Object   <file> : synonym for "-To"
        -Hdr      <path> : include file ("GET") pathname        (null)
        -Warning  <file> : error file                           (none)
        -Print           : provide assembly listing             (off)
        -NOTerse         : Terse flag off                       (on)
        -WIdth    <num>  : specify assembly listing width       (131)
        -Length   <num>  : specify assembly listing page length (60)
        -Xref            : gathers cross-reference information  (off)
        -NOCache         : do not cache source files
        -help            : provide a list of available commands
        -MaxCache <num>  : maximum source file cache size       (8MBytes)
        -LIbrary         : generate code suitable for building Helios libraries
        -Makedef         : initialise GBLL variable "make_def" to {TRUE}
        -SMT             : initialise GBLL variable "make_SMT" to {TRUE}

Upper-case denotes the minimum abbreviation. Values in parenthesis are
the default values. The keywords "-from", "-to" and "-object" are optional.
The first non-keyword parameter encountered is treated as the "-from"
filename. The second non-keyword parameter is treated as the "-to"/"-object"
filename.
The Global Logical variables "make_def" and "make_SMT" are created
automatically. By default these variables are initialised to {FALSE}.
The "-Makedef" and "-SMT" flags respectively will initialise these
variables to {TRUE}. This feature is provided to allow seperate objects
to be constructed from the same source (ie. "library objects and definition
files" and "SMT and non-SMT code").

Helios code
-----------
The assembler does not directly produce Helios objects. It only provides the
low-level support, eg. symbol naming, object file format etc. The linker
expects structure information on-top of the Helios object format. This is
provided by standard MACROs. The MACRO files are normally located at the
end of the "-hdr" path.

All the source files should include (as a minimum) the following files:
        listopts.s      assembly listing control directives
        arm.s           ARM processor description
        basic.s         default manifests
        structs.s       structure construction MACROs
        module.s        Helios object module construction MACROs

These files should be included with the "GET" directive before any code
is generated. The default "-hdr" path is NULL. The default location of
the include files is "/helios/include/abcARM/asm".

Note: It is not directly possible to create a standard object and a library
      object from the same source. This is due to the fact that different
      MACROs and command line options need to be used to create the different
      object types.

Constructing Helios objects
---------------------------
After including the necessary system and local header files, any external
labels we wish to reference should be IMPORTed or LABREFed. At the moment the
assembler will generate a STUB function to access all the symbols that we
IMPORT. If we wish to access external data symbols we should use "LABREF".
The "StartModule" should be called to define the module name, slot number
and version. After this the static data area locations should be defined.
The following MACROs are used to define the layout of the static data area:

        static                  start of this static data area
        static_word             define a 32bit static data area
        static_struct           define a data area of the specified structure size
        static_vec              define a static data area vector (array)
        static_extern_func      define (and initialise) an externally available function pointer
        static_extern_word      define an externally available 32bit location
        static_extern_struct    define an externally available structure space
        static_extern_vec       define an externally available byte array
        static_initptr          initialise a data location with a pointer
        static_inittab          initialise a data location from a table in the code
        static_initword         initialise a data location with a constant
        static_initptrtab       initialise a data location from a table of pointers in the code
        static_end              terminate this static data area

Note: These MACROs also generate the initialisation code for functions by
      default. Static variables must be initialised by using the relevant
      MACRO.

After this the actual assembler source code can begin. The module should be
terminated with a call to the "EndModule" MACRO.

Example module source file:     standard.s

------------------------------- CUT HERE --------------------------------------
        TTL     Standard object module example          > standard.s
        ; ---------------------------------------------------------------------
        ; This file will assemble into a standard Helios object. This can be
        ; linked with other assembler objects, those produced by the C compiler
        ; or library ".def" files.
        ; ---------------------------------------------------------------------

        GET     listopts.s      ; assembly listing control directives
        GET     arm.s           ; ARM processor description
        GET     basic.s         ; default labels and variables
        GET     structs.s       ; structure construction MACROs
        GET     module.s        ; Helios object module construction MACROs

        OPT     (opt_on + opt_von + opt_mon + opt_mcon) ; listing options

        ; ---------------------------------------------------------------------
        ; IMPORTs should occur before any code is generated.

        ; We IMPORT the external (library) functions that we wish to call.
        IMPORT  _printf

        ; ---------------------------------------------------------------------
        ; The first thing that should be done before any other code is
        ; generated, is define the module header.

        StartModule     standard,-1,100 ; name,module slot,version

        ; ---------------------------------------------------------------------
        ; Static data area.

        static                          ; start of static data area definitions

        static_extern_func      fn1     ; exported function
        static_word             data    ; internal workspace word
        static_extern_func      fn2     ; exported function

        static_end                      ; end of this static definition area

        ; ---------------------------------------------------------------------
        ; fn1 - exported
fn1     procsym
        STMFD   sp!,{lr}
        BL      fn3             ; call internal function
        LDMFD   sp!,{pc}^

        ; ---------------------------------------------------------------------
        ; fn2 - exported
fn2     procsym
        STMFD   sp!,{r0,r1,lr}
        BL      fn3             ; call internal function
        ADR     r0,fn2_text     ; a1 = address of "fn2_text"
        LDR     r1,data         ; a2 = contents of static location "data"
        BL      _printf
        LDMFD   sp!,{r0,r1,pc}^

fn2_text
        =       "hello %d",&0A,&0D,&00
        ALIGN

        ; ---------------------------------------------------------------------
        ; fn3 - internal - non-exported
fn3     procsym
        STMFD   sp!,{r0,lr}
        MOV     r0,#&00         ; a1 = NULL constant
        ADR     r1,data         ; a2 = address of static data area location
        STR     r0,[r1,#&00]    ; store "a1" into variable "data"
        LDMFD   sp!,{r0,pc}^

        ; ---------------------------------------------------------------------

        EndModule               ; and terminate the module cleanly

        ; ---------------------------------------------------------------------
        END
------------------------------- CUT HERE --------------------------------------

Constructing Helios libraries
-----------------------------

Library code/data objects should be assembled with the "-Library" flag.
The actual header object, however, should NOT have the "-Library" flag
specified (the "-Library" flag actually suppresses the generation of STUB
functions). The "-Library" flag is functionally equivalent to the "-Zr" flag
of the Helios Norcroft C compiler.
The library definition ".def" file should be assembled with the "-Makedef" flag
present. This will allow the MACROs to generate the correct code. Note: STUB
functions for IMPORTed symbols are not generated if the "-Makedef" flag is
given. Note: the same assembler source file is used to generate the library
header object and the library ".def" file.

After including the necessary file headers the library name and slot should
be defined using the "Resident" MACRO.

        lib_static              start of the library static data area
        static_word             define a 32bit static data area
        static_struct           define a data area of the specified structure size
        static_vec              define a static data area vector (array)
        static_extern_func      define (and initialise) an externally available function pointer
        static_extern_word      define an externally available 32bit location
        static_extern_struct    define an externally available structure space
        static_extern_vec       define an externally available byte array
        static_initptr          initialise a data location with a pointer
        static_inittab          initialise a data location from a table in the code
        static_initword         initialise a data location with a constant
        static_initptrtab       initialise a data location from a table of pointers in the code
        lib_static_end          terminate this static data area

After the static area definitions any external libraries that are used should
be referenced with the MACRO "uses". The name given must match exactly
(including case) the name in the external library header. The external
functions that are used (ie. provided in the referenced external libraries)
should then be IMPORTed.

The source file should be terminated with a "LTORG" directive. This is to
ensure that all the stub functions (if generating the library header) are
included.

------------------------------- CUT HERE --------------------------------------
        TTL     Example library header file             > libhdr.s
        ; ---------------------------------------------------------------------
        ; This file is used both to define the library link file ".def" and
        ; to form the header for the actual library code.
        ; The assembler defined (and command line modified) logical variable
        ; "make_def" is used to decide which version we are producing.
        ; ---------------------------------------------------------------------

        GET     listopts.s      ; assembly listing control directives
        GET     arm.s           ; ARM processor description
        GET     basic.s         ; default labels and variables
        GET     structs.s       ; structure construction MACROs
        GET     module.s        ; Helios object module construction MACROs

        OPT     (opt_on + opt_von + opt_mon + opt_mcon) ; listing options

        ; ---------------------------------------------------------------------

        Resident        Sample,12,100   ; name,slot number,version

        ; ---------------------------------------------------------------------

        lib_static

        ; provided by "standard.s"
        static_extern_func      fn1
        static_extern_func      fn2
        static_extern_word      data

        ; initialise statics
        static_initword         data,&AA

        lib_static_end

        ; ---------------------------------------------------------------------
        ; Other libraries we rely upon
        uses    CLib

        ; ---------------------------------------------------------------------
        ; External functions called from the Library. These IMPORTs generate
        ; the STUBs required by all the linked library modules.

        IMPORT  _printf

        ; ---------------------------------------------------------------------

        LTORG                   ; terminate this object cleanly

        ; ---------------------------------------------------------------------
        END
------------------------------- CUT HERE --------------------------------------

The last module in the library should have the "EndLibrary" MACRO as
the last source item.

-------------------------------------------------------------------------------

NOTE:
	The following IMPORT variation is required when referencing the PCS
	defined stack overflow handler function. The keyword EXCEPTION is
	required to generate a non-ip destructive stub (since this is the
	only external function that does NOT conform to the PCS standard).

		IMPORT	__stack_overflow,EXCEPTION

-------------------------------------------------------------------------------
