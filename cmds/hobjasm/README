*|> README
-------------------------------------------------------------------------------

"OFFSET" should generate "CODESYMB" directives when referencing code table
symbols. This is normally OK. However, if the assembly is ignoring undefined
symbols (ie. -library) and OFFSET references an undefined symbol it will
generate a "DATASYMB" reference. There is not much we can do about this at
the moment (generate a seperate directive for code symbols).

-------------------------------------------------------------------------------

A thorough (THOROUGH) going over of the symbols generated (internal symbol
handling) must be undertaken. This is to ensure that the correct form of
symbols ("." and "_" prefixed aswell as plain) are generated.

-------------------------------------------------------------------------------

Provision of static data area referencing pseudo-instructions, SADR, SADRM,
SADRL (see note 1 below).

        SADR    reg,label
                LDR     reg,[dp,#:MODOFF: label]
                ADD     reg,reg,#:OFFSET: label]        ; ARMDP

        SADRM   reg,label
                LDR     reg,[dp,#:MODOFF: label]
                ADD     reg,reg,#:LSBOFF: label]        ; ARMDPLSB
                ADD     reg,reg,#:MSBOFF: label]        ; ARMDPREST

        SADRL   reg,label
                LDR     reg,[dp,#:MODOFF: label]
                ADD     reg,reg,#:LSBOFF: label]        ; ARMDPLSB
                ADD     reg,reg,#:MIDOFF: label]        ; ARMDPMID
                ADD     reg,reg,#:MSBOFF: label]        ; ARMDPREST

-------------------------------------------------------------------------------

Command line options to extend the generation of default global variables.

        -GBLL <variable> [{TRUE}|{FALSE}]
        -GBLA <variable> <number>
        -GBLS <variable> <string>

        <number> = decimal, hexadecimal, or base specified
        <string> = space delimited or with surrounding double quotes

This will allow greater flexibility from controlling builds from the command
line. eg. -GBLL ROMcode {TRUE} or -GBLS name "Version 1".

-------------------------------------------------------------------------------

Delete the destination object if the assembly fails. This will minimise
future damage caused by incomplete objects.

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

note 1:

ADR/ADRL problems when the symbol is found in the "static data area" on pass 1,
but on pass 2 a copy is found in the "code". (ie. we check for the normal label
before checking for a "static data area" one. The best short term solution is
to reverse the check.
Either order can lead to confusion for the user:

                DATA    fred,4          ; create static
                ADR     r0,fred         ; get address of static or internal?
        fred    &       &12345678       ; internal name


The ADR and ADRL pseudo-instructions are from the original "objasm". They
would generate the TRUE address of the symbol in a PC relative fashion at
run-time.
The best solution may be to revert out handling of ADR and ADRL to this old
scheme only, and then to create two new pseudo-instructions which explicitly
access the "static data area". eg. "SADR" and "SADRL".

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

Check that "-Library" works. STUBs should not be created. Branches to
IMPORTed functions should generate LABELREFs to the undefined STUB labels.
The library header should provide the actual STUB functions. Note: "-Library"
cannot be used to assemble the library header object, only the code objects.

-------------------------------------------------------------------------------

Stubs should not be generated if "make_def" is TRUE.

-------------------------------------------------------------------------------

Library name symbols appear with "." in front of them. A possible solution
is to internally generate "|" enclosed names, and then to strip the "|"
characters from around symbols when writing the objects.

-------------------------------------------------------------------------------

Document the "EXTERN" directive. (Creates a symbol and defines it as a LABEL
and a GLOBAL, without performing any name translation).
It is a form of EXPORT, where the symbol does NOT refer to the static data
area.

-------------------------------------------------------------------------------

The assembler should have all traces of AOF/a.out output removed.

-------------------------------------------------------------------------------

Warnings and Errors
-------------------

The style of message output by NorCroft C is as follows:

"filename", line <number>: Warning: <message>
"filename", line <number>: Error: <message>

Ideally the assembler should conform to this format.

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
*|> Done
