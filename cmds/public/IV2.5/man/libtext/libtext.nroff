


libtext(3I)         UNIX Programmer's Manual          libtext(3I)



NAME
     libtext - InterViews text library

SYNOPSIS
     #include <InterViews/Text/_c_l_a_s_s.h>
     CC ... -ltext -lInterViews -lX -lm

DESCRIPTION
     The InterViews _l_i_b_t_e_x_t library  provides  support  for  both
     structured and unstructured textual interfaces.  _T_e_x_t is the
     base class for structured  text  objects;  predefined  subc-
     lasses  include simple text objects (Word, Whitespace, Line-
     break), and composite  objects  (Sentence,  TextList,  Para-
     graph,  Display).  Composite structured text objects arrange
     their components to take best advantage of available  screen
     space.   _T_e_x_t_B_l_o_c_k  is  an Interactor that displays a struc-
     tured text object.  A _L_a_y_o_u_t defines a chain  of  TextBlocks
     into  which  a  structured text object is composed.  Layouts
     can be used to define  multiple  column  and  multiple  page
     documents.

     Unstructured text support is provided by the _S_t_r_i_n_g_E_d_i_t  and
     _T_e_x_t_V_i_e_w_e_r  classes.   A  StringEdit object is an Interactor
     that displays a single line of editable text; it is suitable
     for  incorporation into interface components, such as dialog
     boxes, which require a small amount  of  textual  input.   A
     TextViewer  object  displays  an  array of lines of text and
     supports horizontal and vertical  scrolling.   Functions  to
     insert  and  delete  text  are  provided.   Styling  options
     include boldface, underlining, and inverted colors.

SEE ALSO
     libInterViews(3I)






















Printed 4/10/90          12 August 1988                         1






Emulator(3I)        UNIX Programmer's Manual         Emulator(3I)



NAME
     Emulator - terminal emulator

SYNOPSIS
     #include <InterViews/Text/emulator.h>

DESCRIPTION
     An emulator is an object that translates escape sequences in
     a  stream  of  characters  into operations on a text buffer.
     The current emulation is  based  on  the  DEC  VT102  escape
     sequences.

PUBLIC OPERATIONS
     Emulator(OldTextBuffer*)
          Create a new emulator associated with  the  given  text
          buffer.

     SetDevice(int)
          Set the tty device associated with the emulation to the
          given  open  file  descriptor.   Some  escape sequences
          require the ability to query the terminal.

     void Write(const char*, int)
          Translate escape sequences in a buffer  of  characters,
          if any, and add the resulting characters to the associ-
          ated text buffer.  Escape sequences  may  cross  buffer
          boundaries.

SEE ALSO
     OldTextBuffer(3I)

























Printed 4/10/90           15 June 1987                          1






Layout(3I)          UNIX Programmer's Manual           Layout(3I)



NAME
     Layout - structured text layout

SYNOPSIS
     #include <InterViews/Text/layout.h>

DESCRIPTION
     A Layout composes a structured Text(3I) object into a  chain
     of  TextBlock(3I) objects.  Text flows from one TextBlock to
     the next, and is formatted to make  best  use  of  available
     space.   Composition  objects in the structured text specify
     the way the text will be formatted.

     A layout is typically used  to  implement  multi-block  text
     documents,  such  as documents with multiple pages, multiple
     columns, or mixed text and  graphics.   A  layout  does  not
     specify  the size or position of TextBlocks - these are con-
     trolled by the scene hierarchy into which the TextBlocks are
     composed.   The  layout  simply specifies the order in which
     the TextBlocks are filled.

     A typical example of the use of a layout is to view a  docu-
     ment such as a newsletter.  An application would construct a
     number of TextBlocks, each of which would be composed inside
     boxes or other scenes to give the desired appearance.  Other
     interactors, such as GraphicBlocks, Borders and  Glue  might
     also  be  used.   The various interactors would typically be
     composed into one or more outer level  objects  representing
     pages  of  the  document.   The  TextBlocks would be chained
     together in the desired  order  by  Layouts.   The  document
     might contain more than one Layout, each used to specify the
     TextBlocks which correspond to a particular ``story''.

     Layouts specify the font and font style  of  the  text  they
     control.   Each  separate ``context'' in the Text object can
     have a separate Painter.  Layouts also perform hit detection
     on their Text object on the basis of Text context.

PUBLIC OPERATIONS
     Layout(Text*, Sensor*, TextPainter*)
          Create a new Layout containing the given  Text  object.
          The  Sensor  will  be used by all TextBlocks chained to
          the Layout, and the Painter  is  used  to  specify  the
          default  font.   At present, only fixed-width fonts can
          be used.

     ~Layout()
          When a Layout is deleted, its Text is deleted  and  its
          TextBlocks are unchained.

     void Chain(TextBlock*)
     void Unchain(TextBlock*)



Printed 4/10/90         13 December 1987                        1






Layout(3I)          UNIX Programmer's Manual           Layout(3I)



          Add a TextBlock to the end of the  chain  or  remove  a
          TextBlock  from the chain.  All TextBlocks in the chain
          will have the same output  Painter  and  input  Sensor,
          namely those passed to the Layout constructor.

     void Rechain()
          Recalculate the layout following  some  change  to  the
          TextBlock  chain.   Normally  this  is called automati-
          cally.

     void Listen(Sensor *)
          Use the Sensor for all TextBlocks in the chain.

     Coord X()
     Coord Y()
     Coord Remaining()
     boolean Drawing()
          Access functions used by Text  composition  objects  to
          find  the  current  position,  space  remaining  on the
          current line, and the drawing state.

     boolean SkipTo(Coord x, Coord y)
          Called by a Text composition object to skip over a por-
          tion of the text without drawing.  Returns false if the
          skip cannot be  performed,  indicating  that  the  text
          should be drawn.

     void String(const char*, int length)
     void Spaces(int count)
          Called by Text objects to  add  a  substring  or  space
          characters to the output text.

     void NewLine()
          Called by Text composition objects to end  the  current
          line  and begin a new line in the output.  The new line
          will start at the current left margin.

     void Caret()
          Called by Text objects to add a  zero-width  marker  to
          the  output, usually to indicate the position of a text
          cursor.

     void Margins(int left, int right)
          Called  by  Text  composition  objects  to  adjust  the
          current  left margin by _l_e_f_t and the current right mar-
          gin by _r_i_g_h_t.  Positive adjustments  move  the  margins
          away  from  the  edges  of  the textblock (increase the
          width of the margins).

     void Damage(...)
     void ExtraDamage(...)
     void EndDamage(...)



Printed 4/10/90         13 December 1987                        2






Layout(3I)          UNIX Programmer's Manual           Layout(3I)



          Used by Text objects to control the reformatting of the
          text.

     void Enter(void* context)
     void Leave(void* context)
          Used by Text  objects  to  indicate  the  current  Text
          ``context''.   The  context is the basis for specifying
          different fonts and for hit detection.

     void Paint(void* context, TextPainter*)
     void Unpaint(void* context)
          Specify a new Painter to use when displaying  the  text
          for  the  given  _c_o_n_t_e_x_t.  The previous Painter will be
          ``hidden'' until the context is subsequently Unpainted.
          Any  number  of levels of hiding can be achieved.  Each
          Unpaint call removes only the topmost level.  A context
          which  is  not explicitly painted will be painted using
          the same Painter as the enclosing context.

     boolean Hit(Event&, void*& context, void*& after)
          Perform hit detection on the text,  returning  true  if
          the  Event  is targetted at a TextBlock in the chain or
          false if not.  If the return value is true, the  ``con-
          text''  of  the  Text  object whose text ``covers'' the
          point specified by the  coordinates  contained  in  the
          Event  will be returned in _c_o_n_t_e_x_t, or nil if the event
          is outside all contexts.  If the covering  Text  object
          is  a  composition  object then the context of the com-
          ponent Text object ``before'' the event point  will  be
          returned  in  _a_f_t_e_r,  or  nil  if there is no such com-
          ponent.  This is useful for determining the position of
          a hit within a composite object such as a text list.

     void Repair()
     void Touch(Text*)
     void Show(Text*)
          Changes to the Text object managed by the Layout do not
          automatically  result  in  recomposition of the output.
          An application uses _T_o_u_c_h to indicate that the  portion
          of  the  output  occupied  by a Text object needs to be
          recomposed.  _R_e_p_a_i_r causes recomposition of all Touched
          areas  (and  any  other areas affected by the changes),
          and redraws the output.  Touching widely separated Text
          objects  before  calling  Repair will result in ineffi-
          cient screen updating; it is better to call Repair  for
          each   change  or  group  of  changes  that  are  close
          together.  _S_h_o_w is a combination of Touch and Repair.

SEE ALSO
     Text(3I), TextBlock(3I)





Printed 4/10/90         13 December 1987                        3






OldTextBuffer(3I)   UNIX Programmer's Manual    OldTextBuffer(3I)



NAME
     OldTextBuffer - simple text buffer manager

SYNOPSIS
     #include <InterViews/textbuffer.h>

DESCRIPTION
     A  text  buffer  is  an  interactor  that  manages  a   two-
     dimensional  array  of  fixed width text.  The dimensions of
     the array is a function of the space  available  in  a  text
     buffer's  canvas and the size of the font in a text buffer's
     output painter.  Text buffers currently do  not  handle  any
     input  events;  they only perform text-based output commands
     on their canvas.

PUBLIC OPERATIONS
     OldTextBuffer(Sensor*, Painter*)
     OldTextBuffer(int rows, int cols, Sensor*, Painter*)
          Create a new text  buffer,  optionally  specifying  the
          size  of  the  character  array.   The  shape of a text
          buffer is infinitely stretchable and shrinkable.

     void GetSize(int& rows, int& cols)
          Get the current size of the text buffer.

     int Row(Coord y)
     int Column(Coord x)
          Return the row or  column  associated  with  the  given
          coordinate.

     void AddChar(char)
          Add a character to the text buffer at the current posi-
          tion and advance the position to the next location.  If
          the position is beyond the last column of  the  buffer,
          then  move  to the next row.  If the position is beyond
          the last row of the buffer then scroll  the  buffer  up
          one row, discarding the first row.

     void Flush()
          Force any characters that have  been  added  since  the
          last call to Flush to be written to the screen.

     void BatchedScrolling(boolean)
          Enable ``batched scrolling'',  meaning  several  scroll
          operations  will be combined into one larger scroll for
          faster screen update.

     void Blink(boolean)
     void Bold(boolean)
     void Inverse(boolean)
     void Underline(boolean)
          Start or stop making subsequent text  blink,  boldface,



Printed 4/10/90           15 June 1987                          1






OldTextBuffer(3I)   UNIX Programmer's Manual    OldTextBuffer(3I)



          inverse video, or underlined.

     void CarriageReturn()
     void BackSpace()
     void Tab()
          Move to the next row, previous column, or start of  the
          next tab position.

     void CheckScroll(const char* buf, int index, int len)
          If batched scrolling is enabled and adding the  charac-
          ters  in  _b_u_f will cause any scrolling, then do all the
          scrolling at once.

     void ClearScreen()
          Erase the entire screen.

     void ClearLines(int where, int count)
          Erase the text in _c_o_u_n_t rows down from row _w_h_e_r_e.

     void EraseLine()
          Erase the text on the current row.

     void EraseBOL()
     void EraseEOL()
     void EraseEOS()
          Erase from the current position to either the beginning
          or end of the current row, or to the end of the screen.

     void CursorOn()
     void CursorOff()
     void OutlineCursor(boolean)
          Turn on or off display  of  the  block  cursor  at  the
          current  position.   The  cursor can be either a filled
          rectangle (inverting the character at the current posi-
          tion) or an outline.

     void CursorLeft(int n)
     void CursorRight(int n)
     void CursorUp(int n)
     void CursorDown(int n)
     void Goto(int row, int col)
          Move the current position.

     void InsertCharacters(int)
     void InsertLines(int n)
          Open space in the  text  buffer  for  _n  characters  or
          lines.

     void DeleteCharacters(int n)
     void DeleteLines(int n)
          Remove _n characters or lines from  the  buffer,  moving
          characters to the left or moving lines up to occupy the



Printed 4/10/90           15 June 1987                          2






OldTextBuffer(3I)   UNIX Programmer's Manual    OldTextBuffer(3I)



          available space.

     void ScrollUp(int where, int count)
     void ScrollDown(int where, int count)
          Move _c_o_u_n_t lines up or down, discarding lines  off  the
          top and clearing lines at the bottom.

     void SetRegion(int t, int b)
          Set the top and bottom rows of  the  text  buffer  that
          will be affected by subsequent operations.

SEE ALSO
     Interactor(2I), Painter(2I)

NOTE
     This class is old and clumsy, and is provided only for back-
     ward  compatibility.  It may disappear in a future distribu-
     tion.  New applications should use _T_e_x_t_V_i_e_w_e_r(3I).





































Printed 4/10/90           15 June 1987                          3






Shell(3I)           UNIX Programmer's Manual            Shell(3I)



NAME
     Shell - shell interactor

SYNOPSIS
     #include <InterViews/shell.h>

DESCRIPTION
     A shell is an interactor that  contains  a  frame  around  a
     banner  and  terminal  emulator.   A  shell  reads keystroke
     events and writes the corresponding characters to  the  file
     descriptor  identified  by the _p_t_y member variable.  It also
     reads characters from the file descriptor and sends the text
     to the terminal emulator, which in turn writes characters on
     the  screen.   The  terminal  emulation  interprets   escape
     sequences  defined  by  the ``xterm'' termcap entry, roughly
     corresponding to a VT102.

PUBLIC OPERATIONS
     Shell(Sensor*, Painter*)
     Shell(int rows, int cols, Sensor*, Painter*)
     Shell(const char*, int rows, int cols, Sensor*, Painter*)
          Create a new shell with optional name  and  size.   The
          sensor defines the events of interest; it should be nil
          for normal behavior.  The painter colors are  used  for
          drawing the text.

     Run()
          Read events until an EOF is received on  the  _p_t_y  file
          descriptor.   Keystrokes  are written to the file; text
          from the file is written to the terminal emulator.

     void Write(const char*, int)
          Write characters to the file associated with the shell.

SEE ALSO
     Emulator(3I), Interactor(2I), OldTextBuffer(3I)



















Printed 4/10/90           15 June 1987                          1






StringEdit(3I)      UNIX Programmer's Manual       StringEdit(3I)



NAME
     StringEdit - single line interactive string editor

SYNOPSIS
     #include <InterViews/Text/stringedit.h>

DESCRIPTION
     StringEdit is  an  interactor  that  provides  a  convenient
     mouse-based  interactive  editor  for text strings, suitable
     for incorporation  into  other  components  such  as  dialog
     boxes.   The StringEdit class implements cut-and-paste style
     editing with a clipboard shared by all its  instances,  thus
     allowing text to be transferred between instances.  A set of
     control characters is mapped into common editing operations.
     StringEdit  works  with either fixed width or proportionally
     spaced fonts.

EDITING MODEL
     Text is selected with the mouse (augmented by chording  with
     the SHIFT key) or with the keyboard.  A single click selects
     a new insertion point between characters.  A  shifted  click
     extends  an  existing  selection.   A double click selects a
     whole word (bounded by space characters), and a shifted dou-
     ble  click  selects  the  whole string.  Dragging across the
     text selects a range of characters.  Keyboard  commands  are
     available  to extend the selection backwards by whole words,
     and to select the entire  text.   Editing  is  performed  by
     selecting,  then  using  the keyboard to specify the desired
     action.  Characters not specifically  associated  with  com-
     mands  are inserted into text in place of the text specified
     by the current selection.  The replaced text  is  lost,  and
     the  selection  becomes  an  insertion  point  following the
     inserted character.  Commands currently defined include  the
     following.

     Copy (^C)
          Copy the text specified by the selection to  the  clip-
          board, discarding the previous clipboard contents.  The
          selection is unaffected.

     Cut (^X)
          Cut the text specified by the selection  to  the  clip-
          board, discarding the previous clipboard contents.  The
          selection becomes an insertion point in  place  of  the
          deleted text.

     Paste (^V)
          Replace the text specified by the  selection  with  the
          contents  of  the  clipboard,  which is unchanged.  The
          selection becomes  an  insertion  point  following  the
          pasted text.




Printed 4/10/90         11 December 1987                        1






StringEdit(3I)      UNIX Programmer's Manual       StringEdit(3I)



     Left (^B)
     Right (^F)
     Begin (^A)
     End (^E)
          Move the selection one character position to  the  left
          or right, or to the beginning or end of the text.

     Erase (^H, DEL)
     Delete (^D)
          Delete the text of the current selection, without  sav-
          ing it in the clipboard.  If the selection is an inser-
          tion point, delete the previous  character  (Erase)  or
          the next character (Delete) instead.

     SelectAll (^U)
     SelectWord (^W)
          Select the entire text, or extend the selection to  the
          left  by  one whole word.  These commands enable common
          editing operations to be performed  without  using  the
          mouse.  For example to replace the previous word in the
          text, do a SelectWord and type the new text.

     Restart (^R)
          Restart the edit, throwing away all changes made to the
          string.  The clipboard is unchanged.

     Accept (CR)
          Finish the edit.  Note that a mouse click  outside  the
          bounds  of  the  StringEdit  object  also  performs  an
          Accept.

PUBLIC OPERATIONS
3)
     StringEdit(const char* sample, Painter* = stdpaint, int border  =
          Create  a  new  StringEdit  object,  passing  a  sample
          string, a painter and a border width.  The shape of the
          new  object is calculated from the length of the sample
          string and the font specified by the painter.

     void SetString(const char* string, boolean select = true)
          Set the initial contents of the edit buffer to  _s_t_r_i_n_g.
          A  value of nil leaves the buffer untouched.  If _s_e_l_e_c_t
          is true, the entire text will  be  initially  selected,
          otherwise the selection point will be at the end of the
          text.

     char* GetString()
          Allocate and return a new string containing the current
          contents  of  the  edit  buffer.   It  is  the caller's
          responsibility to deallocate the string when it  is  no
          longer required.




Printed 4/10/90         11 December 1987                        2






StringEdit(3I)      UNIX Programmer's Manual       StringEdit(3I)



     Flash(int period)
          Set the blink period of the insertion point  marker  to
          _p_e_r_i_o_d  tenths  of a second.  The initial value is five
          tenths.  A period of zero disables flashing.

     Extra(int count)
          If the text grows longer than will fit into the  avail-
          able space, the interactor's shape will be increased by
          the equivalent of _c_o_u_n_t characters, and Change will  be
          called  on  the  parent Scene in an attempt to allocate
          more space.  If _c_o_u_n_t is zero (the initial value), this
          action is disabled.

     Handle(Event&)
          Handle the  event,  and  read  and  process  subsequent
          events  until an Accept command is executed (a Carriage
          Return is typed or the mouse  is  clicked  outside  the
          bounds  of  the  StringEdit  object).   The event which
          caused the Accept is returned in the reference  parame-
          ter and also put back onto the event queue.

SEE ALSO
     Interactor(2I), Painter(2I)
































Printed 4/10/90         11 December 1987                        3






Text(3I)            UNIX Programmer's Manual             Text(3I)



NAME
     Text - structured text composition

SYNOPSIS
     #include <InterViews/Text/text.h>

DESCRIPTION
     Text is the base class  for  structured  text  objects.   An
     important  derived  class  is Composition, which is the base
     class for grouping other Text objects.   A  Text  object  is
     formatted  onto  the screen by a Layout(3I).  See the manual
     page for Layout for a description of the use of Layouts with
     Text objects.

     Each Text object has a ``context'', which is used to associ-
     ate  the  text with some other, application-specific object.
     Operations on the text, such as defining  the  font  to  use
     when  it is displayed or determining which object is ``hit''
     by a mouse click, are done on the basis of the Text object's
     context.   If  a  Text  object  has  a  nil  context it will
     ``inherit'' its parent Composition's context.

COMPOSITION MODEL
     Each Text object has an associated  size,  representing  its
     natural  width.  The size of a Composition object is the sum
     of the component sizes.  Conceptually the  whole  structured
     Text object is a single line of text - when the text is com-
     posed into available screen space  the  Composition  objects
     each  determine  how  they  will insert line breaks into the
     output if there  is  insufficient  space  remaining  on  the
     current line for the unbroken object.

TEXT PRIMITIVES
     Word A Word contains a string of  characters  that  will  be
          output without interpretation.

     Caret
          A Caret produces a zero-width  marker  in  the  output,
          useful for text cursors.

     Whitespace
          Whitespace produces blank space in the output.

     LineBreak
          A LineBreak  is  Whitespace  with  ``infinite''  width,
          which  typically  causes  the containing Composition to
          begin a new line.

COMPOSITION OBJECTS
     Composition
          A Composition never adds line breaks.  It is useful for
          grouping several Text objects into a single object.



Printed 4/10/90         13 December 1987                        1






Text(3I)            UNIX Programmer's Manual             Text(3I)



     Paragraph
          A Paragraph specifies a prefix and the amounts by which
          to adjust the left and right margins during composition
          of the components.  The prefix  is  typically  used  to
          achieve  indenting  of the first line, or to provide an
          item number for an itemized list.

     Sentence
          A Sentence causes a line break  during  composition  if
          the  next component would overflow the right margin.  A
          Sentence has a separator, usually a Whitespace  object,
          that  is automatically inserted into the output between
          each component.  For example a piece of prose might  be
          composed  into  Sentences containing Words with separa-
          tors consisting of Whitespace  objects  each  of  which
          produce  a  single blank character.  These Sentences in
          turn might be composed  into  another  Sentence  object
          representing  the  body of a paragraph.  The outer Sen-
          tence could have a separator which produces  two  blank
          spaces.

     TextList
          A TextList is composed either  horizontally  or  verti-
          cally,  depending on the space available.  The contents
          of a TextList is composed without  line  breaks  if  it
          fits  on the current line; otherwise, it would overflow
          the current line, line breaks are inserted between each
          of  the  TextList's  components.   Like  a  Sentence, a
          TextList  has  a  separator  which   is   automatically
          inserted between each component.  Typically the separa-
          tor is a Whitespace object, a LineBreak or a Word  con-
          taining  a  character  such as a comma or semicolon.  A
          TextList also has a prefix, a postfix and a ``keeper''.
          The keeper is used when the list has no components, and
          the prefix and postfix are inserted  before  and  after
          the body if there are one or more components.

     Display
          A Display contains a prefix, a body, and a postfix.  If
          during composition the body of a Display would overflow
          the current line, a line break is inserted  before  the
          body,  the  body  is  composed  with  the  left  margin
          indented by a specified amount, and a second line break
          is  inserted  after  the body.  If a Display contains a
          single component, then that component is the  body  and
          there is no prefix or postfix.  If it contains two com-
          ponents, the first is the prefix, the second  the  body
          and there is no postfix.  If the Display contains three
          or more components the first is the prefix, the last is
          the postfix and the remainder constitute the body.

          A Display is  used  to  create  ``display''  structures



Printed 4/10/90         13 December 1987                        2






Text(3I)            UNIX Programmer's Manual             Text(3I)



          within  a piece of prose or to produce block-structured
          layouts for program source code.  In C source code lay-
          out,  for example, a Display might be used for the body
          of a function definition.  The prefix would be  a  word
          containing  a left brace, the postfix would contain the
          matching right brace and the body might be  represented
          as  a  TextList  of  objects  representing  source code
          statements and with a LineBreak as the separator.

PUBLIC OPERATIONS
     Text(void* context = SELF)
     ~Text()
          Construct or destroy a Text object.  The  default  con-
          text  is  the  constant _S_E_L_F which is interpreted to be
          the Text object itself.  When a Text object is  deallo-
          cated,  it  removes itself from its parent Composition,
          if any.

     Text* Copy()
          Make a duplicate of the Text object, recursively  copy-
          ing its components if it is a Composition.

     void Reshape()
          Recalculate the size of the Text, based on the sizes of
          its  components  if  it is a Composition, and propagate
          the call to the parent Composition.  Reshape should  be
          called  following changes to the components of a Compo-
          sition.

     void* GetContext()
     void SetContext(void*)
     Composition* Parent()
     Text* Next()
          Access to various  information  about  a  Text  object.
          _N_e_x_t  will return the Text object following this in the
          parent Composition, or nil if this  is  the  last  com-
          ponent.

DERIVED CLASS PUBLIC OPERATIONS
     Word::Word(const char*, int length, void* context = SELF)
          Construct a word from the given substring with  a  size
          equal to the substring length.

     Whitespace::Whitespace(int size, void* context = SELF)
          Construct a Whitespace object with the specified size.

     LineBreak::LineBreak(void* context = SELF)
          Construct a LineBreak, which is equivalent  to  a  Whi-
          tespace object with ``infinite'' size.

     Composition::Composition(void* context = SELF)
     Composition::~Composition()



Printed 4/10/90         13 December 1987                        3






Text(3I)            UNIX Programmer's Manual             Text(3I)



          Construct or destroy a  Composition  object.   Composi-
          tions  and derived classes delete their components when
          destroyed.

     Text* Composition::First()
     Text* Composition::Succ(Text*)
     Text* Composition::Pred(Text*)
          Get the first component in a Composition, or  the  suc-
          cessor  or  predecessor  of a specified component.  The
          returned value is nil if the component does not exist.

     boolean Composition::Follows(Text* t1, Text* t2)
          Return true if both _t_1 and _t_2  are  components  of  the
          Composition, and _t_2 occurs after _t_1.

     void Composition::Append(Text*)
     void Composition::Prepend(Text*)
     void Composition::InsertAfter(Text* old, Text*)
     void Composition::InsertBefore(Text* old, Text*)
     void Composition::Remove(Text*)
     void Composition::Replace(Text* old, Text*)
          Various ways to modify the contents of  a  Composition.
          Note  that if the Composition being modified is already
          a component in some other Composition,  an  application
          should call Reshape following the change or changes.

     Paragraph::Paragraph(Text* pre, int l, int r, void* = SELF)
          Construct a Paragraph with a specified prefix, and with
          left  margin indented by _l and right margin indented by
          _r.  A prefix of nil is equivalent to no prefix.

     Sentence::Sentence(Text* sep, void* = SELF)
          Construct a Sentence with  a  specified  separator.   A
          separator of nil is equivalent to no separator.

= SELF)
     TextList::TextList(Text* s, Text* k, Text* pre, Text* post, void*
          Construct a TextList, with specified separator, keeper,
          prefix and postfix.  Nil values for any of  these  will
          result  in that component being omitted in the composi-
          tion.

     Display::Display(int indent, void* = SELF)
          Construct a Display with a specified indent.  The  com-
          position  of  a  Display  depends on the number of com-
          ponents it contains.

SEE ALSO
     Layout(3I)






Printed 4/10/90         13 December 1987                        4






TextBlock(3I)       UNIX Programmer's Manual        TextBlock(3I)



NAME
     TextBlock - an interactor for structured text

SYNOPSIS
     #include <InterViews/Text/textblock.h>

DESCRIPTION
     A TextBlock is an interactor  used  in  conjunction  with  a
     Layout(3I) to compose structured text in a multi-block docu-
     ment.  TextBlocks are constructed with a  specified  natural
     shape, and are ``moderately'' stretchable and shrinkable.  A
     TextBlock will have its  input  sensor  and  output  painter
     assigned  by  the Layout in which it is chained.  Event han-
     dling is performed by an interactor passed to the  construc-
     tor, typically an enclosing scene.

PUBLIC OPERATIONS
     TextBlock(int width, int height, Interactor * handler = nil)
          Create a  new  TextBlock,  with  natural  width  _w_i_d_t_h,
          natural height _h_e_i_g_h_t and event handler _h_a_n_d_l_e_r.

     void Handle(Event&)
          Delegate the Handle call to the  handler  specified  in
          the constructor, if not nil.

     void Wait()
     void Done()
          _W_a_i_t sets the TextBlock's cursor to an hourglass,  _D_o_n_e
          restores it to the default arrow.

SEE ALSO
     Interactor(2I), Layout(3I)























Printed 4/10/90         13 December 1987                        1






TextViewer(3I)      UNIX Programmer's Manual       TextViewer(3I)



NAME
     TextViewer - array of text lines

SYNOPSIS
     #include <InterViews/Text/textviewer.h>

DESCRIPTION
     A TextViewer is an interactor that  manages  an  arbitrarily
     large  array  of lines of text, each line being of arbitrary
     length.  TextViewer uses a _p_e_r_s_p_e_c_t_i_v_e to  implement  scrol-
     ling  in  both  x  and y directions.  The amount of the text
     array that will be visible is a  function  of  size  of  the
     TextViewer's  canvas  and the font used.  TextViewer can use
     either a  fixed  width  or  a  proportionally  spaced  font.
     TextViewer  maintains  two markers in the text: _c_a_r_e_t is the
     `text cursor', usually corresponding  to  the  current  user
     `focus',  and  _d_o_t  is  the  point  at  which characters are
     inserted and deleted.  TextViewer coordinates are  character
     positions,  with  the  upper  left corner of the text buffer
     corresponding to row one, column one.

PUBLIC DATA
     StyleSet style
          The set of style flags to apply to  subsequently  drawn
          text.   Styles  can  be  added  to  and  removed from a
          StyleSet object.  Styles defined  include  _H_i_g_h_l_i_g_h_t_e_d,
          _R_e_v_e_r_s_e_d, _B_o_l_d and _U_n_d_e_r_l_i_n_e_d.  The default value is no
          styling.

     CaretStyle caretstyle
          The visual appearance of  the  symbol  that  marks  the
          location of _c_a_r_e_t.  Available styles include _N_o_n_e, _B_a_r,
          _B_l_o_c_k, _O_u_t_l_i_n_e, and _U_n_d_e_r_l_i_n_e.  The default is None.

     boolean overwrite
          If _o_v_e_r_w_r_i_t_e is true (the default), characters added to
          the  TextViewer  will replace existing text.  If false,
          existing text will be moved to the right to make room.

     boolean buffer
          If _b_u_f_f_e_r is true (the default),  the  TextViewer  will
          not  display new text until a _F_l_u_s_h() operation is per-
          formed or the TextViewer is  redrawn.   If  false,  new
          characters appear immediately.

     boolean viewcaret
          If _v_i_e_w_c_a_r_e_t is true (the default), the TextViewer will
          automatically  scroll  itself  so  that _c_a_r_e_t is always
          visible.

PUBLIC OPERATIONS
     TextViewer(Painter* = stdpaint, int cols = 80, int rows = 24)



Printed 4/10/90         11 December 1987                        1






TextViewer(3I)      UNIX Programmer's Manual       TextViewer(3I)



          Create  a  new  TextViewer,  optionally  specifying the
          default size of the array and the painter.  The font is
          taken from the painter.  A TextViewer's shape is infin-
          itely stretchable and shrinkable.

     Caret()
     Caret(Coord row, Coord col)
     NoCaret()
          Set the position of _c_a_r_e_t to (_r_o_w, _c_o_l) or to  _d_o_t,  or
          turn  it  off.   Note that turning the caret off is not
          the same as setting _c_a_r_e_t_s_t_y_l_e to None.

     View()
     View(Coord row, Coord col)
          Scroll so that (_r_o_w, _c_o_l) or _d_o_t is as near to the cen-
          tre of the screen as possible.

     GoTo(Coord row, Coord col)
     GetPos(Coord& row, Coord& col)
          Set or get the position of _d_o_t.

     Margin(int margin)
     Indent(int count)
          Set the current margin or adjust it  by  _c_o_u_n_t  (either
          positive  or  negative).  Subsequent NewLine calls will
          insert spaces (unstyled) at the  left  of  the  buffer,
          according to the new margin.

     Insert(int rows, int cols)
          Insert or delete an area  before  _d_o_t,  which  will  be
          adjusted  so  that it stays just following the affected
          area.  Inserted lines will be empty and  space  charac-
          ters  will  be  added  as  needed to satisfy the column
          requirements.  Deleted text is lost.  TextViewer  tries
          to optimize screen redrawing caused by Insert.

     String(const char*)
     String(const char*, int)
     Spaces(int count)
          Insert a string, a substring or _c_o_u_n_t space  characters
          at  dot,  which  will be moved to follow the insertion.
          If _o_v_e_r_w_r_i_t_e is true the  new  text  will  replace  any
          existing  characters.   It  is  is false, existing text
          will be moved to the right to accommodate the new text.
          The line can grow arbitrarily long.

     Tab(int spacing)
          Insert space characters up  to  the  next  multiple  of
          _s_p_a_c_i_n_g.

     NewLine()
          Move _d_o_t  to  the  beginning  of  the  next  line.   If



Printed 4/10/90         11 December 1987                        2






TextViewer(3I)      UNIX Programmer's Manual       TextViewer(3I)



          _o_v_e_r_w_r_i_t_e  is  true,  a new blank line will be created,
          and any text following _d_o_t on the current line will  be
          moved  to  the  new  line.   If _o_v_e_r_w_r_i_t_e is false, the
          current line will be truncated to _d_o_t.

     Rubout(int count)
          Remove up to _c_o_u_n_t characters before _d_o_t.  Rubout  will
          not pass the beginning of the line.

     EndLine()
     EndText()
          Delete any text following dot on the current line or in
          the whole buffer.

     Flush()
          Redraw the parts of the screen that  were  affected  by
          previous text modifications made while _b_u_f_f_e_r was true.






































Printed 4/10/90         11 December 1987                        3


