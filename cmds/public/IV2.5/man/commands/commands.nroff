


alert(1)            UNIX Programmer's Manual             alert(1)



NAME
     alert - bring up a dialog box

SYNOPSIS
     alert [ font=_f_o_n_t_n_a_m_e ] [ button=_l_a_b_e_l ] [ -top ]

DESCRIPTION
     _A_l_e_r_t displays a dialog box containing text read from  stan-
     dard input on a workstation.  A button dismisses the dialog.

     The font used for the text of the message can  be  specified
     on the command line or as the ``alert*font'' attribute.  The
     text of the label on the dismiss button can also  be  speci-
     fied  on  the  command  line  or as the ``alert*quitbutton''
     attribute.  If ``-top'' is specified on the command line  or
     the  attribute  ``alert*transient''  has a value of ``off'',
     then the window will be inserted as a normal top-level  win-
     dow.   Otherwise  it  will be transient, meaning that window
     managers may not decorate it or allow  it  to  be  moved  or
     resized.

     A common use of _a_l_e_r_t is to display a reminder message at an
     appropriate  time,  under  the control of some other program
     such as _r_e_m_i_n_d(1).

SEE ALSO
     remind(1)




























Printed 4/10/90           27 April 1987                         1






dclock(1)           UNIX Programmer's Manual            dclock(1)



NAME
     dclock - digital clock

SYNOPSIS
     dclock [ -cmjd ] [ size=_x,_y ] [ pos=_x,_y  ]  [  -s_s_l_a_n_t  ]  [
     -t_t_h_i_c_k_n_e_s_s ] [ -f_r_a_t_e ]

DESCRIPTION
     _D_c_l_o_c_k displays a  scalable  digital  clock.   The  time  is
     updated  from  the  local host clock every minute as a back-
     ground process.  The current date is  displayed  across  the
     top of the window in the format

     Sat Aug 16 1986

     (or some  subset  of  such  if  there's  not  enough  room).
     Options  to  control the clock's appearance, size and place-
     ment are as follows:

     -c              Display in 12-hour format ("_civilian"  time)
                     - the default.

     -m              Display in 24-hour format ("_military" time).

     -j              "_John's flag."  Puts a  tail  on  the  digit
                     `9'.

     -d              Do _n_o_t display the current _date  across  the
                     top of the clock view.

     -b              Display a _border (horizontal  line)  between
                     the date string and the time display.

     -T              Do _n_o_t display the _Time in  the  clock  view
                     (leaving just the date).

     -s_s_l_a_n_t         Set the _s_l_a_n_t of the digits.  A _s_l_a_n_t of 100
                     (the  maximum) corresponds to a slant of one
                     digit width.  A _s_l_a_n_t of 0 (the minimum)  is
                     vertical.   Default is -s30.  A special form
                     is -s, which is equivalent to -s0.

     -t_t_h_i_c_k_n_e_s_s     Set the _t_h_i_c_k_n_e_s_s  of  the  digit  segments.
                     Allowable  values  are  between 5 and 25.  A
                     _t_h_i_c_k_n_e_s_s of 25 results  in  segments  which
                     are  one  quarter  (25%) of the digit width.
                     Default is -t15.

     -f_r_a_t_e          Set the _r_a_t_e at which the segments fade when
                     the  time  changes.  A value of 0 is fastest
                     and 4 is slowest.  Default is -f4.   A  spe-
                     cial form is -f, which is equivalent to -f0.



Printed 4/10/90           27 April 1987                         1






dclock(1)           UNIX Programmer's Manual            dclock(1)



     size=_x,_y        Set the width of _d_c_l_o_c_k to _x pixels and  the
                     height to _y pixels.

     pos=_x,_y         Set the position of the top left  corner  of
                     _d_c_l_o_c_k  to  (_x,_y), where (0,0) is the bottom
                     left of the screen.

     To exit _d_c_l_o_c_k, type a `q' in the window.















































Printed 4/10/90           27 April 1987                         2






genclass(1)         UNIX Programmer's Manual          genclass(1)



NAME
     genclass - generate a class from a template

SYNOPSIS
     genclass _t_e_m_p_l_a_t_e _d_e_s_t _p_a_r_a_m=_v_a_l_u_e ...

DESCRIPTION
     _G_e_n_c_l_a_s_s copies the file _t_e_m_p_l_a_t_e to the file  _d_e_s_t  substi-
     tuting occurrences of \_p_a_r_a_m with the associated _v_a_l_u_e.  Any
     number  of  parameter-value  pairs  may  be  specified.   If
     several  parameters have the same prefix, _g_e_n_c_l_a_s_s will sub-
     stitute for the one with the longest name.

     _G_e_n_c_l_a_s_s  is  useful  for  generating  an  instance   of   a
     parameterized C++ class.  For example, InterViews contains a
     hash table class defined as:

         /*
          * Object association table.
          */

         #ifndef \Table_h
         #define \Table_h

         #include <InterViews/defs.h>

         class \TableEntry;

         class \Table {
         public:
             \Table(int);
             ~\Table();
             void Insert(\TableKey, \TableValue);
             boolean Find(\TableValue&, \TableKey);
             void Remove(\TableKey);
         private:
             int size;
             \TableEntry** first;
             \TableEntry** last;

             \TableEntry* Probe(\TableKey);
             \TableEntry** ProbeAddr(\TableKey);
         };

         #endif

     To generate a hash table where the key is a  void*  and  the
     value is an Interactor* in the file _i_t_a_b_l_e._h, one could use

         genclass gentable.h itable.h \
             Table=InteractorTable TableKey="void*" \
             TableValue="class Interactor*"



Printed 4/10/90            29 May 1989                          1






genclass(1)         UNIX Programmer's Manual          genclass(1)



     The include directory <InterViews/Templates> contains a  set
     of useful template files.

BUGS
     The template files syntax should match the one proposed  for
     C++,  but  that  won't  help for substituting for the header
     name.
















































Printed 4/10/90            29 May 1989                          2






graphics(1)         UNIX Programmer's Manual          graphics(1)



NAME
     graphics - persistent structured graphics demo program

SYNOPSIS
     graphics [ -s ]

DESCRIPTION
     _G_r_a_p_h_i_c_s is a simple program that demonstrates  the  use  of
     persistent   structured  graphics  provided  by  InterViews.
     Studying the source can help explain some  of  the  specific
     details of the Graphic and Persistent classes.

     _G_r_a_p_h_i_c_s creates a view made  up  of  a  tray  framed  by  a
     banner.  The tray contains a GraphicBlock for its background
     and a panner.  The GraphicBlock contains a picture which  in
     turn  contains  a  number  of graphic objects.  The user can
     move a graphic object by clicking on it with the left  mouse
     button  and  dragging  it to a new location.  Similarly, the
     user can scale and rotate a graphic object with  the  middle
     and  right mouse buttons, respectively.  The panner lets the
     user pan and zoom the picture when it does not fit  entirely
     in the GraphicBlock.

     The graphic objects in _g_r_a_p_h_i_c_s are  persistent.   When  the
     program  is  initially  run, it creates the graphic objects,
     initializes them, and inserts them  into  the  root  RefList
     maintained by the object manager. If the -s option is speci-
     fied, the object manager is explicitly deleted when the pro-
     gram  exits, causing all persistent objects to be written to
     disk.  The object manager creates  two  files,  _g_r_a_p_h_i_c_s._m_a_p
     and  _g_r_a_p_h_i_c_s._s_t_o,  that  store  the persistent information.
     When the program is next run, the objects are read from disk
     rather than created from scratch.

SEE ALSO
     Graphic(3I), GraphicBlock(3I), Persistent(3I)



















Printed 4/10/90          1 January 1988                         1






idraw(1)            UNIX Programmer's Manual             idraw(1)



NAME
     idraw - drawing editor

SYNOPSIS
     idraw [_o_p_t_i_o_n_s] [_f_i_l_e]

DESCRIPTION
     _I_d_r_a_w creates and edits drawings composed from graphics like
     text,  lines,  splines,  rectangles, polygons, and ellipses.
     It provides some of the same functionality as MacDraw.

     _I_d_r_a_w can open an  existing  drawing  when  starting  up  or
     display  a blank unnamed drawing.  It displays a single por-
     trait or landscape view of an 8.5 by 11 inch page with a set
     of  tools on the left side of the view and a set of pulldown
     menus along the top of the view.  You can pan and  zoom  the
     view  with  a sliding knob or adjuster in _i_d_r_a_w's lower left
     corner.  _I_d_r_a_w can save a modified drawing and open  another
     drawing  or  spool  a  drawing to be printed on a Postscript
     printer.  It can undo and then redo a  user-settable  number
     of  the  last changes made to the drawing.  You can also set
     the fonts, brushes, patterns, and colors  displayed  in  the
     pulldown  menus.   _I_d_r_a_w stores drawings in Postscript files
     which you can print at any  time,  not  just  when  you  run
     _i_d_r_a_w.

     _I_d_r_a_w accepts all of the standard InterViews library options
     along with the additional options listed below:

     -s      Create a small view showing about half of the 8.5x11
             drawing area.

     -l      Create a large view showing the entire 8.5x11  draw-
             ing area (the default).

     _f_i_l_e    Open this drawing after creating the view.

     You  probably  will  use  these  three  standard  InterViews
     library  options  as well (see _W_o_r_l_d(_3_i) for the rest of the
     options):

     -display _d_i_s_p_l_a_y
             Create a view on the specified  display  instead  of
             using the environment variable ``DISPLAY''.

     -geometry _g_e_o_m_e_t_r_y
             Create a view shaped by an X geometry  specification
             (see _X(_1)).

     -xrm _r_e_s_o_u_r_c_e_s_t_r_i_n_g
             Set a resource which does not have a  separate  com-
             mand line option.



Printed 4/10/90            3 Apr 1989                           1






idraw(1)            UNIX Programmer's Manual             idraw(1)



X DEFAULTS
     _I_d_r_a_w allows you to set resources in  a  customization  file
     named   by  the  environment  variable  ``XENVIRONMENT''  or
     ~/.Xdefaults if ``XENVIRONMENT'' is undefined.  Each  string
     of  the  form ``idraw.resource:definition'' sets a resource.
     You can set the number of undoable changes or customize  the
     font, brush, pattern, or color menus.

     If you want to customize any of the paint menus, you  set  a
     resource  given  by the concatenation of the menu's name and
     the entry's number, such  as  ``idraw.pattern8'',  for  each
     entry that you want to override.  All menus use the number 1
     for the first entry.  You have to set resources only for the
     entries  that you want to override, not all of them.  If you
     want to add entries to the menus, you simply  set  resources
     for  them,  but  don't skip any numbers after the end of the
     menu because the menu will stop growing at the  first  unde-
     fined  resource  it  finds.   If  you want to shorten a menu
     instead of extending it, defining  a  blank  string  as  the
     resource  for  an  entry  will truncate the menu before that
     entry.

     _I_d_r_a_w understands the following resources:

     history        Set the maximum number  of  undoable  changes
                    (20 by default).

     initialfont    Set which font will be the initial font  when
                    _i_d_r_a_w starts up.  Give a number which identi-
                    fies the font by its  position  in  the  Font
                    menu starting from 1 for the first entry.

     font_i          Define a custom font to use for the _ith entry
                    in   the   Font  menu.   Give  three  strings
                    separated by whitespace.   The  first  string
                    defines  the  font's  name, the second string
                    the corresponding print font, and  the  third
                    string   the   print   size.    For  example,
                    ``idraw.font3:8x13bold   Courier-Bold    13''
                    defines the third font entry.

     initialbrush   Set which brush will  be  the  initial  brush
                    when  _i_d_r_a_w  starts  up.  Give a number which
                    identifies the brush by its position  in  the
                    Brush  menu  starting  from  1  for the first
                    entry.

     brush_i         Define a custom brush  to  use  for  the  _ith
                    entry  in  the  Brush menu.  You usually give
                    two numbers and two booleans: a 16-bit  hexa-
                    decimal  number  to  define  the brush's line
                    style (each 1 bit draws a dash and each 0 bit



Printed 4/10/90            3 Apr 1989                           2






idraw(1)            UNIX Programmer's Manual             idraw(1)



                    a  gap),  a  decimal  integer  to  define the
                    brush's width in pixels, either  0  or  1  to
                    determine  whether lines start from an arrow-
                    head, and either 0 or 1 to determine  whether
                    lines  end in an arrowhead.  If you give only
                    the string ``none'', it  defines  the  nonex-
                    istent       brush.        For       example,
                    ``idraw.brush2:ffff 1 0 0'' defines a  single
                    pixel wide solid line without any arrowheads.

     initialpattern Set which pattern will be the initial pattern
                    when  _i_d_r_a_w  starts  up.  Give a number which
                    identifies the pattern by its position in the
                    Pattern  menu  starting  from 1 for the first
                    entry.

     pattern_i       Define a custom pattern to use  for  the  _ith
                    entry  in  the Pattern menu.  You can specify
                    the pattern from a 16x16 bitmap, a  8x8  bit-
                    map, a 4x4 bitmap, a grayscale number, or the
                    string ``none''.  You specify the 16x16  bit-
                    map  with sixteen 16-bit hexadecimal numbers,
                    the 8x8 bitmap with eight  8-bit  hexadecimal
                    numbers,  the 4x4 bitmap with a single 16-bit
                    hexadecimal number, and the grayscale  number
                    with  a  single  floating  point number.  The
                    floating point number must contain  a  period
                    to distinguish itself from the single hexade-
                    cimal number and lie  between  0.0  and  1.0,
                    where  0.0 corresponds to a solid pattern and
                    1.0 to a clear pattern.  On the printer,  the
                    bitmap patterns appear as bitmaps, the grays-
                    cale patterns appear as halftoned shades, and
                    the   ``none''  patterns  never  obscure  any
                    underlying    graphics.      For     example,
                    ``idraw.pattern8:8421''  defines a diagonally
                    hatched pattern.

     initialfgcolor Set which foreground color will  be  selected
                    when  _i_d_r_a_w  starts  up.  Give a number which
                    identifies the color by its position  in  the
                    FgColor  menu  starting  from 1 for the first
                    entry.

     fgcolor_i       Define a custom color  to  use  for  the  _ith
                    entry  in  the  FgColor  menu.  Give a string
                    defining the name of the color and optionally
                    three  decimal  numbers  between  0 and 65535
                    following the name to define the red,  green,
                    and blue components of the color's intensity.
                    The intensities override the name;  that  is,
                    idraw  will  look  the  name  up  in a window



Printed 4/10/90            3 Apr 1989                           3






idraw(1)            UNIX Programmer's Manual             idraw(1)



                    system database of common colors only if  you
                    omit  the intensities.  You can define shades
                    of gray by using equal  proportions  of  each
                    primary       color.        For      example,
                    ``idraw.fgcolor8:Indigo   48896   0   65280''
                    defines a color which is a mixture of red and
                    blue.

     initialbgcolor Set which background color will  be  selected
                    when  _i_d_r_a_w  starts  up.  Give a number which
                    identifies the color by its position  in  the
                    BgColor  menu  starting  from 1 for the first
                    entry.

     bgcolor_i       Define a custom color  to  use  for  the  _ith
                    entry  in  the  BgColor menu.  The same rules
                    apply to background colors as  to  foreground
                    colors.

     Other users can edit drawings  that  you  make  with  custom
     fonts,  brushes,  patterns,  or  colors because _i_d_r_a_w stores
     their definitions with the drawing and recreates  them  when
     it  reads the drawing back in.  However, not all definitions
     work across all machines.  Thick or dashed brushes that work
     on one machine, for example, may become invisible on another
     machine.  They will always work in the printout, however.

     N.B.: If you want to run _i_d_r_a_w on  X10,  you  will  have  to
     override  its  predefined  X11 fonts with X10 fonts like the
     following:

     idraw.font1:   6x10 Courier 8
     idraw.font2:   6x13p Courier 10
     idraw.font3:   vtbold Courier-Bold 13
     idraw.font4:   helv10b Helvetica 12
     idraw.font5:   helv12 Helvetica 14
     idraw.font6:   helv12b Helvetica-Bold 14
     idraw.font7:   helv12i Helvetica-Oblique 14
     idraw.font8:   timrom10 Times-Roman 12
     idraw.font9:   timrom12 Times-Roman 14
     idraw.font10:  timrom12b Times-Bold 15
     idraw.font11:  timrom12i Times-Italic 15

DRAWING TOOLS
     The drawing tools lie vertically along  _i_d_r_a_w's  left  side.
     Select, Move, Scale, Stretch, Rotate, and Reshape manipulate
     existing graphics.  Magnify makes a part of the view  expand
     to  fill  the  entire  view.   Text,  Line, Multi Line, Open
     Spline,  Ellipse,  Rectangle,  Polygon,  and  Closed  Spline
     create  new graphics.  The shift key will constrain the last
     group of drawing tools if you press it at the _s_a_m_e time  you
     click  the  mouse to begin drawing.  You can set the current



Printed 4/10/90            3 Apr 1989                           4






idraw(1)            UNIX Programmer's Manual             idraw(1)



     drawing tool by clicking on  it  or  typing  its  associated
     character.   The current drawing tool highlights itself with
     inverted colors.  Clicking the  left  mouse  button  in  the
     drawing  area  invokes the current drawing tool.  _I_d_r_a_w pro-
     vides the following drawing tools:

     Select         Select a graphic whether or not it's  already
                    selected  and  discard  all other selections.
                    If  you  hold  down  the  shift  key,  Select
                    retains the previous selections while includ-
                    ing an  unselected  graphic  or  excluding  a
                    selected  graphic.   If  you press the button
                    outside any graphic, you can clear all of the
                    selections  or  drag  a  rubberband rectangle
                    around a group of graphics to select  all  of
                    them  together.   _S_h_o_r_t_c_u_t:  the  right mouse
                    button invokes Select while the mouse  is  in
                    the drawing area.

     Move           Move  graphics  from  one  spot  to  another.
                    _S_h_o_r_t_c_u_t:  the  middle  mouse  button invokes
                    Move while the mouse is in the drawing area.

     Scale          Scale graphics about their centers.

     Stretch        Stretch graphics vertically  or  horizontally
                    while tying down the opposite edge.

     Rotate         Rotate graphics about their centers according
                    to  the  angle  between  two  radii:  the one
                    defined by the original  clicking  point  and
                    the  one  defined  by  the  current  dragging
                    point.

     Reshape        Move one of a graphic's  points  and  reshape
                    the  graphic  accordingly.   Nothing  happens
                    when you try to reshape an ellipse or  circle
                    because  they  don't have any points suitable
                    for dragging.  When you try to  reshape  some
                    text,  you  will  enter  a  text editing mode
                    where you can change the text with emacs-like
                    keystrokes.  You will terminate the mode when
                    you use the mouse to do anything like pulling
                    down a menu or reshaping another graphic.

     Magnify        Magnify the part of the drawing specified  by
                    dragging a rectangle to fill the entire view.
                    Idraw limits magnifications to powers of  two
                    between  predefined  minimum and maximum mag-
                    nifications.

     Text           Create some text.  You click where  you  want



Printed 4/10/90            3 Apr 1989                           5






idraw(1)            UNIX Programmer's Manual             idraw(1)



                    to put the first line's upper left corner and
                    then type as much text as you want.   If  the
                    caret  would  go  off  the text's canvas, the
                    text will scroll to keep the  caret  visible.
                    You  may  use  emacs-style keystrokes to edit
                    the text as well as enter it.  You will  ter-
                    minate  the mode and create the text when you
                    use the mouse to do anything.

     Line           Create a line.  The shift key constrains  the
                    line  to  lie  on  either the vertical or the
                    horizontal axis.

     Multi Line     Create a set of connected lines.   The  shift
                    key  constrains each segment to lie on either
                    the vertical or  the  horizontal  axis.   Any
                    button  except  the  left  mouse  button ter-
                    minates the line.

     Open Spline    Create an open B-spline.  The shift key  con-
                    strains  each  control point to lie on either
                    the vertical or the horizontal axis with  the
                    preceding  point.  Any button except the left
                    mouse button terminates the spline.

     Ellipse        Create an ellipse.  The shift key  constrains
                    the ellipse to the shape of a circle.

     Rectangle      Create a rectangle.  The shift key constrains
                    the rectangle to the shape of a square.

     Polygon        Create a polygon.  The shift  key  constrains
                    each  side  to  lie on either the vertical or
                    the horizontal axis.  Any button  except  the
                    left mouse button terminates the polygon.

     Closed Spline  Create a closed B-spline.  The shift key con-
                    strains  each  control point to lie on either
                    the vertical or the horizontal axis with  the
                    preceding  point.  Any button except the left
                    mouse button terminates the spline.

PULLDOWN MENUS
     The pulldown menus File, Edit, Structure, Font, Brush,  Pat-
     tern, FgColor, BgColor, Align, and Option lie across _i_d_r_a_w's
     top.  They contain commands which  you  execute  by  pulling
     down  the menu and releasing the mouse button on the command
     or by typing the character associated with the command.

     The File menu contains the following commands to operate  on
     files:




Printed 4/10/90            3 Apr 1989                           6






idraw(1)            UNIX Programmer's Manual             idraw(1)



     New            Destroy the current drawing  and  replace  it
                    with an unnamed blank drawing.

     Revert         Reread the current  drawing,  destroying  any
                    unsaved changes.

     Open...        Open an existing drawing whose name you type.
                    The  ellipses  after  the  command remind you
                    that it will require additional input.

     Save As...     Save the current drawing in a file whose name
                    you type.

     Save           Save the current drawing in the file it  came
                    from.

     Print...       Print  the  current  drawing  by  sending  it
                    through  a  pipe to a command which you type,
                    such as ``lpr.'' The bold rectangular outline
                    (called  the  _p_a_g_e _b_o_u_n_d_a_r_y) appearing in the
                    drawing area indicates  the  portion  of  the
                    drawing that will appear on the printed page.

     Directory...   Change the current  working  directory  to  a
                    directory that you type in a dialog box.

     The Edit menu contains the following commands to edit graph-
     ics:

     Undo           Undo the last done  change  to  the  drawing.
                    Successive  Undo  commands  undo  earlier and
                    earlier  changes  back  to  the  last  stored
                    change and then do nothing.

     Redo           Redo the last undone change to  the  drawing.
                    Successive Redo commands redo later and later
                    changes up to the first change undone by Undo
                    and  then  do nothing.  Any new changes cause
                    all undone changes to be forgotten.

     Cut            Remove the selected graphics from the drawing
                    and place them in a file called .clipboard in
                    your home directory for later retrieval.

     Copy           Copy the selected  graphics  into  the  clip-
                    board.

     Paste          Paste copies of the graphics in the clipboard
                    into  the  drawing.  Together, Cut, Copy, and
                    Paste allow you to transfer graphics  between
                    multiple  instantiations  of  _i_d_r_a_w simply by
                    cutting graphics out of one view and  pasting



Printed 4/10/90            3 Apr 1989                           7






idraw(1)            UNIX Programmer's Manual             idraw(1)



                    them into another.

     Duplicate      Duplicate the selected graphics and  add  the
                    copies to the drawing.

     Delete         Destroy the selected graphics.

     Select All     Select every graphic within the drawing.

     Flip Horizontal, Flip Vertical
                    Flip the selected graphics into their  mirror
                    images along the horizontal or vertical axes.

     90 Clockwise, 90 CounterCW
                    Rotate  the  selected  graphics  90   degrees
                    clockwise or counterclockwise.

     Precise Move..., Precise Scale..., Precise Rotate...
                    Move, scale,  or  rotate  graphics  by  exact
                    amounts  which you type in a dialog box.  You
                    type movements in  units  of  screen  pixels,
                    scalings in terms of magnifications along the
                    axes, and rotations in degrees.

     The Structure menu contains the following commands to modify
     the  structure  of  the drawing, that is, the order in which
     graphics are drawn:

     Group          Nest the selected graphics in a newly created
                    picture.   A  picture is just a graphic which
                    contains other graphics.  Group allows you to
                    build hierarchies of graphics.

     Ungroup        Dissolve the selected pictures.  Ungroup rev-
                    erses a Group operation.

     Bring To Front Bring the selected graphics to the  front  of
                    the  drawing so that they are drawn on top of
                    (after) the other graphics in the drawing.

     Send To Back   Send the selected graphics to the back of the
                    drawing   so   that  they  are  drawn  behind
                    (before) the other graphics in the drawing.

     Number of Graphics
                    Count and  display  in  a  popup  window  the
                    number   of  selected  graphics,  recursively
                    adding the number of graphics  nested  inside
                    pictures among the selected graphics.  Select
                    All followed by Number of Graphics counts the
                    total number of graphics in the drawing.




Printed 4/10/90            3 Apr 1989                           8






idraw(1)            UNIX Programmer's Manual             idraw(1)



     The Font menu contains a set of fonts with  which  to  print
     text.  When you set the current font from the menu, you will
     also set all the selected graphics' fonts to that  font.   A
     font  indicator  in  the  upper  right  corner  displays the
     current font.

     The Brush menu contains a set of brushes with which to  draw
     lines.   When  you  set the current brush from the menu, you
     will also set all the selected  graphics'  brushes  to  that
     brush.   The  nonexistent  brush  draws  invisible lines and
     nonoutlined graphics.  The arrowhead brushes add  arrowheads
     to  lines',  multi lines', and open splines' starting point,
     ending point, or both.  You  can  freely  stretch  or  scale
     these  graphics  without  affecting the arrowheads' size.  A
     brush indicator  in  the  upper  left  corner  displays  the
     current brush.

     The Pattern menu contains a set of patterns  with  which  to
     fill  graphics  but not text.  Text always appears solid but
     you can use a different color than black to get a  halftoned
     shade.   When you set the current pattern from the menu, you
     will also set all the selected graphics'  patterns  to  that
     pattern.   The  nonexistent  pattern draws unfilled graphics
     while the other patterns draw graphics filled with a  bitmap
     or a halftoned shade.

     The FgColor and BgColor menus contains a set of colors  with
     which  to  draw graphics and text.  When you set the current
     foreground or background color from the FgColor  or  BgColor
     menu,  you  will  also  set all the selected graphics' fore-
     ground or background colors.  The ``on'' bits in the bitmaps
     for  dashed lines and fill patterns appear in the foreground
     color while the ``off'' bits appear in the background color.
     A  black  and  white printer will print a halftoned shade of
     gray for any color other than black or  white.   The  brush,
     pattern, and font indicators all reflect the current colors.

     The Align menu contains  commands  to  align  graphics  with
     other  graphics.   The  first  graphic  selected stays fixed
     while the  other  graphics  move  in  the  order  they  were
     selected  according  to  the  type of alignment chosen.  The
     last Align command, Align  To  Grid,  aligns  each  selected
     graphic's lower left corner with the nearest point in a grid
     of points spaced every 8 printer's points (one ninth  of  an
     inch).

     The Option menu contains the following commands:

     Reduce         Reduce the magnification by a factor  of  two
                    so the drawing's size decreases by half.

     Enlarge        Enlarge the magnification by a factor of  two



Printed 4/10/90            3 Apr 1989                           9






idraw(1)            UNIX Programmer's Manual             idraw(1)



                    so the drawing's size doubles.

     Normal Size    Set the magnification to unity so the drawing
                    appears at actual size.

     Reduce to Fit  Reduce the magnification  until  the  drawing
                    fits entirely within the view.

     Center Page    Center the view over the center of the 8.5 by
                    11 inch page.

     Gridding on/off
                    Toggle the grid's constraining effect  on  or
                    off.   When gridding is on, new graphics will
                    use only grid points as their points,  exist-
                    ing  graphics  will  move  or  scale  only in
                    grid-sized units, and so forth.

     Grid visible/invisible
                    Toggle the grid's visibility on or off.  When
                    visibility  is  on,  _i_d_r_a_w  draws  a  grid of
                    equally spaced points behind the drawing.

     Grid spacing...
                    Change the grid spacing to a value (in  units
                    of  printer's points of which there are 72.07
                    to an inch) that you type in a dialog box.

     Orientation    Toggle the drawing's orientation between por-
                    trait  or landscape and update the page boun-
                    dary to reflect the  drawing's  new  orienta-
                    tion.

PANNER
     _I_d_r_a_w displays a panner, a box containing four  movers,  two
     zoomers, and a slider, in its lower left corner to allow you
     to adjust the view in any way you could want.  See Panner(1)
     for more information on how to use a panner.

FILES
     ~/.clipboard        clipboard file for copy, cut, and paste

SEE ALSO
     pict2ps(1)

BUGS
     _I_d_r_a_w can make the X10 Xqdss server mess up the  display  if
     _i_d_r_a_w  draws large polygons offscreen, such as if you move a
     line that goes off the screen and ends in an arrowhead.   If
     the  X10  server  messes up the screen, you won't be able to
     see anything and you will have to kill the X10 server to use
     the display again.



Printed 4/10/90            3 Apr 1989                          10






idraw(1)            UNIX Programmer's Manual             idraw(1)



     The X10 Xqdss server cannot draw a grid of  points  and  the
     X10  qvss server draws the grid with some incorrect or miss-
     ing points.  _I_d_r_a_w can't do anything about these bugs.

     If you rotate, scale, or stretch text, the text  will  print
     correctly  but _i_d_r_a_w will not show the text correctly on the
     screen.  Neither will the text  change  size  to  correspond
     with  the magnification when you zoom the view.  If you must
     know how long some text is, you must view it at normal  mag-
     nification.  Even so, most fonts will take up more space per
     character on the screen than on the paper when printed.












































Printed 4/10/90            3 Apr 1989                          11






istat(1)            UNIX Programmer's Manual             istat(1)



NAME
     istat - workstation statistics display

SYNOPSIS
     istat  [ IVoptions ] [ -delay # ] [ -host _n_a_m_e ]

DESCRIPTION
     _I_s_t_a_t displays a graphical representation of various  works-
     tation performance statistics.

     The displays are (from left) the current disk transfer rate,
     the  current  network  package  IO  rate, a histogram of the
     recent load average, and a stacked bar graph of the  current
     user,  nice and system CPU usage fractions. The current load
     average is also shown in the banner,  along  with  the  host
     name.

     The window's behaviour can be controlled with the  following
     options :

     IVoptions
             Istat interprets  the  standard  InterViews  command
             line options.

     -host _n_a_m_e
             Show statistics for host name (default is the  local
             host).

     -delay d
             Update the display every d seconds (default is every
             5 seconds).

     To exit, type 'q' in the window.

SEE ALSO
     libInterViews(3I), World(3I), rstatd(8)



















Printed 4/10/90           17 June 1987                          1






iwm(1)              UNIX Programmer's Manual               iwm(1)



NAME
     iwm - window manager

SYNOPSIS
     iwm [ help ]

DESCRIPTION
     _i_w_m  provides  functionality  for  binding  special   window
     management  functions or user commands to chorded mouse but-
     tons or user-definable menu entries.

     The configuration of the window manager is determined by the
     ~/.iwmrc  file.   It  contains  any number of entries of the
     following format:

     _a_c_t_i_v_a_t_o_r _f_u_n_c_t_i_o_n [[*] _m_e_n_u-_t_e_x_t]

     _A_c_t_i_v_a_t_o_r can be:

     a chorded button
             Any combination of  ``shift'',  ``meta'',  ``lock'',
             ``ctrl'',  and  ``logo''  (including  none of these)
             followed by ``left'', ``middle'', or ``right''.  All
             keywords are separated by spaces.  Examples: ``shift
             meta left'', ``middle'', ``logo right''.  Specifying
             ``logo''  redefines  a  button press within the logo
             icon (see below). If no chord is specified, ``meta''
             is assumed.

     the name of a menu
             This may be any single word  (no  double  quotes  or
             spaces allowed).  An entry in the menu is added with
             the text _m_e_n_u-_t_e_x_t.  The _f_u_n_c_t_i_o_n will be  performed
             when  that selection is made from the menu.  See the
             description of sub-menus  below  to  find  out  more
             about what happens when _f_u_n_c_t_i_o_n is also the name of
             a menu (as  well  as  a  description  of  the  ``*''
             option).   If  _f_u_n_c_t_i_o_n  is  one of the ten built-in
             functions, then _m_e_n_u-_t_e_x_t is optional, otherwise, it
             is mandatory.

     _F_u_n_c_t_i_o_n can be:

     a built-in command
             These are the ten predefined operations  the  window
             manager knows how to perform.  See the detailed list
             of these operations below.

     the name of a menu
             This will cause the named menu to "pop-up" when  the
             corresponding _a_c_t_i_v_a_t_o_r is performed.




Printed 4/10/90            5 July 1987                          1






iwm(1)              UNIX Programmer's Manual               iwm(1)



     a shell command
             Must be surrounded by double quotation marks.   This
             can  be  any  shell command.  Note that if the shell
             command has output, then that output  will  be  lost
             unless  you  tell  _i_w_m  NOT  to fork (see .Xdefaults
             options below).

SUB-MENUS
     If both the _a_c_t_i_v_a_t_o_r and the _f_u_n_c_t_i_o_n are a menu, then  the
     _f_u_n_c_t_i_o_n  menu  is  considered a "sub-menu" of the _a_c_t_i_v_a_t_o_r
     menu.  There are two  types  of  sub-menus:  persistent  and
     non-persistent.

     A persistent menu will  not  pop-up  until  it  is  actually
     selected  (by  releasing  the  mouse  button).   Once it has
     popped up, it's parent will go away, and it will not go away
     until  a selection is made, or until the mouse is clicked on
     the background.

     A non-persistent menu will appear if the  mouse  moves  from
     the  left part of the menu selection which activates it into
     the right part.  It will then pop-up, and will  go  away  as
     soon as the mouse leaves its borders.  If the parent menu is
     also non-persistent, then, if the mouse leaves  the  borders
     of  the  child  and does not return to within the borders of
     the parent, both the child and the parent menu  will  disap-
     pear.

     It is common practice to  have  a  top-level  menu  be  per-
     sistent,  and  the  children  be  either  persistent or non-
     persistent to suit individual taste.  In the  sample  .iwmrc
     (see  below),  the "done" menu is persistent.  Menus are, by
     default, non-persistent.  Placing a ``*'' before  the  _m_e_n_u-
     _t_e_x_t makes a menu persistent.

BUILT-IN OPERATIONS
     Here are the built-in operations currently supported by  the
     window manager:

     Move    Move a window by "grabbing" and moving it  with  the
             mouse.  The command can be aborted by clicking again
             before releasing the mouse button.

     Resize  Resize the window by "grabbing" a corner or an  edge
             with  the  mouse  and moving it.  The command can be
             aborted by clicking again before releasing the mouse
             button.

     Redraw  Redraw the entire screen.

     Repair  Redraw a portion of the screen specified by dragging
             out a rectangle.



Printed 4/10/90            5 July 1987                          2






iwm(1)              UNIX Programmer's Manual               iwm(1)



     Raise   Raise a window (chosen with the mouse) to the top of
             the pile of windows on the screen.

     Lower   Lower a window (chosen with the mouse) to the bottom
             of the pile of windows on the screen.

     Focus   Choose a window (with the mouse) to gain control  of
             the  keyboard.   The  chosen window will receive all
             future keyboard  events  until  focus  is  given  to
             another  window or until focus is given to the back-
             ground.

     Lock    Locks the screen.  Puts up a message and  waits  for
             user's password to unlock the screen (the root pass-
             word will also unlock the screen).

     Iconify Turns the window into an Icon (if the window has  an
             Icon).   If  the  selected window is itself an Icon,
             then it will be converted back to its original  form
             (and  position).   When  a  window is iconified, the
             icon is put at the current mouse position.

     Exit    Exits the window manager.

     Null    Does nothing.

EXAMPLE
     The best way to see how the .iwmrc file works is to look  at
     /usr/local/lib/iwmrc.default.  This is the .iwmrc which will
     be used if there is no .iwmrc in the user's home  directory.
     Start  up  _i_w_m  and  see  how  it behaves, then compare that
     behaviour to /usr/local/lib/iwmrc.default.  It is reproduced
     here:

     left      Move
     middle         commands *
     right          menu *
     menu      Focus
     menu      Lower
     menu      Raise
     menu      Redraw
     menu      Iconify
     menu      Lock
     menu      Resize
     commands  "idraw -l"          idraw -l
     commands  "idraw -s"          idraw -s
     commands  "xterm =80x24"      Shell
     commands  "dclock -f -j"      Clock
     commands  done *              Exit
     done      Exit           Really exit?
     done      Null           No, don't exit.




Printed 4/10/90            5 July 1987                          3






iwm(1)              UNIX Programmer's Manual               iwm(1)



CONVENIENCE
     If any button has only one chord combination, then that but-
     ton  will  work with or without chording.  If an application
     is listening for a button, however, you may have to use  the
     chording  to  force  the  button events to get to the window
     manager (since using chording will ALWAYS  work:  not  using
     chording is simply a convenience).

     Clicking a non-chorded button that normally pops up  a  menu
     while  you  are on top of some icons will cause that icon to
     deiconify itself.  This will only work with icons  that  are
     created  from  the  name  of  the  window or icons which the
     applications  have  specially  designed  to  work  in   this
     fashion.

OPTIONS
     There is only one command line argument  to  _i_w_m,  ``help'',
     which displays a brief description of how to use _i_w_m.

PARAMETERS
     _i_w_m understands the following entries in .Xdefaults:

     iwm.fork
             If ``true'' _i_w_m will fork when it starts  up.   This
             should  be  set  to  ``false''  if some user-defined
             function has output (since if fork is true, then _i_w_m
             will be disassociated with its terminal and will not
             be able to output).  The default is ``true''.

     iwm.logo
             An X geometry specification.  The logo  is  used  to
             remind  the  user  that _i_w_m is running.  Also, mouse
             button clicks within the logo can be  distinct  from
             clicks elsewhere by specifying the ``logo'' chording
             modifier in the ~/.iwmrc file.  Only  the  width  of
             the  logo  need  be  specified  (and not the height)
             since it is square.  A size of 0  will  prevent  the
             logo from begin displayed.  The default logo will be
             scaled to fit the specified size.  If a bitmap  logo
             is used the bitmap will be centered on a blank back-
             ground of the specified size.  Sizes of the form 13n
             +  1  where n is an integer greater than 3 work best
             for the default logo.  The default geometry is  =53-
             4+4.

     iwm.bitmap
             Specifies a bitmap(1) file to be used in  construct-
             ing a bitmapped logo instead of the default logo.

     iwm.inverse
             If ``true'', the menus, logo, and lock message  will
             be white on black rather than black on white.



Printed 4/10/90            5 July 1987                          4






iwm(1)              UNIX Programmer's Manual               iwm(1)



     iwm.lock
             If ``true'', then, when the screen is locked  (using
             Lock  above),  the  X  screen-saver will continue to
             function (by inhibiting the output of  all  programs
             on  the  desktop.   If ``false'', programs will con-
             tinue to output even while the  desktop  is  locked.
             Default: ``false''.

     iwm.ignorecaps
             If ``true'', buttons will continue to perform  their
             designated  function  even  if the Shift-Lock key is
             engaged (note that the shift lock  key  is  a  valid
             chord  when  designating  an activator, e.g., ``lock
             ctrl left'').

     iwm.font
             The named font will be used for text  in  _i_w_m  menus
             and the lock message.

     iwm.snapresize
     iwm.constrainresize
             These options modify the  behaviour  of  the  rubber
             band used in the resize operation.  If _s_n_a_p_r_e_s_i_z_e is
             ``true'' the rubber band will snap a corner or  edge
             to  the  mouse  position;  if  it  is ``false'' (the
             default) the relative position of the  mouse  within
             the  window  will  be  kept constant.  If _c_o_n_s_t_r_a_i_n_-
             _r_e_s_i_z_e is ``true'' (the default) the  resize  opera-
             tion can be constrained to one dimension by grabbing
             the window near the center of  an  edge;  if  it  is
             ``false'' only corners can be grabbed.

FILES
     ~/.Xdefaults   parameters
     ~/.iwmrc       menu definitions




















Printed 4/10/90            5 July 1987                          5






mailbox(1)          UNIX Programmer's Manual           mailbox(1)



NAME
     mailbox - incoming mail display

SYNOPSIS
     mailbox [ options ] [ font=_n_a_m_e ] [ mailbox=_p_a_t_h ]

DESCRIPTION
     _M_a_i_l_b_o_x is a monitor of incoming mail.  It can indicate  the
     arrival  of  new  mail  in  three  ways:   by highlighting a
     ``flag'', by displaying the sender and subject of  new  mail
     in  a  window,  or  by sounding the workstation bell. Any of
     these may optionally be turned off.

     The mailbox window's behaviour and  placement  can  be  con-
     trolled with the following options:

     font=_n_a_m_e
          Use font _n_a_m_e for the text and flag.

     mailbox=_p_a_t_h
          Check the file _p_a_t_h for incoming mail (default is  con-
          structed by appending the user's login name to the path
          /usr/spool/mail)

     pos=_x,_y
          Position the lower left corner at (_x,_y) relative to the
          screen  lower left corner (default is to place with the
          mouse).

     rows=_r
          Make the window high enough to show the most  recent  _r
          mail headers (default is 4).

     cols=_c
          Make the window wide enough  to  display  _c  characters
          (default 45).

     size=_w,_h
          Set the width of the window to _w pixels and the  height
          to  _h  pixels.  This option overrides the _r_o_w_s and _c_o_l_s
          options.

     delay=_N
          Check the mailbox file every _N seconds (default  is  60
          seconds).

     noflag
          Don't display the ``flag'' (banner).

     notext
          Don't display the ``text'' (headers) of incoming  mail.
          Note that only one of the options _n_o_f_l_a_g and _n_o_t_e_x_t can



Printed 4/10/90           17 June 1987                          1






mailbox(1)          UNIX Programmer's Manual           mailbox(1)



          be used.

     count
          Display a count of the number of unread mail  items  in
          the  flag  (default is for the flag to contain ``Mail''
          or ``M'', depending on space).

     silent
          Don't ring the workstation bell when new mail arrives.

     new

     unread
          Only display new (never seen), or unread  (never  read)
          mail.  The default is to show all mail in the mailbox.

SEE ALSO
     mail(1)





































Printed 4/10/90           17 June 1987                          2






pages(1)            UNIX Programmer's Manual             pages(1)



NAME
     pages - structured text demo program

SYNOPSIS
     pages [ textfile ]

DESCRIPTION
     _P_a_g_e_s is a simple program  that  demonstrates  many  of  the
     features of InterViews structured text objects.  The program
     displays a view of several pages of formatted text including
     prose, headings, and program source code.  Resizing the view
     illustrates the way the text is  automatically  composed  to
     fill the available space.

     Simple interaction  with  the  text  is  also  demonstrated.
     Clicking on various parts of the text selects different text
     objects.  For example, clicking on  a  word  in  a  sentence
     selects  that word, clicking between words selects the whole
     sentence, and clicking between sentences selects  the  whole
     paragraph.   Clicking in the source code text selects a syn-
     tactically meaningful unit such as a statement,  a  declara-
     tion, or a parameter.

     Limited editing of the text can be performed,  with  dynamic
     recomposition  of  the  text  objects.   When  an  object is
     selected, the  backspace  or  delete  key  will  delete  the
     object,  while  the  space  or  return key will insert a new
     editable word and enter character editing mode.  In  charac-
     ter  editing mode, characters entered from the keyboard will
     be added to the selected word, and  simple  editing  of  the
     word  can be performed.  The backspace and delete keys erase
     the previous character, and the ^F  and  ^B  keys  move  the
     insertion  point  forwards and backwards.  A space or return
     character begins a new word.  Selecting a  different  object
     exits character edit mode.

     Editing the text is a good way to see how  text  composition
     objects operate.  For example, editing text in a list object
     demonstrates the automatic insertion of separators  and  the
     way the list is broken across multiple lines.

     The _p_a_g_e_s source code is also an example of the  way  Inter-
     Views structured text objects can be used in an application.
     The code is separated into several  files.   In  particular,
     _p_a_g_e_s._c contains the user interface code, and _a_u_x._c contains
     the code that builds the hierarchy of text objects.

     The specific text displayed is read from the file _p_a_g_e_s._t_e_x_t
     in  the  current  directory.  Alternatively, the file can be
     specified as an  option  on  the  command  line  or  in  the
     environment  variable  _P_A_G_E_S_T_E_X_T.   Examine the default file
     _p_a_g_e_s._t_e_x_t  in  the  pages  source  directory  to  see   the



Printed 4/10/90          1 January 1988                         1






pages(1)            UNIX Programmer's Manual             pages(1)



     structure of the file.

SEE ALSO
     Text(3I), Layout(3I), TextBlock(3I)



















































Printed 4/10/90          1 January 1988                         2






remind(1)           UNIX Programmer's Manual            remind(1)



NAME
     remind - a simple reminder service

SYNOPSIS
     remind [ _t_i_m_e ] [ _m_e_s_s_a_g_e ]

DESCRIPTION
     _R_e_m_i_n_d implements  a  simple  reminder  service  similar  to
     _c_a_l_e_n_d_a_r(1),  but  uses  _a_l_e_r_t(1)  instead of _m_a_i_l(1).  Rem-
     inders can be specified from the command line, or _r_e_m_i_n_d can
     extract  information  from  a file in the user's home direc-
     tory.  In the latter case, _r_e_m_i_n_d first looks for  the  file
     _r_e_m_i_n_d_e_r_s, then for the file _c_a_l_e_n_d_a_r.

     If the _t_i_m_e argument is specified on the command line,  _r_e_m_-
     _i_n_d will post a reminder at that time.  The text of the rem-
     inder can be specified in the _m_e_s_s_a_g_e argument, or read from
     standard  input.  The _t_i_m_e specification is as for the _a_t(1)
     command, except that a day of the week or "week"  option  is
     not  allowed.   Times  after  the  "present" refer to today;
     specifying a time before the time of execution will cause  a
     reminder to be posted for "tomorrow".

     Typical examples of the use of _r_e_m_i_n_d in this mode are

             remind 1230pm "Lunch time."
             cat dailyreminders | remind 9am

     If _r_e_m_i_n_d is executed with no arguments, it will search  the
     file  _r_e_m_i_n_d_e_r_s or _c_a_l_e_n_d_a_r in the user's home directory for
     references to today's date, and post reminders for all  such
     references that mention a time.  The following forms of time
     are acceptable;

             9:30, 9:30am, 9:30 am, 9:30pm, 9:30 pm, 21:30.

     Entries in the reminders file can contain dates  in  various
     forms,  including those acceptable to _c_a_l_e_n_d_a_r(1).  In addi-
     tion, _r_e_m_i_n_d will recognize lines containing forms  such  as
     "every  Wednesday" and "every day".  Abbreviations for month
     and day names are accepted.  _R_e_m_i_n_d filters the file through
     the  "C"  preprocessor  _c_p_p, so other files such as a shared
     calendar file can be #included.

     Text from  the  reminders  file  is  also  filtered  through
     _n_r_o_f_f(1) before it is sent to _a_l_e_r_t(1).  This allows various
     useful types of formatting, such as word wrapping,  justifi-
     cation  and  centering,  to  be  performed.   Another useful
     consequence is that text can be "hidden"  from  _a_l_e_r_t(1)  by
     enclosing  it  in an _n_r_o_f_f(1) comment.  This is particularly
     useful for text which is needed to flag a time or date,  but
     which  need  not  appear in the reminder.  _N_r_o_f_f(1) commands



Printed 4/10/90           27 April 1987                         1






remind(1)           UNIX Programmer's Manual            remind(1)



     can be included in the text, if care is taken  with  various
     troublesome  characters  such  as  '  and  \.  To facilitate
     _n_r_o_f_f(1) formatting,  several  character  substitutions  are
     made on the text before it goes to _n_r_o_f_f(1).  Specifically,

             ; is replaced with a newline
             character \001 is replaced with '
             character \002 is replaced with ;
             character \003 is replaced with \

     _R_e_m_i_n_d uses _a_t(1) to schedule the reminders, so  the  granu-
     larity of the reminders will be determined by that of _a_t(1).

FILES
     ./reminders         file  to  be  searched   for   reminders
     ./calendar          alternate reminders file

SEE ALSO
     alert(1), at(1), calendar(1), cron(8), nroff(1)




































Printed 4/10/90           27 April 1987                         2






spaceman(1)         UNIX Programmer's Manual          spaceman(1)



NAME
     spaceman - object space manager

SYNOPSIS
     spaceman [ -d ] [ -s dir ]

DESCRIPTION
     _S_p_a_c_e_m_a_n is a  server  that  enables  object  spaces  to  be
     accessed  by  name.  The -d option enables certain debugging
     output.  The protocol for  communicating  with  _s_p_a_c_e_m_a_n  is
     defined and implemented by _S_p_a_c_e_M_a_n_a_g_e_r(3I).

     When a server registers with _s_p_a_c_e_m_a_n, it assigns the server
     a  Unix-domain  socket for communication with clients on the
     same machine and a TCP port number  for  communication  with
     remote  clients  (port  assignment  is  not currently imple-
     mented).  File system entries for local sockets are normally
     kept in the directory ``/tmp/.allegro''; this can be overri-
     den with the ``-s'' option.

FILES
     /tmp/.allegro  directory for local-domain sockets

SEE ALSO
     liballegro(3I)






























Printed 4/10/90         9 September 1988                        1






squares(1)          UNIX Programmer's Manual           squares(1)



NAME
     squares - InterViews demo program

SYNOPSIS
     squares

DESCRIPTION
     _S_q_u_a_r_e_s is a simple program that demonstrates  many  of  the
     features  of InterViews.  Running this program will give you
     a feel for  the  capabilities  of  InterViews  and  for  the
     default styles of interactive objects.  Studying the _s_q_u_a_r_e_s
     source code can help explain some of the specific details of
     the InterViews classes.

     Initially, _s_q_u_a_r_e_s creates  a  single  view  of  a  list  of
     squares.   The banner at the top of the view displays infor-
     mation about the version of the program.  The view  is  sur-
     rounded  by  a  border frame, which indicates whether or not
     the program is the focus of user input.  The border is drawn
     with a solid pattern if _s_q_u_a_r_e_s has input focus; otherwise a
     stippled pattern is used.

     The squares view is contained in a viewport, which  controls
     what part of the view is visible.  Resizing the squares win-
     dow will make more or less of the squares view visible.  The
     viewport paints regions outside the view's boundaries with a
     stippled pattern.  _S_q_u_a_r_e_s provides several ways to  perform
     operations on the viewport to adjust the visible part of the
     view.  Pressing the right mouse button pops up a  menu  that
     can  be used to zoom in or out on the view, to restore it to
     normal size, or to center it within the viewport.  The  ini-
     tial squares view also contains a pair of scrollers that can
     be used to adjust the view if it is not completely visible.

     Pressing the middle mouse button pops up the _s_q_u_a_r_e_s command
     menu.   Commands  are  provided  to  add a new square to the
     list, to create a new squares view, to modify the appearance
     of  the  frame around the view, to close a squares view, and
     to quit the program.  Note that  closing  the  last  squares
     view  is  equivalent  to  quitting.   Each squares view is a
     representation of the same list of squares; a new square can
     be  added  through  any  view  and will appear in all views.
     However, modifying the appearance of one view  or  adjusting
     its viewport will not affect the appearance of other views.

     Selecting ``view setup''  from  the  command  menu  opens  a
     ``meta-view''  for  modifying  the appearance of the squares
     view frame.   Several  characteristics  of  the  interactive
     adjusters  can be specified, including their type (scrollers
     or panner), size (small, medium, or large), and position  in
     the  view.  When the ``accept'' button is pressed, the frame
     is reconstructed with the desired characteristics.  Pressing



Printed 4/10/90          16 August 1988                         1






squares(1)          UNIX Programmer's Manual           squares(1)



     the ``cancel'' button leaves the frame unaltered.

IMPLEMENTATION
     The _s_q_u_a_r_e_s implementation consists of a main  program  file
     (``main.c'')  and  a  pair  of  files  for  each of the four
     classes: squares, a list of varying  size  squares,  squares
     view,  a  display  of  the squares, squares frame, the frame
     around a view, and squares meta view, a dialog box for  cus-
     tomizing  a view's frame.  Each class is defined in a header
     file (e.g., ``view.h''), and the methods are implemented  in
     a corresponding .c file (``view.c'').

     The squares class is derived from subject.  A  subject  con-
     tains  a  list  of  its  views  so that all the views can be
     updated when the subject is modified.  When a new square  is
     added,  the subject operation ``Notify'' is called to update
     the views.

     The implementation of squares view includes code to attach a
     new  view  to the squares subject, to detach a view about to
     be deleted, and to redraw the display of the squares.   When
     a new square is added, the squares subject calls ``Update''.

     Squares frame serves two purposes: it constructs  the  frame
     around  a  squares view, including the banner and adjusters,
     and it handles user input.  The appearance of the  frame  is
     determined  by  a set of style parameters.  Modifications to
     the frame's  appearance  are  specified  by  altering  style
     parameters  (using  the meta-view) and rebuilding the frame.
     A squares frame constructs the menus that are used for  user
     input.  It also creates the meta-view that provides customi-
     zation.

     Squares meta view encapsulates  the  style  parameters  that
     specify  the  appearance  of  a squares frame.  It is imple-
     mented as a dialog containing a set of  buttons  that  allow
     the user to interactively modify the style.  The buttons are
     composed with boxes and glue so that the dialog maintains  a
     pleasant  appearance  for a range of sizes.  To see the glue
     stretch or shrink, try resizing the dialog.

     The main program creates a squares object and a frame (which
     contains  a  view) and inserts the frame into the world.  It
     then calls  ``Run'',  which  simply  reads  and  distributes
     events in an infinite loop.

SEE ALSO
     Banner(3I),  Button(3I),   Box(3I),   Frame(3I),   Glue(3I),
     Menu(3I), Panner(3I), Scene(2I), Scroller(3I), World(3I)






Printed 4/10/90          16 August 1988                         2






sted(1)             UNIX Programmer's Manual              sted(1)



NAME
     sted - simple text editor demo program

SYNOPSIS
     sted _f_i_l_e_n_a_m_e ...

DESCRIPTION
     _S_t_e_d is a simple text editor that illustrates the use of the
     TextEditor  and  TextBuffer  classes.  Multiple files can be
     edited in separate windows.  Initially, windows  are  opened
     on  each  file  specified  on the command line.  Sted is not
     intended to be a complete editor and cannot  save  modifica-
     tions to a file.

EDITING MODEL
     Sted implements a small subset of editing commands using  an
     editing  model  similar  to emacs.  Each window has a single
     text selection that is displayed with reversed  colors.   If
     the  selection  is  empty,  an  insertion caret is displayed
     instead.  Characters typed into a window replace the current
     contents of the selection.

     Currently defined commands include

     quit Close all windows and exit

     close
          Close this window

     visit <filename>
          Open a new window on _f_i_l_e_n_a_m_e

     file <filename>
          Edit _f_i_l_e_n_a_m_e in the current window

     search <regexp>
          Search forward for a match with the regular  expression
          _r_e_g_e_x_p,  wrapping  from the end to the beginning of the
          buffer if necessary.

     goto <line>
          Move the insertion point to the beginning of line _l_i_n_e,
          scrolling the display if necessary.

     Commands are issued by clicking and  typing  in  the  'mini-
     buffer' at the bottom of the window.

MOUSE BINDINGS
     The left mouse button is used to select text.  Clicking  the
     left  button  in  the  text  window  selects a new insertion
     point; dragging the button selects a range of text.  If  the
     mouse is dragged outside the window, the display is scrolled



Printed 4/10/90            24 May 1989                          1






sted(1)             UNIX Programmer's Manual              sted(1)



     to keep the selection point in view.

     The middle and right mouse buttons illustrate different ways
     of  scrolling with the mouse.  Of course, scrolling can also
     be performed using the scroller in the normal way.  The mid-
     dle  mouse  button  does  'grabber' scrolling.  Clicking and
     dragging the middle button causes the  text  to  move  along
     with  the  mouse.   This  scrolling style is useful for fine
     control over small scrolling ranges.  The right mouse button
     does  'rate'  scrolling.  Clicking with the right button and
     'pulling back' on  the  mouse  causes  the  text  to  scroll
     upwards  at  a  rate dependent on the position of the mouse.
     'Pushing forward' causes downwards scrolling.  This style of
     scrolling  is  useful  for  rapidly scanning through a large
     document.

KEYBOARD BINDINGS
     For convenience, many operations can be performed  from  the
     keyboard.   These operations include scrolling, cursor move-
     ment, and command execution.   The current keyboard bindings
     mimic similar bindings in standard emacs.

     (ESC-V)
          backward page

     (^V) forward page

     (^P) backward line

     (^N) forward line

     (^B) backward character

     (^F) forward character

     (ESC-<)
          beginning of buffer

     (ESC->)
          end of buffer

     (^A) beginning of line

     (^E) end of line

     (^D) delete character

     (DEL) (^H)
          delete backward character

     (ESC-=)
          goto



Printed 4/10/90            24 May 1989                          2






sted(1)             UNIX Programmer's Manual              sted(1)



     (^S) search

     (^X-^V)
          visit

     (^X-^F)
          file

     (^X-K)
          close

     (^X-^C)
          quit

SEE ALSO
     TextBuffer(3I), TextEditor(3I), StringEditor(3I), Regexp(3I)







































Printed 4/10/90            24 May 1989                          3


