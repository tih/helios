


libgraphic(3I)      UNIX Programmer's Manual       libgraphic(3I)



NAME
     libgraphic - InterViews structured graphics library

SYNOPSIS
     #include <InterViews/Graphic/_c_l_a_s_s.h>
     CC ... -lgraphic -lInterViews -lX -lm

DESCRIPTION
     The _l_i_b_g_r_a_p_h_i_c library provides a set of classes for  defin-
     ing  persistent  structured  graphics.   Graphic is the base
     class for structured graphics  objects;  prederived  classes
     classes  include  simple  graphical objects (Point, Ellipse,
     Spline, Label, etc.), a composite object (Picture),  and  an
     object  that  is  a  variation on another object (Instance).
     Each graphic can be  manipulated  and  transformed  indepen-
     dently  of others.  Functions are provided for computing the
     graphic's bounding box and whether or not  it  intersects  a
     given point or rectangle.

     Graphics are persistent in that each defines  a  representa-
     tion of itself that can be automatically written to and read
     from disk.  The Graphic class is  derived  from  Persistent,
     described in Persistent(3I), which provides this functional-
     ity in a general persistent object class.  Graphics use per-
     sistent  paint  objects  that  are  analogous  to  the paint
     objects used by  painters.   Persistent  paint  objects  are
     defined in <InterViews/Graphic/ppaint.h>.

     Graphic(3I) contains all you need to know to use Graphic and
     derived  classes  without  the persistence feature.  If per-
     sistent  graphics  are  required,  then  you   should   read
     Persistent(3I).

     The _l_i_b_g_r_a_p_h_i_c provides two additional classes for use  with
     structured  graphics  objects.   Damage supports incremental
     redraw of graphical objects whose appearance has been  modi-
     fied.   GraphicBlock is an interactor that displays a struc-
     tured graphics object.  A GraphicBlock interprets a perspec-
     tive  to  allow scrolling and zooming of the graphic it con-
     tains.

SEE ALSO
     libInterViews(3I)












Printed 4/10/90           31 July 1988                          1






Damage(3I)          UNIX Programmer's Manual           Damage(3I)



NAME
     Damage - manages and repairs damage to graphics

SYNOPSIS
     #include <InterViews/Graphic/damage.h>

DESCRIPTION
     Damage is a class that keeps track of and  repairs  portions
     of  a  graphic that have been _d_a_m_a_g_e_d, that is, that need to
     be redrawn.  A graphic is  damaged  when  its  (component's)
     appearance  changes.   Damage  objects  try  to minimize the
     amount of redraw needed to repair a graphic.  They are  most
     useful  when the graphic is complicated enough that it would
     be undesirable to redraw the entire canvas when the  graphic
     is  modified.   Damage objects do _n_o_t eliminate the need for
     an interactor's _R_e_d_r_a_w member function, though they could be
     used to implement it.


PUBLIC OPERATIONS
     Damage(Canvas* = nil, Painter* = nil, Graphic* = nil)
          Create a new Damage object for a graphic on  the  given
          canvas.   The  painter  is  used to erase damaged areas
          using its ClearRect function prior to redrawing them.

     void Incur(Graphic*)
     void Incur(BoxObj&)
     void Incur(Coord left, Coord bottom, Coord right, Coord top)
          Notify the damage object that a  rectangular  area  has
          been  damaged,  either by passing the graphic that con-
          tributed the area or the area itself.

     void Repair()
          Repair all damage incurred since the  last  Repair  (or
          since  the  damage  object  was  created if this is the
          first Repair).

     void Added(Graphic*)
          Notify the damage object that  the  given  graphic  was
          appended (_n_o_t inserted) to the graphic but never drawn.
          The damage object can thus be responsible  for  drawing
          newly added graphics as well.

     void Reset()
          Reset the damage object.  Any damage incurred is lost.

     boolean Incurred()
          Returns true if any damage has been incurred.

     void SetCanvas(Canvas*)
     void SetPainter(Painter*)
     void SetGraphic(Graphic*)



Printed 4/10/90          17 January 1988                        1






Damage(3I)          UNIX Programmer's Manual           Damage(3I)



     Canvas* GetCanvas()
     Painter* GetPainter()
     Graphic* GetGraphic()
          Set and get attributes of the damage object.

SEE ALSO
     libgraphic(3I)
















































Printed 4/10/90          17 January 1988                        2






Graphic(3I)         UNIX Programmer's Manual          Graphic(3I)



NAME
     Graphic - persistent structured graphics objects

SYNOPSIS
     #include <InterViews/graphic.h>
     #include <InterViews/Graphic/ellipses.h>
     #include <InterViews/Graphic/instance.h>
     #include <InterViews/Graphic/label.h>
     #include <InterViews/Graphic/lines.h>
     #include <InterViews/Graphic/picture.h>
     #include <InterViews/Graphic/polygons.h>
     #include <InterViews/Graphic/rasterrect.h>
     #include <InterViews/Graphic/splines.h>
     #include <InterViews/Graphic/stencil.h>


DESCRIPTION
     This manual page describes the Graphic base class for struc-
     tured  graphics  objects and the derived classes provided by
     the _l_i_b_g_r_a_p_h_i_c library.  See libgraphic(3I)  for  a  general
     overview of the library.

STATE OPERATIONS
     Graphic(Graphic* = nil)
          Create a  new  graphic  having  a  copy  of  the  given
          graphic's state. All state values are set to nil (unde-
          fined) by default.

     virtual Graphic* Copy()
          Returns an exact duplicate of the graphic.  This  func-
          tion   should  be  redefined  in  user-derived  graphic
          classes to guarantee these semantics.

     void SetBrush(PBrush*)
     PBrush* GetBrush()
          Set or return the graphic's brush.

     void SetColors(PColor* fg, PColor* bg)
     PColor* GetFgColor()
     PColor* GetBgColor()
          Set or return the graphic's colors.

     void SetFont(PFont*)
     PFont* GetFont()
          Set or return the graphic's label font.

     void SetPattern(PPattern*)
     PPattern* GetPattern()
     void FillBg(boolean mode)
     boolean BgFilled()
          Set or return the graphic's fill pattern and mode.   If
          the  mode  is  _t_r_u_e,  fill  operations  will set pixels



Printed 4/10/90          7 December 1987                        1






Graphic(3I)         UNIX Programmer's Manual          Graphic(3I)



          corresponding to 1's in the current fill pattern to the
          foreground color and pixels corresponding to 0's to the
          background color.  If _f_a_l_s_e, then only foreground  pix-
          els will be set.  The default mode is _t_r_u_e.

     Graphic* Parent()
     virtual boolean HasChildren()
          Parent returns the graphic's parent, if any.   HasChil-
          dren  returns  _f_a_l_s_e by default; it should be redefined
          if a subclass should provide this information.

     void SetTag(Ref)
     Ref GetTag()
          Set or return a tag associated with the graphic.

     virtual Graphic& operator = (Graphic&)
          The assignment  operator  is  overloaded  to  copy  the
          passed graphic's graphic state into this object's.

     void Translate(float dx, float dy)
     void Rotate(float angle, float cx = 0.0, float cy = 0.0)
     void Scale(float x, float y, float cx = 0.0, float cy = 0.0)
     void SetTransformer(Transformer*)
     Transformer* GetTransformer()
     void TotalTransformation(Transformer&)
          Coordinates   passed   to   drawing   operations    are
          transformed according to the current translation (cumu-
          lative), rotation, and scale factor.  Optionally, scal-
          ing  and  rotation can be performed relative to a point
          (_c_x,  _c_y).   Internally,  a  transformation  matrix  is
          stored that can be directly set and accessed using Set-
          Transformer   and    GetTransformer.     The    default
          transformer is nil, meaning no transformations are per-
          formed.  TotalTransformation postmultiplies  the  given
          transformer by the total transformation incurred by the
          graphic's parents, if any.

          Unless otherwise noted, input  and  output  coordinates
          are  relative  to  the coordinate system defined by the
          graphic's transformer.

float& top)
     virtual void GetBounds(float& left, float& bottom, float&  right,
          Return  the  exact coordinates of the smallest box cir-
          cumscribing the graphic.   The  return  values  are  in
          absolute coordinates.

     void GetBox(Coord& left, Coord& bottom, Coord& right, Coord& top)
     void GetBox(BoxObj&)
          Return the smallest box circumscribing the graphic,  in
          Coords.  The return values are in absolute coordinates.
          A BoxObj represents a rectangle defined by  lower  left



Printed 4/10/90          7 December 1987                        2






Graphic(3I)         UNIX Programmer's Manual          Graphic(3I)



          and  upper  right  coordinates.   BoxObj  is defined in
          <InterViews/Graphic/geomobjs.h>.

     virtual void GetCenter(float& x, float& y)
          Return the center point  of  the  graphic  in  absolute
          coordinates.

     virtual boolean Contains(PointObj&)
     virtual boolean Intersects(BoxObj&)
          Return whether or not the graphic  contains  the  given
          point  or  intersects the given rectangular area speci-
          fied in absolute  coordinates.   PointObj,  defined  in
          <InterViews/Graphic/geomobjs.h>, describes a point.

     void Align(Alignment, Graphic*, Alignment)
          Position the  given  graphic  relative  to  _t_h_i_s.   The
          graphic  that performs the operation stays fixed, while
          the graphic supplied  as  the  argument  is  translated
          appropriately.  The first Alignment parameter specifies
          the alignment with respect to _t_h_i_s,  while  the  second
          specifies  the  alignment  with  respect  to  the given
          graphic.

DRAWING OPERATIONS
     virtual void Draw(Canvas*)
     virtual void Erase(Canvas*)
          Draw draws the graphic on the given  canvas  using  its
          current state.  Erase erases the graphic by temporarily
          setting its foreground color equal  to  its  background
          color and then drawing it.

Coord top)
     virtual void Draw(Canvas*, Coord left, Coord bottom, Coord right,
right, Coord top)
     virtual  void  Erase(Canvas*,  Coord  left,  Coord  bottom, Coord
          Draw  or  erase  the  graphic  on the canvas within the
          given bounding box, specified in absolute  coordinates,
          without  using  fine clipping.  The bounding box should
          be used simply as a hint about the  graphic's  visibil-
          ity.

right, Coord top)
     virtual void DrawClipped(Canvas*, Coord left, Coord bottom, Coord
Coord right, Coord top)
     virtual  void  EraseClipped(Canvas*,  Coord  left,  Coord bottom,
          Draw or erase the graphic on the canvas strictly within
          the given bounding box, specified in  absolute  coordi-
          nates.

DERIVED CLASSES AND OPERATIONS
     The following derived class are predefined.  In addition  to
     the  inherited  operations,  each  derived  class  defines a



Printed 4/10/90          7 December 1987                        3






Graphic(3I)         UNIX Programmer's Manual          Graphic(3I)



     GetOriginal(...) operation that returns the values  supplied
     to the constructor when the object was created.

     Point(Coord x, Coord y, Graphic* graphic = nil)
nil)
     Line(Coord x0, Coord y0, Coord x1, Coord y1, Graphic*  graphic  =
     MultiLine(Coord* x, Coord* y, int n, Graphic* graphic = nil)
          Define a point, line, or set of connected lines at  the
          specified coordinates, optionally having the same state
          as the given graphic.  MultiLine's  constructor  copies
          the  arrays  of  Coords  that  define its vertices, and
          MultiLine's GetOriginal operation returns a copy of the
          stored arrays.  MultiLine also defines == and != opera-
          tors that compare the vertices of one instance  against
          another's;   two  MultiLine  instances  are  considered
          equivalent if they share the same vertices.

nil)
     Ellipse(Coord x0, Coord y0, int r1, int r2,  Graphic*  graphic  =
= nil)
     FillEllipse(Coord  x0, Coord y0, int r1, int r2, Graphic* graphic
          Define  an  ellipse  or  filled  ellipse with center at
          (_x_0,_y_0) and radii _r_1 and _r_2.

     Circle(Coord x0, Coord y0, int radius, Graphic* graphic = nil)
nil)
     FillCircle(Coord  x0,  Coord  y0,  int radius, Graphic* graphic =
          Define a circle or filled circle with center at (_x_0,_y_0)
          and radius _r_a_d_i_u_s.

nil)
     Rect(Coord x0, Coord y0, Coord x1, Coord y1, Graphic*  graphic  =
= nil)
     FillRect(Coord x0, Coord y0, Coord x1, Coord y1, Graphic* graphic
          Define a rectangle or filled rectangle at the specified
          coordinates.

     Polygon(Coord* x, Coord* y, int n, Graphic* graphic = nil)
     FillPolygon(Coord* x, Coord* y, int n, Graphic* graphic = nil)
          Define  a  polygon or filled polygon specified by the _n
          vertices.  The vertex semantics are the same  as  those
          for MultiLine.

     BSpline(Coord* x, Coord* y, int n, Graphic* graphic = nil)
     ClosedBSpline(Coord* x, Coord* y, int n, Graphic* graphic = nil)
     FillBSpline(Coord* x, Coord* y, int n, Graphic* graphic = nil)
          Define  a B-spline specified by the _n control vertices.
          If closed or filled, the last point is connected to the
          first  point.   The  vertex  semantics  are the same as
          those for MultiLine.

     Label(const char* string, Graphic* graphic = nil)



Printed 4/10/90          7 December 1987                        4






Graphic(3I)         UNIX Programmer's Manual          Graphic(3I)



     Label(const char* string, int n, Graphic* graphic = nil)
          Define a string or substring of  text.   If  background
          fill  mode  is on, then the characters are drawn in the
          foreground color  and  other  pixels  within  character
          boundaries  are  set to the background color.  If back-
          ground fill mode is off, only the foreground pixels are
          set.

nil)
     Stencil(Bitmap* image, Bitmap* mask =  nil,  Graphic*  graphic  =
          A  stencil graphic is defined by an image Bitmap and an
          optional mask Bitmap.  The image defines the bits  that
          will  be  drawn  in  the  current foreground color (set
          bits) and background color (clear bits), and  the  mask
          defines  which  parts  of the image will be drawn.  The
          stencil graphic adopts the width and height of the mask
          if  there  is  one;  otherwise, it adopts the width and
          height of the image.

     RasterRect(Raster*, Graphic* graphic = nil)
          A raster rect is a graphic that displays a color raster
          image  defined  by  a  Raster  object.  The raster rect
          adopts the width and height of the Raster.

     Picture(Graphic* graphic = nil)
     void Picture::Append(Graphic*)
     void Picture::Prepend(Graphic*)
     void Picture::InsertAfterCur(Graphic*)
     void Picture::InsertBeforeCur(Graphic*)
     void Picture::Remove(Graphic*)
     void Picture::RemoveCur()
     void Picture::SetCurrent(Graphic*)
     Graphic* Picture::GetCurrent()
     Graphic* Picture::First()
     Graphic* Picture::Last()
     Graphic* Picture::Next()
     Graphic* Picture::Prev()
     boolean Picture::IsEmpty()
     boolean Picture::AtEnd()
     Graphic* Picture::FirstGraphicContaining(PointObj&)
     Graphic* Picture::LastGraphicContaining(PointObj&)
     int Picture::GraphicsContaining(PointObj&, Graphic**&)
     Graphic* Picture::FirstGraphicIntersecting(BoxObj&)
     Graphic* Picture::LastGraphicIntersecting(BoxObj&)
     int Picture::GraphicsIntersecting(BoxObj&, Graphic**&)
     Graphic* Picture::FirstGraphicWithin(BoxObj&)
     Graphic* Picture::LastGraphicWithin(BoxObj&)
     int Picture::GraphicsWithin(BoxObj&, Graphic**&)
     void Picture::Propagate()
          A Picture is a graphic  that  contains  other  graphics
          (subgraphics).   The  subgraphics  are deallocated when
          the picture is destroyed.  A picture has its own  state



Printed 4/10/90          7 December 1987                        5






Graphic(3I)         UNIX Programmer's Manual          Graphic(3I)



          which  is  ``concatenated''  with the state of its sub-
          graphics when the picture  is  drawn  or  erased.   The
          semantics  of  concatentation  are that subgraphics are
          drawn with the picture's state information  substituted
          for their own, except for attributes that are undefined
          (nil)  in  the  picture;  the  subgraphics'  individual
          attributes  are  used  for  these values.  Furthermore,
          each subgraphic's transformer is postmultiplied by  the
          picture's  transformer  when  the  picture is drawn, so
          that subgraphics are drawn relative  to  the  picture's
          coordinate system.

          Several operations are defined on Picture to allow sub-
          graphics to be added, removed, and manipulated.  Append
          and Prepend allow subgraphics to be added to the begin-
          ning and end of the picture, respectively.  Subgraphics
          are drawn starting from the beginning of  the  picture,
          so  that  the  most  recently appended graphic is drawn
          last.   Each  picture  maintains  a  pointer   to   its
          ``current''  subgraphic  which  can  be  set explicitly
          using SetCurrent and retrieved with GetCurrent.  Inser-
          tAfterCur and InsertBeforeCur insert a graphic after or
          before the current  subgraphic,  respectively.   Remove
          and  RemoveCur  remove  a  subgraphic from the picture.
          First and Last return the first and  last  graphics  in
          the  picture.  Next and Prev return the subgraphic fol-
          lowing and preceding the current one, respectively, and
          set  the  current  subgraphic  to  the  value returned.
          IsEmpty returns whether or not the picture has any sub-
          graphics,  and  AtEnd  returns _t_r_u_e if the current sub-
          graphic pointer has been advanced past  the  last  sub-
          graphic.

          FirstGraphicContaining,  LastGraphicContaining,  First-
          GraphicIntersecting, LastGraphicIntersecting, FirstGra-
          phicWithin, and LastGraphicWithin return the  first  or
          last  graphic  in  the  picture  that contains a point,
          intersects a box, and falls completely  within  a  box,
          respectively.   GraphicsContaining,  GraphicsIntersect-
          ing, and GraphicsWithin  return  as  a  side-effect  an
          array  containing  those  subgraphics  that  contain  a
          point, intersect a box, and fall  completely  within  a
          box,  respectively.  These functions return the size of
          the array.

          Finally, Propagate modifies the graphics state  of  the
          picture's  subgraphics  by  concatenating in place each
          subgraphic's state with the  picture's  own.   This  is
          useful when the subgraphics should retain their appear-
          ance after removal from  the  picture.   The  picture's
          transformer  is set to nil following the propagation to
          avoid  concatenating  its   coordinate   transformation



Printed 4/10/90          7 December 1987                        6






Graphic(3I)         UNIX Programmer's Manual          Graphic(3I)



          twice.

     Instance(Graphic* obj = nil, Graphic* graphic = nil)
          An Instance of a graphic  consists  of  all  the  usual
          state  plus a reference to another graphic specified by
          _o_b_j.  When drawn or erased, the  instance  concatenates
          the state of the graphic it references with its own.

FILES
     <InterViews/Graphic/ppaint.h> persistent paint objects
     <InterViews/Graphic/geomobjs.h>    persistent       geometry
     objects

SEE ALSO
     libInterViews(3I), libgraphic(3I),  Bitmap(3I),  Canvas(3I),
     Transformer(3I), Painter(3I), Persistent(3I), Raster(3I)







































Printed 4/10/90          7 December 1987                        7






GraphicBlock(3I)    UNIX Programmer's Manual     GraphicBlock(3I)



NAME
     GraphicBlock - interactor containing a Graphic

SYNOPSIS
     #include <InterViews/Graphic/grblock.h>

DESCRIPTION
     A GraphicBlock is an interactor  that  contains  a  graphic.
     GraphicBlocks are useful for interactors whose appearance is
     most conveniently defined using  structured  graphics.   The
     graphic  will be drawn whenever the interactor's Draw member
     function is called.

     The  graphic  can   be   aligned   with   respect   to   the
     GraphicBlock's  canvas.  When the canvas is first allocated,
     the graphic is  positioned  so  that  its  bounding  box  is
     aligned with the canvas.  On subsequent resizes, the portion
     of the graphic within  the  canvas  is  aligned.   With  the
     default  alignment,  for example, a graphic will be centered
     in the canvas initially.  If the canvas is resized, then the
     part  of  the  graphic  in the center of the canvas prior to
     resizing will appear in  the  center  of  the  canvas  after
     resizing.

     The graphic can be scrolled and zoomed as well using a  per-
     spective.   Zooming  is  performed  by  changing  either the
     curwidth/curheight  or  the  width/height  members  of   the
     GraphicBlock's  perspective.   For  example,  to enlarge the
     view of the graphic by a factor  of  two,  call  the  Adjust
     member  function  with  a  perspective  whose  curwidth  and
     curheight are half that of the GraphicBlock's or whose width
     and  height  are double that of the GraphicBlock's.  Zooming
     can be limited to magnifications that are powers of  two  by
     specifying Binary for the Zooming parameter.

     The natural size of a GraphicBlock depends on  the  size  of
     the graphic it contains and on any padding (white space sur-
     rounding the graphic) specified.  GraphicBlocks  are  infin-
     itely stretchable horizontally and vertically by default.

PUBLIC OPERATIONS
Center, Zooming = Continuous)
     GraphicBlock(Sensor*,  Graphic*,  Coord  pad  =  0,  Alignment  =
          Create  a  new  GraphicBlock with the specified sensor,
          graphic, padding, alignment, and zooming.

     virtual void Invert()
          Invert displays the  GraphicBlock  with  the  graphic's
          foreground and background colors exchanged.

     void Update()
          The Update operation should be called after the graphic



Printed 4/10/90          7 December 1987                        1






GraphicBlock(3I)    UNIX Programmer's Manual     GraphicBlock(3I)



          is changed.

     Graphic* GetGraphic()
          Get the graphic in the GraphicBlock.

     float GetMagnification()
     void SetMagnification(float)
          Get and set the magnification applied to  the  graphic,
          relative to its magnification when the GraphicBlock was
          created.

PROTECTED OPERATIONS
     virtual void Zoom(Perspective&)
     virtual void Scroll(Perspective&)
          These functions define how zooming  and  scrolling  are
          inferred  from  the perspective that is supplied to the
          Adjust function.  The default behaviors implement stan-
          dard  scroller-style semantics and zooming as described
          above.

     virtual float LimitMagnification(float)
          Limit the amount of magnification that can  be  applied
          to  the  graphic.  This function is used as a filter to
          convert desired magnifications  into  legal  ones.   By
          default,  the  argument  is  returned;  no  limits  are
          imposed.

     void UpdatePerspective()
          Changes the GraphicBlock's perspective to  reflect  the
          bounding  box  of  the  graphic and calls Update on the
          perspective.  UpdatePerspective encapsulates this func-
          tionality  to  facilitate  redefinition  of  the Update
          function in derived classes.

SEE ALSO
     Interactor(2I),      libInterViews(3I),      libgraphic(3I),
     Scroller(3I)


















Printed 4/10/90          7 December 1987                        2






Persistent(3I)      UNIX Programmer's Manual       Persistent(3I)



NAME
     Persistent - persistent object package for Graphic

SYNOPSIS
     #include <InterViews/Graphic/persistent.h>

DESCRIPTION
     Persistent is a class that implements a  general  persistent
     object.  Persistent objects can exist in memory, on disk, or
     both; the implementation supports a transparent interface to
     objects  regardless  of  their  location.   Thus  persistent
     objects can exist beyond the lifetime of the  programs  that
     create and use them.  Though Persistent was designed to sup-
     port  the  persistent  structured   graphics   provided   by
     Graphic(3I),  programmers  can  build  their  own persistent
     classes   by   deriving   from   Persistent.     The    file
     <InterViews/Graphic/persistent.h>  need  not  be included if
     Graphic header files are  already  included;  it  should  be
     included only when deriving new Persistent objects.

     The following operations are defined on Persistent objects:

     virtual ~Persistent()
          Deleting a persistent object will  flush  it  from  the
          object manager cache.

     virtual ClassId GetClassId()
          Every class derived from Persistent must  have  a  glo-
          bally  unique  identifier  associated  with  it.   This
          member function must be redefined in derived classes to
          return the identifier reserved for that class.

     virtual boolean IsA(ClassId)
          Returns _t_r_u_e if the persistent object is an instance of
          the  class  (or subclass of the class) specified by the
          given ClassId.  This member function must be  redefined
          in derived classes to return the appropriate value.

     virtual Persistent* GetCluster()
          If a persistent object  (the  _p_a_r_e_n_t  object)  contains
          other persistent objects as part of its internal state,
          then the parent and the  objects  it  contains  can  be
          _c_l_u_s_t_e_r_e_d  on  disk, or written and read consecutively.
          This can improve performance when the parent object  is
          read  since  the  objects  within  it are not scattered
          throughout the disk.  GetCluster is  called  internally
          to  determine  whether the object is clustered within a
          parent or not.  GetCluster  returns  _t_h_i_s  by  default,
          meaning  that  the object is not to be clustered within
          another.  If GetCluster is  redefined  to  return  nil,
          then  the  object  is  assumed to be clustered within a
          parent and  will  be  written  and  read  automatically



Printed 4/10/90           15 June 1987                          1






Persistent(3I)      UNIX Programmer's Manual       Persistent(3I)



          whenever the parent is written or read.

     virtual boolean write(File* f)
     virtual boolean read(File* f)
          These functions define what information is written  and
          read  when  the persistent object is transferred to and
          from  disk.   The  argument  is  a  class  (defined  in
          <InterViews/Graphic/file.h>)  that  encapsulates  stdio
          file operations.  _P_a_r_e_n_t_C_l_a_s_s::read(f) must  be  called
          in  the  read  function  before  anything else is read.
          Similarly, _P_a_r_e_n_t_C_l_a_s_s::write(f) must be called in  the
          write  function before anything else is written.  Write
          and read operations  typically  write  and  read  ASCII
          and/or  binary  data  and/or  references  to other per-
          sistent objects (provided by the Ref  class,  described
          below).   Write  and read return _f_a_l_s_e if the operation
          was unsuccessful for any reason; otherwise they  return
          _t_r_u_e.  These functions should not perform any operation
          (such as File::SeekTo and the like, or dereferencing  a
          Ref)  that  changes  the  position of the next input or
          output operation on the File.

     virtual boolean writeObjects(File* f)
     virtual boolean readObjects(File* f)
          These  functions  define  what   clustered   persistent
          objects should be written and read along with instances
          of  the  class.   _P_a_r_e_n_t_C_l_a_s_s::readObjects(f)  _m_u_s_t  be
          called in the readObjects function before anything else
          is read.  Similarly, _P_a_r_e_n_t_C_l_a_s_s::writeObjects(f)  must
          be  called in the writeObjects function before anything
          else is written.  WriteObjects and  readObjects  opera-
          tions  typically  perform  WriteObjects and ReadObjects
          operations on references to  other  persistent  objects
          that were written/read in the write and read functions.
          WriteObjects and readObjects return _f_a_l_s_e if the opera-
          tion  was  unsuccessful  for any reason, otherwise they
          return _t_r_u_e.  These functions should  not  perform  any
          operation  that  changes the position of the next input
          or output operation on the File.

     virtual boolean initialize()
          Initialize can be used to initialize an object's inter-
          nal  state  with  pointers  to  its  clustered objects.
          Dereferencing of Refs to clustered objects should  only
          take  place  in  this  function, _n_o_t in read or readOb-
          jects.  _P_a_r_e_n_t_C_l_a_s_s::initialize() should be  called  in
          this function before anything else is done.

     virtual boolean Save()
          Explicitly saves the object.  Persistent  objects  that
          are  part  of  a cluster should not be saved explicitly
          since they are automatically written and read with  the



Printed 4/10/90           15 June 1987                          2






Persistent(3I)      UNIX Programmer's Manual       Persistent(3I)



          parent object.

     virtual boolean IsDirty()
     virtual void Touch()
     virtual void Clean()
          A dirty bit is maintained for each  persistent  object.
          IsDirty returns the status of the dirty bit, Touch sets
          the dirty bit, and Clean resets it.  Persistent objects
          are automatically touched when they are created.

REFERENCES TO PERSISTENT OBJECTS
     The Ref class provides a mechanism for referring to  a  per-
     sistent  object  in a manner analogous to pointer references
     to conventional objects.  Refs are dereferenced to yield the
     object  to which they refer.  They can be compared with each
     other, tested for validity, written to and read  from  disk.
     Each Ref has a unique universal identifier (UID) that serves
     as  the   object's   ``address''.    Ref   is   defined   in
     <InterViews/Graphic/ref.h>.

     Ref()
     Ref(UID)
     Ref(Persistent*)
          A parameterless constructor creates a  nil  (undefined)
          reference.  The constructor with a UID argument creates
          a reference with a  particular  UID;  this  constructor
          should  not  be used unless one knows what he or she is
          doing.  The third constructor is the one most  commonly
          used.  It creates a reference to the given object.

     Persistent* operator()()
          Parenthesis are overloaded to perform the dereferencing
          operation  on a Ref.  The return value will most likely
          have to be cast into a pointer to  the  proper  derived
          persistent class.

     boolean operator==(Ref r)
     boolean operator!=(Ref r)
          Refs can be compared for equality and inequality  using
          these overloaded operators.

     boolean Write(File*)
     boolean Read(File*)
          Write or read a reference to an object.   Theses  func-
          tions return _f_a_l_s_e if the operation is unsuccessful for
          any reason; otherwise _t_r_u_e is returned.

     boolean WriteObjects(File*)
     boolean ReadObjects(File*)
          Write or read consecutively the object(s) referenced by
          the  Ref.   If  the  referenced object is the head of a
          cluster,  then  these  operations  are  nop's.    These



Printed 4/10/90           15 June 1987                          3






Persistent(3I)      UNIX Programmer's Manual       Persistent(3I)



          functions return _f_a_l_s_e if the operation is unsuccessful
          for any reason; otherwise _t_r_u_e is returned.

     A RefList is class derived from Ref used  to  form  circular
     doubly-linked  lists  of  references  to persistent objects.
     Each RefList object references a persistent object and  con-
     tains pointers to the RefLists preceding and following it in
     the   list.    The   RefList    class    is    defined    in
     <InterViews/Graphic/reflist.h>.

     RefList()
     RefList(UID u)
     RefList(Persistent*)
          RefList constructors  perform  the  same  functions  as
          their Ref counterparts.

     void SetRef(Ref r)
          Explicitly set the reference to the given one.

     boolean IsEmpty()
          Returns _t_r_u_e if the RefList  has  no  neighbors,  _f_a_l_s_e
          otherwise.

     void Append(RefList*)
     void Prepend(RefList*)
          Append inserts the given RefList  after  _t_h_i_s;  prepend
          inserts it before _t_h_i_s.

     void Remove(RefList*)
     void Delete(Ref)
     RefList* Find(Ref)
          Remove finds the given RefList and removes it from  the
          list.   Delete  finds  the  given  Ref  and deletes the
          RefList containing it.  Find returns the  RefList  con-
          taining the given Ref.

     RefList* First()
     RefList* Last()
     RefList* End()
     RefList* Next()
     RefList* Prev()
          These functions return a particular element of the list
          relative  to  the position of this RefList in the list.
          First returns a pointer to the RefList following  _t_h_i_s,
          Last  returns  a  pointer  to the last RefList starting
          from _t_h_i_s, and End returns a  pointer  to  the  RefList
          marking  the  end  of  the  list.  Next and Prev return
          pointers to the RefLists following and  preceding  _t_h_i_s
          in the list.

     boolean Write(File*)
     boolean Read(File*)



Printed 4/10/90           15 June 1987                          4






Persistent(3I)      UNIX Programmer's Manual       Persistent(3I)



     boolean WriteObjects(File*)
     boolean ReadObjects(File*)
          These functions behave just as their  Ref  counterparts
          do,  except  they  perform their operations on all ele-
          ments in the RefList.

     RefList* operator[](int n)
          Returns a pointer to the _nth element  in  the  RefList,
          returning _t_h_i_s if _n = 0, _t_h_i_s->Next() for _n = 1, etc.

OBJECT MANAGER CLASS AND OPERATIONS
     The ObjectMan class implements the _o_b_j_e_c_t  _m_a_n_a_g_e_r,  a  one-
     of-a-kind  global object responsible for reading and writing
     persistent objects to and from  disk.   The  object  manager
     also  serves  as a well-known entity from which programs can
     retrieve the persistent objects they have created. ObjectMan
     is  derived  from  Persistent  and  so is itself persistent.
     There is exactly one object manager  per  group  of  related
     persistent  objects;  no  references  can exist between per-
     sistent objects created by different object  managers  (dif-
     ferent  in  the  sense  that  they  use  different files for
     storage).  Most of the member functions defined in ObjectMan
     need  never  be used by programs unless they derive new per-
     sistent classes.

sistent* (*userCreator)(ClassId) = nil)
     ObjectMan(char* filename, void (*userInit)(RefList*) = nil,  Per-
          The   filename  parameter  requires  a  null-terminated
          string which will be used to prefix the  names  of  two
          files  that will contain all persistent object informa-
          tion: _f_i_l_e_n_a_m_e.map and _f_i_l_e_n_a_m_e.sto.  If these files do
          not  already exist when the constructor is called, then
          they will be created and the  function  pointed  to  by
          _u_s_e_r_I_n_i_t  will  be  called.   _u_s_e_r_I_n_i_t  must point to a
          function that creates primordial root objects needed by
          your  application  and  installs  them  in  the  passed
          RefList.  If you want to  use  the  default  persistent
          paint  objects  in  Graphic,  then this function should
          call          InitPPaint,          defined           in
          <InterViews/Graphic/ppaint.h>.   _u_s_e_r_C_r_e_a_t_o_r must point
          to a function that can create an instance of  any  per-
          sist  object  used in the application, given a ClassId.
          _u_s_e_r_C_r_e_a_t_o_r should call  GraphicConstruct,  defined  in
          <InterViews/Graphic/grconstruct.h>,  if  it receives an
          unrecognized ClassId.  If  your  application  does  not
          derive any new persistent objects, _u_s_e_r_C_r_e_a_t_o_r can sim-
          ply  point  to  GraphicConstruct.   A  newly  allocated
          object  manager  should be assigned to the global vari-
          able _T_h_e_M_a_n_a_g_e_r.   Further  references  to  the  object
          manager should be made via this global.

     RefList* GetRoot()



Printed 4/10/90           15 June 1987                          5






Persistent(3I)      UNIX Programmer's Manual       Persistent(3I)



          Returns a pointer to the RefList containing  well-known
          objects.   Persist  objects  that  are  to  be accessed
          directly should have references to them appended to the
          root RefList in a well-known order for later retrieval.
          For  example,  the  default  persistent  paint  objects
          defined  in  InitPPaint  should be appended to the root
          RefList so that they can be accessed when  the  program
          is restarted.

     Persistent* Create(ClassId)
          Creates a persistent object of class specified by _C_l_a_s_-
          _s_I_d.  Create calls the function pointed to by userCrea-
          tor.

     boolean Invalidate(Persistent*)
          Used to permanently  deallocate  a  persistent  object.
          Returns _f_a_l_s_e if the operation was unsuccessful, other-
          wise returns _t_r_u_e.

     boolean IsCached(Ref*)
          Returns _t_r_u_e if the referenced  object  has  been  read
          from  disk into memory, _f_a_l_s_e if not.  IsCached updates
          the reference to reflect the address of the  object  if
          it is in memory.

     boolean Find(Ref*)
          Seeks for and reads the referenced object from disk  if
          it  is  not  in  memory  and  updates  the reference to
          reflect the memory address of the object. Find  returns
          _t_r_u_e if the operation was successful.

     boolean Retrieve(Ref*)
          Like Find except does not perform a seek; the object is
          read  blindly  from  disk.   Retrieve  is  used to read
          clustered objects.

     boolean Store(Persistent*)
     boolean Update(Persistent*)
          Store allocates new disk space for an object and writes
          it  to  disk.   Update  rewrites an existing object and
          updates the  map  containing  its  disk  offset.   Both
          return _t_r_u_e if the operation was successful.

     boolean ObjectIsDirty(Persistent*)
     void ObjectTouch(Persistent*)
     void ObjectClean(Persistent*)
          The object manager maintains a dirty bit for each  per-
          sistent  object  in  its object cache.  These functions
          allow the dirty bit for an object to be tested, set and
          reset.   The dirty bit operations defined in Persistent
          actually call these functions through the global  vari-
          able   TheManager.   Dirty  objects  are  automatically



Printed 4/10/90           15 June 1987                          6






Persistent(3I)      UNIX Programmer's Manual       Persistent(3I)



          written to disk when TheManager is deleted.

SEE ALSO
     libgraphic(3I)



















































Printed 4/10/90           15 June 1987                          7

