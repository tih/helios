/**/#
/**/# IMAKE_TEMPLATE - generic imake template customized for InterViews
/**/#
/**/# You may change platform-specific parameters in the appropriate .cf
/**/# configuration files.  You may set site-wide parameters in the file
/**/# IVsite.def.  You may need a full rebuild if you change any parameters.
/**/#

#define	YES	1
#define NO	0

/*
 * Identify our current platform.
 */

#include "Arch.c"

/*
 * Include the platform-specific .cf file.
 */

#include MacroIncludeFile

/*
 * Include the site-specific defaults file.
 */

#include "IVsite.def"

/*
 * Define any generic build parameters not already set by the platform
 * or site configuration files.
 */

#ifndef SystemV
#ifdef SYSV
#define SystemV			YES	/* need system 5 style */
#else
#define SystemV			NO	/* bsd */
#endif
#endif
#ifndef OSMajorVersion
#define OSMajorVersion          0
#endif
#ifndef OSMinorVersion
#define OSMinorVersion          0
#endif
#ifndef UnalignedReferencesAllowed
#define UnalignedReferencesAllowed NO	/* if arbitrary deref is okay */
#endif
#ifndef ExecableScripts
#ifdef SYSV
#define ExecableScripts		NO
#else
#define ExecableScripts		YES	/* kernel exec() can handle #! */
#endif
#endif
#ifndef ConstructMFLAGS
#if SystemV
#define ConstructMFLAGS		YES	/* build MFLAGS from MAKEFLAGS */
#else
#define ConstructMFLAGS		NO	/* build MFLAGS from MAKEFLAGS */
#endif
#endif
#ifndef HasSockets
#if SystemV
#define HasSockets		NO	/* not yet... */
#else
#define HasSockets		YES	/* bsd does have them */
#endif
#endif
#ifndef HasVFork
#if SystemV
#define HasVFork		NO	/* not yet... */
#else
#define HasVFork		YES
#endif
#endif

#ifndef BourneShell			/* to force shell in makefile */
#define BourneShell /bin/sh
#endif
#ifndef UNCOMPRESSPATH
#define UNCOMPRESSPATH /usr/ucb/uncompress
#endif
#ifndef OptimizedCDebugFlags
#define OptimizedCDebugFlags -O
#endif
#ifndef DebuggableCDebugFlags
#define DebuggableCDebugFlags -g
#endif
#ifndef NoOpCDebugFlags
#define NoOpCDebugFlags /* as nothing */
#endif
#ifndef DefaultCDebugFlags
#define DefaultCDebugFlags NoOpCDebugFlags
#endif
#ifndef LibraryCDebugFlags
#define LibraryCDebugFlags NoOpCDebugFlags
#endif
#ifndef InstBinFlags
#define InstBinFlags -m 0755
#endif
#ifndef InstUidFlags
#define InstUidFlags -m 4755
#endif
#ifndef InstLibFlags
#define InstLibFlags -m 0664
#endif
#ifndef InstIncFlags
#define InstIncFlags -m 0444
#endif
#ifndef InstManFlags
#define InstManFlags -m 0444
#endif
#ifndef InstDatFlags
#define InstDatFlags -m 0444
#endif
#ifndef InstKmemFlags
#define InstKmemFlags InstUidFlags    /* put -g kmem -m 2755 in site.def... */
#endif
#ifndef ArCmd
/*
 * Note: MIT's ArCmd also had the 'l' option, which uses the current
 * directory instead of /tmp for temporary files.  This is a mistake
 * because often /tmp will be much faster than the current directory
 * (especially when /tmp is on a local disk).
 */
#define ArCmd ar cq
#endif
#ifndef BootstrapCFlags
#define BootstrapCFlags /**/
#endif
#ifdef UseInstalled
#define BootstrapCpuCmd cpu
#else
#define BootstrapCpuCmd BourneShell $(SCRIPTSRC)/cpu.sh $(IVCONFIGSRC)
#endif
#ifndef CcCmd
#define CcCmd cc
#endif
#ifndef AsCmd
#define AsCmd as
#endif
#ifndef CompressCmd
#define CompressCmd compress
#endif
#ifndef CppCmd
#define CppCmd /lib/cpp
#endif
#ifndef PreProcessCmd
#define PreProcessCmd CcCmd -E	/* run cpp with defines */
#endif
#ifndef DependCmd
#define DependCmd makedepend
#endif
#ifndef GenclassCmd
#define GenclassCmd genclass
#endif
#ifndef ImakeCmd
#define ImakeCmd imake
#endif
#ifndef InstallCmd
#if SystemV
#ifdef UseInstalled
#define InstallCmd bsdinstall
#else
#define InstallCmd BourneShell $(SCRIPTSRC)/bsdinst.sh
#endif
#else
#define InstallCmd install
#endif
#endif
#ifndef LdCmd
#define LdCmd ld
#endif
#ifndef LintCmd
#define LintCmd lint
#endif
#ifndef LintLibFlag
#if SystemV
#define LintLibFlag -o
#else
#define LintLibFlag -C
#endif
#endif
#ifndef LintOpts
#if SystemV
#define LintOpts -ax
#else
#define LintOpts -axz
#endif
#endif
#ifndef CpCmd
#define CpCmd cp
#endif
#ifndef LnCmd
#if SystemV
#define LnCmd ln		/* or even cp */
#else
#define LnCmd ln -s
#endif
#endif
#ifndef MakeCmd
#define MakeCmd make
#endif
#ifndef MkdirhierCmd
#ifdef UseInstalled
#define MkdirhierCmd mkdirhier
#else
#define MkdirhierCmd BourneShell $(SCRIPTSRC)/mkdirhier.sh
#endif
#endif
#ifndef MvCmd
#define MvCmd mv
#endif
#ifndef RanlibCmd
#if SystemV
#define RanlibCmd /bin/true
#else
#define RanlibCmd ranlib
#endif
#endif
#ifndef RanlibInstFlags
#define RanlibInstFlags /**/
#endif
#ifndef RmCmd
#define RmCmd rm -f
#endif
#ifndef TagsCmd
#define TagsCmd ctags
#endif
#ifndef TroffCmd
#define TroffCmd psroff
#endif
#ifndef StandardCppDefines
#if SystemV
#define StandardCppDefines -DSYSV
#else
#define StandardCppDefines /**/
#endif
#endif
#ifndef StandardDefines
#if SystemV
#define StandardDefines -DSYSV
#else
#define StandardDefines /**/
#endif
#endif
#ifndef ExtraLibraries
#define ExtraLibraries /**/
#endif
#ifndef ExtraLoadFlags
#define ExtraLoadFlags /**/
#endif
#ifndef TOPDIR
#define TOPDIR .
#endif

/**/#
/**/# Generic make variables
/**/#

            SHELL = BourneShell

              TOP = TOPDIR

               AR = ArCmd
  BOOTSTRAPCFLAGS = BootstrapCFlags	/* set if cpp doesn't have uniq sym */
  BOOTSTRAPCPUCMD = BootstrapCpuCmd
  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
               CC = CcCmd
         COMPRESS = CompressCmd
              CPP = CppCmd $(STD_CPP_DEFINES)		/* simple filters */
    PREPROCESSCMD = PreProcessCmd $(STD_CPP_DEFINES)	/* prefered; mdep */
           DEPEND = DependCmd
         GENCLASS = GenclassCmd
            IMAKE = ImakeCmd
          INSTALL = InstallCmd
               LD = LdCmd
             LINT = LintCmd
      LINTLIBFLAG = LintLibFlag
         LINTOPTS = LintOpts
               LN = LnCmd
             MAKE = MakeCmd X=$X
        MKDIRHIER = MkdirhierCmd
               MV = MvCmd
               CP = CpCmd
           RANLIB = RanlibCmd
  RANLIBINSTFLAGS = RanlibInstFlags
               RM = RmCmd
             TAGS = TagsCmd
            TROFF = TroffCmd
  STD_CPP_DEFINES = StandardCppDefines
      STD_DEFINES = StandardDefines
 EXTRA_LOAD_FLAGS = ExtraLoadFlags
  EXTRA_LIBRARIES = ExtraLibraries
#if ConstructMFLAGS
           MFLAGS = -$(MAKEFLAGS)
#endif

     INSTBINFLAGS = InstBinFlags	/* install flags for programs */
     INSTUIDFLAGS = InstUidFlags	/* install flags for setuid programs */
     INSTLIBFLAGS = InstLibFlags	/* install flags for libraries */
     INSTINCFLAGS = InstIncFlags	/* install flags for headers */
     INSTMANFLAGS = InstManFlags	/* install flags for man pages */
     INSTDATFLAGS = InstDatFlags	/* install flags for data files */
    INSTKMEMFLAGS = InstKmemFlags	/* install flags for /dev/kmem progs */

      CDEBUGFLAGS = DefaultCDebugFlags
           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

        MACROFILE = MacroFile
        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
			a.out core errs tags TAGS make.log make.out

/*
 * Include the project-specific configuration file.
 */

#include "Project.tmpl"

/*
 * Include the project-specific rules file.
 */

#include "Imake.rules"

/*
 * Include the local Imakefile.
 */

#include INCLUDE_IMAKEFILE

/**/#
/**/# Common rules for all Makefiles from IMAKE_TEMPLATE - do not edit.
/**/#

CleanTarget()

/*
 * If Makefile rules are needed
 */
#ifndef OverrideMakefileTarget
#ifdef InMachineDepSubdir
MachineDepMakefileTarget()
#else
MakefileTarget()
#endif
#endif

/*
 * If general subdirectory rules are needed
 */
#ifdef IHaveSubdirs
/*
 * Rules for installing, cleaning, and making Makefiles in SUBDIRS
 */
InstallSubdirs($(SUBDIRS))
CleanSubdirs($(SUBDIRS))
#ifndef OverrideMakefileSubdirs
MakefileSubdirs($(SUBDIRS))
#endif
#endif

/*
 * If Gen subdirectory rules are needed
 */
#ifdef IHaveGenSubdirs
/*
 * Rules to mkdir GenDir if necessary
 */
MakefileGenSubdirs($(GEN))
#endif

/* 
 * If MachineDep subdirectory rules are needed
 */
#ifdef IHaveMachineDepSubdirs
/*
 * Rules for installing, cleaning, and making Makefiles in MachineDep
 */
InstallMachineDepSubdir()
CleanMachineDepSubdir()
MakefileMachineDepSubdir()
#endif

/* 
 * If none of the above subdirectory rules are needed
 */
#if !defined(IHaveSubdirs) && !defined(IHaveGenSubdirs) && !defined(IHaveMachineDepSubdirs)
/*
 * Empty rules for directories that do not have SUBDIRS, GenDir, or MachineDep
 */
install::
Makefiles::
#endif

/**/#
/**/# dependencies generated by makedepend
/**/#
