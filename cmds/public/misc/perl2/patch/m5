   7N     30464: 17 Jul 88 ma_djch         
(Message # 7: 30464 bytes, New)
Received: from mordell by bond.maths.Bath.AC.UK id aa26278; 17 Jul 88 14:02 BST
Received: from ux63.bath.ac.uk by mordell.maths.bath.AC.UK id aa22652;
          17 Jul 88 14:03 BST
Date:     Sun, 17 Jul 88 14:06:21 BST
From:     ma_djch@uk.ac.bath.ux63
To:       djch@uk.ac.bath.maths

Path: bath63!dcl-cs!ukc!mcvax!uunet!lll-winken!lll-lcc!ames!elroy!devvax!lroot
From: lroot@devvax.JPL.NASA.GOV (The Superuser)
Newsgroups: comp.sources.bugs
Subject: perl 2.0 patch #5
Summary: This is an official patch for perl 2.0.  Please apply it.
Message-ID: <2440@devvax.JPL.NASA.GOV>
Date: 13 Jul 88 00:54:23 GMT
Organization: Jet Propulsion Laboratory, Pasadena, CA
Lines: 1190

System: perl version 2.0
Patch #: 5
Priority: MEDIUM
Subject: patch2 continued

Description:
	See patch 2.

Fix:	From rn, say "| patch -p -N -d DIR", where DIR is your perl source
	directory.  Outside of rn, say "cd DIR; patch -p -N <thisarticle".
	If you don't have the patch program, apply the following by hand,
	or get patch (version 2.0, latest patchlevel).

	After patching:
		Configure -d
		make depend
		make
		make test
		make install
		cd x2p
		make depend
		make
		make install

	If patch indicates that patchlevel is the wrong version, you may need
	to apply one or more previous patches, or the patch may already
	have been applied.  See the patchlevel.h file to find out what has or
	has not been applied.  In any event, don't continue with the patch.

	If you are missing previous patches they can be obtained from me:

	Larry Wall
	lwall@jpl-devvax.jpl.nasa.gov

	If you send a mail message of the following form it will greatly speed
	processing:

	Subject: Command
	@SH mailpatch PATH perl 2.0 LIST
		   ^ note the c

	where PATH is a return path FROM ME TO YOU either in Internet notation,
	or in bang notation from some well-known host, and LIST is the number
	of one or more patches you need, separated by spaces, commas, and/or
	hyphens.  Saying 35- says everything from 35 to the end.


	You can also get the patches via anonymous FTP from
	jpl-devvax.jpl.nasa.gov (128.149.8.43).

Index: patchlevel.h
Prereq: 4
1c1
< #define PATCHLEVEL 4
---
> #define PATCHLEVEL 5


Index: x2p/s2p
Prereq: 2.0
*** x2p/s2p.old	Mon Jul 11 23:40:01 1988
--- x2p/s2p	Mon Jul 11 23:40:02 1988
***************
*** 1,8 ****
  #!/usr/bin/perl
  
! # $Header: s2p,v 2.0 88/06/05 00:15:55 root Exp $
  #
  # $Log:	s2p,v $
  # Revision 2.0  88/06/05  00:15:55  root
  # Baseline version 2.0.
  # 
--- 1,11 ----
  #!/usr/bin/perl
  
! # $Header: s2p,v 2.0.1.1 88/07/11 23:26:23 root Exp $
  #
  # $Log:	s2p,v $
+ # Revision 2.0.1.1  88/07/11  23:26:23  root
+ # patch2: s2p didn't put a proper prologue on output script
+ # 
  # Revision 2.0  88/06/05  00:15:55  root
  # Baseline version 2.0.
  # 
***************
*** 243,249 ****
      }
      close head;
  
!     print "#!/bin/perl\n\n";
      open(body,"cc -E /tmp/sperl2$$.c |") ||
  	do Die("Can't reopen temp file");
      while (<body>) {
--- 246,256 ----
      }
      close head;
  
!     print '#!/usr/bin/perl
! eval "exec /usr/bin/perl -S $0 $*"
! 	if $running_under_some_shell;
! 
! ';
      open(body,"cc -E /tmp/sperl2$$.c |") ||
  	do Die("Can't reopen temp file");
      while (<body>) {

Index: x2p/walk.c
Prereq: 2.0
*** x2p/walk.c.old	Mon Jul 11 23:40:08 1988
--- x2p/walk.c	Mon Jul 11 23:40:11 1988
***************
*** 1,6 ****
! /* $Header: walk.c,v 2.0 88/06/05 00:16:12 root Exp $
   *
   * $Log:	walk.c,v $
   * Revision 2.0  88/06/05  00:16:12  root
   * Baseline version 2.0.
   * 
--- 1,13 ----
! /* $Header: walk.c,v 2.0.1.1 88/07/11 23:35:57 root Exp $
   *
   * $Log:	walk.c,v $
+  * Revision 2.0.1.1  88/07/11  23:35:57  root
+  * patch2: changes to support translation of 1985 awk
+  * patch2: handles multiple opens to same file better
+  * patch2: now handles absence of line actions
+  * patch2: now takes advantage of perl's filehandle indirection
+  * patch2: now uses keys() instead of each() to protect against deletes in loop
+  * 
   * Revision 2.0  88/06/05  00:16:12  root
   * Baseline version 2.0.
   * 
***************
*** 14,22 ****
--- 21,34 ----
  bool exitval = FALSE;
  bool realexit = FALSE;
  bool saw_getline = FALSE;
+ bool subretnum = FALSE;
+ bool saw_FNR = FALSE;
+ bool saw_argv0 = FALSE;
  int maxtmp = 0;
  char *lparen;
  char *rparen;
+ STR *subs;
+ STR *curargs = Nullstr;
  
  STR *
  walk(useval,level,node,numericptr)
***************
*** 31,36 ****
--- 43,49 ----
      register int i;
      register STR *tmpstr;
      STR *tmp2str;
+     STR *tmp3str;
      char *t;
      char *d, *s;
      int numarg;
***************
*** 47,54 ****
      type &= 255;
      switch (type) {
      case OPROG:
- 	str = walk(0,level,ops[node+1].ival,&numarg);
  	opens = str_new(0);
  	if (do_split && need_entire && !absmaxfld)
  	    split_to_array = TRUE;
  	if (do_split && split_to_array)
--- 60,68 ----
      type &= 255;
      switch (type) {
      case OPROG:
  	opens = str_new(0);
+ 	subs = str_new(0);
+ 	str = walk(0,level,ops[node+1].ival,&numarg);
  	if (do_split && need_entire && !absmaxfld)
  	    split_to_array = TRUE;
  	if (do_split && split_to_array)
***************
*** 79,84 ****
--- 93,101 ----
  	if (saw_ORS) {
  	    str_cat(str,"$\\ = \"\\n\";\t\t# set output record separator\n");
  	}
+ 	if (saw_argv0) {
+ 	    str_cat(str,"$ARGV0 = $0;\t\t# remember what we ran as\n");
+ 	}
  	if (str->str_cur > 20)
  	    str_cat(str,"\n");
  	if (ops[node+2].ival) {
***************
*** 86,121 ****
  	    str_free(fstr);
  	    str_cat(str,"\n\n");
  	}
! 	if (saw_line_op)
! 	    str_cat(str,"line: ");
! 	str_cat(str,"while (<>) {\n");
! 	tab(str,++level);
! 	if (saw_FS && !const_FS)
! 	    do_chop = TRUE;
! 	if (do_chop) {
! 	    str_cat(str,"chop;\t# strip record separator\n");
! 	    tab(str,level);
! 	}
! 	arymax = 0;
! 	if (namelist) {
! 	    while (isalpha(*namelist)) {
! 		for (d = tokenbuf,s=namelist;
! 		  isalpha(*s) || isdigit(*s) || *s == '_';
! 		  *d++ = *s++) ;
! 		*d = '\0';
! 		while (*s && !isalpha(*s)) s++;
! 		namelist = s;
! 		nameary[++arymax] = savestr(tokenbuf);
  	    }
  	}
! 	if (maxfld < arymax)
! 	    maxfld = arymax;
! 	if (do_split)
! 	    emit_split(str,level);
! 	str_scat(str,fstr=walk(0,level,ops[node+3].ival,&numarg));
! 	str_free(fstr);
! 	fixtab(str,--level);
! 	str_cat(str,"}\n");
  	if (ops[node+4].ival) {
  	    realexit = TRUE;
  	    str_cat(str,"\n");
--- 103,145 ----
  	    str_free(fstr);
  	    str_cat(str,"\n\n");
  	}
! 	fstr = walk(0,level+1,ops[node+3].ival,&numarg);
! 	if (*fstr->str_ptr) {
! 	    if (saw_line_op)
! 		str_cat(str,"line: ");
! 	    str_cat(str,"while (<>) {\n");
! 	    tab(str,++level);
! 	    if (saw_FS && !const_FS)
! 		do_chop = TRUE;
! 	    if (do_chop) {
! 		str_cat(str,"chop;\t# strip record separator\n");
! 		tab(str,level);
  	    }
+ 	    arymax = 0;
+ 	    if (namelist) {
+ 		while (isalpha(*namelist)) {
+ 		    for (d = tokenbuf,s=namelist;
+ 		      isalpha(*s) || isdigit(*s) || *s == '_';
+ 		      *d++ = *s++) ;
+ 		    *d = '\0';
+ 		    while (*s && !isalpha(*s)) s++;
+ 		    namelist = s;
+ 		    nameary[++arymax] = savestr(tokenbuf);
+ 		}
+ 	    }
+ 	    if (maxfld < arymax)
+ 		maxfld = arymax;
+ 	    if (do_split)
+ 		emit_split(str,level);
+ 	    str_scat(str,fstr);
+ 	    str_free(fstr);
+ 	    fixtab(str,--level);
+ 	    str_cat(str,"}\n");
+ 	    if (saw_FNR)
+ 		str_cat(str,"continue {\n    $FNRbase = $. if eof;\n}\n");
  	}
! 	else
! 	    str_cat(str,"# (no line actions)\n");
  	if (ops[node+4].ival) {
  	    realexit = TRUE;
  	    str_cat(str,"\n");
***************
*** 126,162 ****
  	}
  	if (exitval)
  	    str_cat(str,"exit ExitValue;\n");
  	if (saw_getline) {
! 	    str_cat(str,"\nsub Getline {\n    $_ = <>;\n");
! 	    tab(str,++level);
! 	    if (do_chop) {
! 		str_cat(str,"chop;\t# strip record separator\n");
! 		tab(str,level);
  	    }
- 	    if (do_split)
- 		emit_split(str,level);
- 	    fixtab(str,--level);
- 	    str_cat(str,"}\n");
  	}
  	if (do_fancy_opens) {
  	    str_cat(str,"\n\
  sub Pick {\n\
!     ($name) = @_;\n\
      $fh = $opened{$name};\n\
      if 