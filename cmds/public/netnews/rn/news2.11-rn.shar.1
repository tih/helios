#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	rn/Configure
#	rn/HACKERSGUIDE
#	rn/INIT
#	rn/MANIFEST
#	rn/NEW
#	rn/Pnews.1
#	rn/README
#	rn/Rnmail.1
#	rn/Wishlist
#	rn/kitleader
#	rn/kittrailer
#	rn/makedist
#	rn/makekit
#	rn/manifake
#	rn/manimake
#	rn/newsetup.1
#	rn/newsgroups.1
#	rn/patchlevel
#	rn/rn.1
# This archive created: Wed Mar  1 10:50:41 1989
export PATH; PATH=/bin:$PATH
echo shar: extracting "'Configure'" '(43901 characters)'
if test -f 'Configure'
then
	echo shar: will not over-write existing file "'Configure'"
else
sed 's/^	X//' << \SHAR_EOF > 'Configure'
	X#! /bin/sh
	X#
	X# If these # comments don't work, trim them.  Don't worry about the other
	X# shell scripts, Configure will trim # comments from them for you.
	X#
	X# $Header: Configure,v 4.3.1.6 86/07/24 14:41:18 lwall Exp $
	X#
	X# $Log:	Configure,v $
	X# Revision 4.3.1.6  86/07/24  14:41:18  lwall
	X# Handles missing Relay-Version: from news 2.10.3 headers.
	X#
	X# Revision 4.3.1.5  85/05/23  11:23:22  lwall
	X# filexp flubs sed command.
	X# 
	X# Revision 4.3.1.4  85/05/20  17:13:11  lwall
	X# Makes sure -lcurses is really a terminfo library.
	X# Puts single instead of double quotes around defs in config.sh.
	X# 
	X# Revision 4.3.1.3  85/05/16  16:48:48  lwall
	X# Took space from end of filexp output.
	X# 
	X# Revision 4.3.1.2  85/05/13  15:54:35  lwall
	X# Libraries in /usr/local/lib shouldn't use -l switch.
	X# 
	X# Revision 4.3.1.1  85/05/10  11:29:20  lwall
	X# Branch for patches.
	X# 
	X# Revision 4.3  85/05/01  11:31:23  lwall
	X# Baseline for release with 4.3bsd.
	X# 
	X
	X# Yes, you may rip this off to use in other distribution packages.
	X
	Xn=''
	Xc=''
	Xlibc=''
	Xeunicefix=''
	Xeunice=''
	Xcpp=''
	Xshsharp=''
	Xspitshell=''
	Xstartsh=''
	Xtest=''
	Xexpr=''
	Xsed=''
	Xecho=''
	Xcat=''
	Xrm=''
	Xmv=''
	Xcp=''
	Xtail=''
	Xtr=''
	Xmkdir=''
	Xsort=''
	Xuniq=''
	Xinews=''
	Xgrep=''
	Xegrep=''
	Xcontains=''
	Xlib=''
	Xnametype=''
	Xcc=''
	Xiandd=''
	Xtermlib=''
	Xjobslib=''
	Xndirlib=''
	Xlibndir=''
	Xusendir=''
	Xndirc=''
	Xndiro=''
	Xpager=''
	Xmailer=''
	Xinternet=''
	Xrnbin=''
	Xfilexp=''
	Xdistlist=''
	XLog=''
	XHeader=''
	Xsitename=''
	Xdomain=''
	Xorgname=''
	Xisadmin=''
	Xnewsadmin=''
	Xrnlib=''
	Xmansrc=''
	Xmanext=''
	Xmaildir=''
	Xspool=''
	Xactive=''
	Xmyactive=''
	Xmininact=''
	Xpref=''
	Xdefeditor=''
	Xrootid=''
	Xmboxchar=''
	Xlocpref=''
	Xorgpref=''
	Xcitypref=''
	Xstatepref=''
	Xcntrypref=''
	Xcontpref=''
	Xstrchr=''
	Xnovoid=''
	Xnovfork=''
	Xportable=''
	Xpassnam=''
	Xberknam=''
	Xusgnam=''
	Xwhoami=''
	Xtermio=''
	Xfcntl=''
	Xioctl=''
	Xnormsig=''
	Xhavetlib=''
	Xgetpwent=''
	Xgethostname=''
	Xdouname=''
	Xphostname=''
	Xhostcmd=''
	Xnorelay=''
	XCONFIG=''
	X
	Xecho "Beginning of configuration questions for rn kit."
	X: Eunice requires " " instead of "", can you believe it
	Xecho " "
	X
	X: sanity checks
	XPATH='.:/bin:/usr/bin:/usr/local/bin:/usr/ucb:/usr/local:/usr/lbin:/etc'
	Xexport PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh $0; kill $$)
	X
	Xif test ! -t 0; then
	X    echo "Say 'sh Configure', not 'sh <Configure'"
	X    exit 1
	Xfi
	X
	X: some greps do not return status, grrr.
	Xecho "grimblepritz" >grimble
	Xif grep blurfldyick grimble >/dev/null 2>&1 ; then
	X    contains=contains
	Xelse
	X    if grep grimblepritz grimble >/dev/null 2>&1 ; then
	X	contains=grep
	X    else
	X	contains=contains
	X    fi
	Xfi
	Xrm grimble
	X: the following should work in any shell
	Xcase $contains in
	Xcontains*)
	X    echo " "
	X    echo "AGH!  Grep doesn't return a status.  Attempting remedial action."
	X    cat >contains <<'EOSS'
	Xgrep "$1" "$2" >.greptmp && cat .greptmp && test -s .greptmp
	XEOSS
	Xchmod 755 contains
	Xesac
	X
	X: first determine how to suppress newline on echo command
	Xecho "Checking echo to see how to suppress newlines..."
	X(echo "hi there\c" ; echo " ") >.echotmp
	Xif $contains c .echotmp >/dev/null 2>&1 ; then
	X    echo "...using -n."
	X    n='-n'
	X    c=''
	Xelse
	X    echo "...using \\\c."
	X    n=''
	X    c='\c'
	Xfi
	Xecho $n "Type carriage return to continue.  Your cursor should be here-->$c"
	Xread ans
	Xrm .echotmp
	X
	X: now set up to do reads with possible shell escape
	X: if this does not work on your machine, 1,$s/. myread/read ans/
	Xcat <<EOSC >myread
	Xans='!'
	Xwhile expr "X\$ans" : "X!" >/dev/null; do
	X    read ans
	X    case "\$ans" in
	X    !)
	X	sh
	X	echo " "
	X	echo $n "Your answer: $c"
	X	;;
	X    !*)
	X	set \`expr "X\$ans" : "X!\(.*\)\$"\`
	X	sh -c "\$*"
	X	echo " "
	X	echo $n "Your answer: $c"
	X	;;
	X    esac
	Xdone
	XEOSC
	X
	X: general instructions
	Xcat <<'EOH'
	X 
	XThis installation shell script will examine your system and ask you questions
	Xto determine how rn and its auxiliary files should be installed.  If you
	Xget stuck on a question, you may use a ! shell escape to start a subshell or
	Xexecute a command.  Many of the questions will have default answers in
	Xsquare brackets--typing carriage return will give you the default.
	X
	XOn some of the questions which ask for file or directory names you are
	Xallowed to use the ~name construct to specify the login directory belonging
	Xto "name", even if you don't have a shell which knows about that.  Questions
	Xwhere this is allowed will be marked "(~name ok)".
	X
	XMuch effort has been expended to ensure that this shell script will run
	Xon any Unix system.  If despite that it blows up on you, your best bet is
	Xto edit Configure and run it again.  (Trying to install rn without having run
	XConfigure is well nigh impossible.)  Also, let me (lwall@sdcrdcf.UUCP) know
	Xhow I blew it.
	X
	XThis installation script affects things in two ways: 1) it does direct
	Xvariable substitutions on some of the files included in this kit, and
	X2) it builds a config.h file for inclusion in C programs.  You may edit
	Xany of these files as the need arises after running this script.
	X
	XEOH
	Xecho $n "[Type carriage return to continue] $c"
	X. myread
	X
	X: get old answers, if there is a config file out there
	Xif test -f config.sh; then
	X    echo " "
	X    echo "(Fetching default answers from your old config.sh file...)"
	X    . config.sh
	Xfi
	X
	X: get list of predefined functions in a handy place
	Xecho " "
	Xif test -f /lib/libc.a; then
	X    echo "Your C library is in /lib/libc.a.  You're normal."
	X    libc=/lib/libc.a
	Xelse
	X    if test -f /usr/lib/libc.a; then
	X	echo "Your C library is in /usr/lib/libc.a, of all places."
	X	libc=/usr/lib/libc.a
	X    else
	X	if test -f "$libc"; then
	X	    echo "Your C library is in $libc, like you said before."
	X	else
	X	    cat <<'EOM'
	X 
	XI can't seem to find your C library.  I've looked for /lib/libc.a and
	X/usr/lib/libc.a, but neither of those are there.  What is the full name
	XEOM
	X	    echo $n "of your C library? $c"
	X	    . myread
	X	    libc="$ans"
	X	fi
	X    fi
	Xfi
	Xecho " "
	Xecho $n "Extracting names from $libc for later perusal...$c"
	Xif ar t $libc > libc.list; then
	X    echo "done"
	Xelse
	X    echo " "
	X    echo "The archiver doesn't think $libc is a reasonable library."
	X    exit 1
	Xfi
	X
	X: make some quick guesses about what we are up against
	Xecho " "
	Xecho $n "Hmm...  $c"
	Xif $contains SIGTSTP /usr/include/signal.h >/dev/null 2>&1 ; then
	X    echo "Looks kind of like a BSD system, but we'll see..."
	X    echo exit 0 >bsd
	X    echo exit 1 >usg
	X    echo exit 1 >v7
	Xelse
	X    if $contains fcntl.o libc.list >/dev/null 2>&1 ; then
	X	echo "Looks kind of like a USG system, but we'll see..."
	X	echo exit 1 >bsd
	X	echo exit 0 >usg
	X	echo exit 1 >v7
	X    else
	X	echo "Looks kind of like a version 7 system, but we'll see..."
	X	echo exit 1 >bsd
	X	echo exit 1 >usg
	X	echo exit 0 >v7
	X    fi
	Xfi
	Xif $contains vmssystem.o libc.list >/dev/null 2>&1 ; then
	X    cat <<'EOI'
	XThere is, however, a strange, musty smell in the air that reminds me of
	Xsomething...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
	XEOI
	X    echo "exit 0" >eunice
	X    eunicefix=unixtovms
	X    eunice=define
	X: it so happens the Eunice I know will not run shell scripts in Unix format
	Xelse
	X    echo " "
	X    echo "Congratulations.  You aren't running Eunice."
	X    eunicefix=':'
	X    eunice=undef
	X    echo "exit 1" >eunice
	Xfi
	Xchmod 755 bsd usg v7 eunice
	X$eunicefix bsd usg v7 eunice
	X
	X: see how we invoke the C preprocessor
	Xecho " "
	Xecho "Checking to see how your C preprocessor is invoked..."
	Xcat <<'EOT' >testcpp.c
	X#define ABC abc
	X#define XYZ xyz
	XABC+XYZ
	XEOT
	Xecho 'Maybe "cc -E" will work...'
	Xcc -E testcpp.c >testcpp.out 2>&1
	Xif $contains 'abc+xyz' testcpp.out >/dev/null 2>&1 ; then
	X    echo "Yup, it does."
	X    cpp='cc -E'
	Xelse
	X    echo 'Nope...maybe "cc -P" will work...'
	X    cc -P testcpp.c >testcpp.out 2>&1
	X    if $contains 'abc+xyz' testcpp.out >/dev/null 2>&1 ; then
	X	echo "Yup, that does."
	X	cpp='cc -P'
	X    else
	X	echo 'Nixed again...maybe "/lib/cpp" will work...'
	X	/lib/cpp testcpp.c >testcpp.out 2>&1
	X	if $contains 'abc+xyz' testcpp.out >/dev/null 2>&1 ; then
	X	    echo "Hooray, it works!  I was beginning to wonder."
	X	    cpp='/lib/cpp'
	X	else
	X	    echo 'Hmm...maybe you already told me...'
	X	    case "$cpp" in
	X	    '') ;;
	X	    *) $cpp testcpp.c >testcpp.out 2>&1;;
	X	    esac
	X	    if $contains 'abc+xyz' testcpp.out >/dev/null 2>&1 ; then
	X		echo "Hooray, you did!  I was beginning to wonder."
	X	    else
	X		echo "Nope. I can't find a C preprocessor.  Name one: $c"
	X		. myread
	X		cpp="$ans"
	X		$cpp testcpp.c >testcpp.out 2>&1
	X		if $contains 'abc+xyz' testcpp.out >/dev/null 2>&1 ; then
	X		    echo "OK, that will do."
	X		else
	X		    echo "Sorry, I can't get that to work.  Go find one."
	X		    exit 1
	X		fi
	X	    fi
	X	fi
	X    fi
	Xfi
	Xrm -f testcpp.c testcpp.out
	X
	X: check for pdp11
	Xecho " "
	Xif usg; then
	X    : pdp11 is already defined
	Xelse
	X    cat <<'EOT' >pdp11.c
	X#ifdef pdp11
	Xexit 0
	X#else
	Xexit 1
	X#endif
	XEOT
	X    $cpp pdp11.c | grep exit >pdp11
	X    chmod 755 pdp11
	X    $eunicefix pdp11
	X    rm pdp11.c
	Xfi
	Xif pdp11; then
	X    echo "This looks like a pdp11 to me."
	Xelse
	X    echo "This doesn't look like a pdp11 to me."
	Xfi
	X
	X: see if sh knows # comments
	Xecho " "
	Xecho "Checking your sh to see if it knows about # comments..."
	Xif sh -c '#' >/dev/null 2>&1 ; then
	X    echo "Your sh handles # comments correctly."
	X    shsharp=true
	X    spitshell=cat
	X    echo " "
	X    echo "Okay, let's see if #! works on this system..."
	X    echo "#!/bin/echo hi" > try
	X    $eunicefix try
	X    chmod 755 try
	X    try > today
	X    if test -s today; then
	X	echo "It does."
	X	sharpbang='#!'
	X    else
	X	echo "#! /bin/echo hi" > try
	X	$eunicefix try
	X	chmod 755 try
	X	try > today
	X	if test -s today; then
	X	    echo "It does."
	X	    sharpbang='#! '
	X	else
	X	    echo "It doesn't."
	X	    sharpbang=': use '
	X	fi
	X    fi
	Xelse
	X    echo "Your sh doesn't grok # comments--I will strip them later on."
	X    shsharp=false
	X    echo "exec grep -v '^#'" >spitshell
	X    chmod 755 spitshell
	X    $eunicefix spitshell
	X    spitshell=`pwd`/spitshell
	X    echo "I presume that if # doesn't work, #! won't work either!"
	X    sharpbang=': use '
	Xfi
	X
	X: figure out how to guarantee sh startup
	Xecho " "
	Xecho "Checking out how to guarantee sh startup..."
	Xstartsh=$sharpbang'/bin/sh'
	Xecho "Let's see if '$startsh' works..."
	Xcat >try <<EOSS
	X$startsh
	Xset abc
	Xtest "$?abc" != 1
	XEOSS
	X
	Xchmod 755 try
	X$eunicefix try
	Xif try; then
	X    echo "Yup, it does."
	Xelse
	X    echo "Nope.  You may have to fix up the shell scripts to make sure sh runs them."
	Xfi
	Xrm -f try today
	X
	X: find out where common programs are
	Xecho " "
	Xecho "Locating common programs..."
	Xpth="/usr/ucb /bin /usr/bin /usr/local /usr/local/bin /usr/lbin /etc /usr/lib"
	Xcat <<EOSC >loc
	X$startsh
	Xthing=\$1
	Xshift
	Xdflt=\$1
	Xshift
	Xfor dir in \$*; do
	X    case "\$thing" in
	X    .)
	X	if test -d \$dir/\$thing; then
	X	    echo \$dir
	X	    exit 0
	X	fi
	X	;;
	X    *)
	X	if test -f \$dir/\$thing; then
	X	    echo \$dir/\$thing
	X	    exit 0
	X	fi
	X	;;
	X    esac
	Xdone
	Xecho \$dflt
	Xexit 1
	XEOSC
	Xchmod 755 loc
	X$eunicefix loc
	Xloclist="expr sed echo cat rm mv cp tail tr mkdir sort uniq grep"
	Xtrylist="test inews egrep more pg Mcc"
	Xfor file in $loclist; do
	X    xxx=`loc $file $file $pth`
	X    eval $file=$xxx
	X    case "$xxx" in
	X    /*)
	X	echo $file is in $xxx.
	X	;;
	X    *)
	X	echo "I don't know where $file is.  I hope it's in everyone's PATH."
	X	;;
	X    esac
	Xdone
	Xecho " "
	Xecho "Don't worry if any of the following aren't found..."
	Xfor file in $trylist; do
	X    xxx=`loc $file $file $pth`
	X    eval $file=$xxx
	X    case "$xxx" in
	X    /*)
	X	echo $file is in $xxx.
	X	;;
	X    *)
	X	echo "I don't see $file out there, offhand."
	X	;;
	X    esac
	Xdone
	Xcase $egrep in
	Xegrep)
	X    echo "Substituting grep for egrep."
	X    egrep=$grep
	X    ;;
	Xesac
	Xcase $test in
	Xtest)
	X    echo "Hopefully test is built into your sh."
	X    ;;
	X/bin/test)
	X    echo " "
	X    echo $n 'Is your "test" built into sh? [n] (OK to guess) '"$c"
	X    . myread
	X    case $ans in
	X    y*) test=test ;;
	X    esac
	X    ;;
	X*)
	X    test=test
	X    ;;
	Xesac
	Xcase $echo in
	Xecho)
	X    echo "Hopefully echo is built into your sh."
	X    ;;
	X/bin/echo)
	X    echo " "
	X    echo "Checking compatibility between /bin/echo and builtin echo (if any)..."
	X    $echo $n "hi there$c" >foo1
	X    echo $n "hi there$c" >foo2
	X    if cmp foo1 foo2 >/dev/null 2>&1; then
	X	echo "They are compatible.  In fact, they may be identical."
	X    else
	X	echo "They are not compatible--the echo builtin will be used."
	X	echo=echo
	X    fi
	X    $rm -f foo1 foo2
	X    ;;
	X*)
	X    echo=echo
	X    ;;
	Xesac
	X
	X: decide how portable to be
	Xcase "$portable" in
	Xdefine) dflt=y;;
	X*)	dflt=n;;
	Xesac
	X$cat <<'EOH'
	X 
	XI can set things up so that your shell scripts and binaries are more portable,
	Xat what may be a noticable cost in performance.  In particular, if you
	Xask to be portable, the following happens:
	X
	X     1) shell scripts will rely on the PATH variable rather than using
	X	the paths derived above.
	X     2) ~username interpretations will be done at run time rather than
	X	by Configure.
	X     3) the system name will be determined at run time, if at all possible.
	X
	XEOH
	X$echo $n "Do you expect to run these scripts and binaries on multiple machines? [$dflt] $c"
	X. myread
	Xcase $ans in
	X'') ans=$dflt;;
	Xesac
	Xcase $ans in
	X    y*) portable=define
	X	for file in $loclist; do
	X	    eval $file=$file
	X	done
	X	;;
	X    *)  portable=undef ;;
	Xesac
	X
	X: set up shell script to do ~ expansion
	Xcat >filexp <<EOSS
	X$startsh
	X: expand filename
	Xcase \$1 in
	X~/*|~)
	X    $echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	X    ;;
	X~*)
	X    if $test -f /bin/csh; then
	X	/bin/csh -f -c "glob \$1"
	X	$echo ""
	X    else
	X	name=\`$expr x\$1 : '..\([^/]*\)'\`
	X	dir=\`$sed </etc/passwd -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}'\`
	X	if $test ! -d "\$dir"; then
	X	    me=\`basename \$0\`
	X	    $echo "\$me: can't locate home directory for: \$name" >&2
	X	    exit 1
	X	fi
	X	case \$1 in
	X	*/*)
	X	    $echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
	X	    ;;
	X	*)
	X	    $echo \$dir
	X	    ;;
	X	esac
	X    fi
	X    ;;
	X*)
	X    $echo \$1
	X    ;;
	Xesac
	XEOSS
	Xchmod 755 filexp
	X$eunicefix filexp
	X
	X: now get the site name
	X$echo " "
	X$echo "Figuring out site name..."
	X$echo 'Maybe "hostname" will work...'
	Xif ans=`sh -c hostname 2>&1` ; then
	X    sitename=$ans
	X    hostcmd=hostname
	Xelse
	X    $echo 'No, maybe "uuname -l" will work...'
	X    if ans=`sh -c 'uuname -l' 2>&1` ; then
	X	sitename=$ans
	X	hostcmd='uuname -l'
	X    else
	X	$echo 'Strange.  Maybe "uname -n" will work...'
	X	if ans=`sh -c 'uname -n' 2>&1` ; then
	X	    sitename=$ans
	X	    hostcmd='uname -n'
	X	else
	X	    $echo 'Oh well, maybe I can mine it out of whoami.h...'
	X	    if ans=`sh -c $contains' sysname /usr/include/whoami.h' 2>&1` ; then
	X		sitename=`$echo "$ans" | $sed 's/^.*"\(.*\)"/\1/'`
	X		hostcmd="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' </usr/include/whoami.h"
	X	    else
	X		case "$sitename" in
	X		'') echo "Does this machine have an identity crisis or something?"
	X		    hostcmd=''
	X		    ;;
	X		*)  echo "Well, you said $sitename before...";;
	X		esac
	X	    fi
	X	fi
	X    fi
	Xfi
	X: you do not want to know about this
	Xset $sitename
	Xsitename=$1
	X
	X: translate upper to lower if necessary
	Xcase $sitename in
	X    *[A-Z]*)
	X	sitename=`$echo $sitename | tr '[A-Z]' '[a-z]'`
	X	$echo "(Normalizing case in your site name)"
	X	;;
	Xesac
	X
	X: verify guess
	Xif $test "$sitename" ; then
	X    $echo 'Your site name appears to be "'$sitename'".'
	X    $echo $n "Is this correct? [y] $c"
	X    . myread
	X    case $ans in
	X      y*|'')  ;;
	X      *)      sitename='' ;;
	X    esac
	Xfi
	X
	X: bad guess or no guess
	Xwhile $test "X$sitename" = X ; do
	X    $echo $n "Please type the (one word) name of your site: $c"
	X    . myread
	X    sitename="$ans"
	X    case $hostcmd in
	X    sed*)
	X	$echo "(That doesn't agree with your whoami.h file, by the way.)"
	X	;;
	X    *)
	X	$echo "(That doesn't agree with your $hostcmd command, by the way.)"
	X	;;
	X    esac
	X    hostcmd=''
	Xdone
	X
	X: try to deal with domains
	X$cat << 'EOH'
	X
	XPlease enter your domain name.  This will be used in conjunction
	Xwith the site name for return addresses on news articles and
	Xmail.  If you use the 4.3ism of having your domain in your
	Xhostname, all the posting programs will figure this out on the
	Xfly, so don't worry.
	X
	XExamples of some valid domains:
	X
	X	uucp
	X	arpa
	X	berkeley.edu
	X	nsa.gov
	X
	XEOH
	X
	Xdflt="uucp"
	X$echo $n "Your domain: [$dflt] $c"
	X. myread
	Xcase "$ans" in
	X'') domain="$dflt";;
	X*)  domain="$ans" ;;
	Xesac
	X
	Xif $test $portable = "undef" ; then
	X	case $sitename in
	X	*.*)	;;
	X	*)	sitename=$sitename.$domain
	X		;;
	X	esac
	Xfi
	X
	X: get organizaton name
	Xlongshots='/usr/src/new /usr/src/local /usr/local/src'
	Xcase "$orgname" in
	X'') if xxx=`loc news/src/defs.h x $longshots`; then
	X	dflt=`$sed -n 's/^.*MYORG[ 	]*"\(.*\)".*$/\1/p' $xxx`
	X    else
	X	dflt='no default'
	X    fi
	X    ;;
	X*)  dflt="$orgname";;
	Xesac
	X$cat << 'EOH'
	X 
	XPlease type the name of your organization as you want it to appear on the
	XOrganization line of outgoing articles.  (It's nice if this also specifies
	Xyour location.  Your city name is probably sufficient if well known.)
	XFor example:
	X
	X	University of Southern North Dakota, Hoople
	X
	XYou may also put the name of a file, as long as it begins with a slash.
	XFor example:
	X
	X	/etc/organization
	X
	XEOH
	Xorgname="no default"
	Xwhile test "X$orgname" = "Xno default"; do
	X    $echo $n "Organization: [$dflt] $c"
	X    . myread
	X    case "$ans" in
	X    '') orgname="$dflt";;
	X    *)  orgname="$ans" ;;
	X    esac
	Xdone
	X
	X: get news administrator name
	Xcase "$newsadmin" in
	X'')
	X    if $contains "^news:" /etc/passwd >/dev/null 2>&1 ; then
	X	dflt=news
	X    else
	X	if $contains "^usenet:" /etc/passwd >/dev/null 2>&1 ; then
	X	    dflt=news
	X	else
	X	    if eunice; then
	X		dflt=system
	X	    else
	X		dflt=root
	X	    fi
	X	fi
	X    fi
	X    ;;
	X*)  dflt="$newsadmin"
	X    ;;
	Xesac
	Xcat <<'EOM'
	X 
	XMany systems keep their news in a private directory, or have a non-superuser
	Xin charge of administering news.  (If you don't have such a user, take the
	Xdefault answer.)  What is the login name (not directory) that is used for news
	XEOM
	Xecho $n "administration? [$dflt] $c"
	X. myread
	Xnewsadmin="$ans"
	Xcase $newsadmin in
	X'') newsadmin=$dflt ;;
	Xesac
	Xcase $newsadmin in
	Xroot) isadmin=undef ;;
	X*)    isadmin=define ;;
	Xesac
	X
	X: figure out news library
	Xcase "$lib" in
	X'')
	X    dflt=/usr/lib/news
	X    ;;
	X*)  dflt=$lib ;;
	Xesac
	Xlibexp=$lib
	Xlibexp='blurfl/dyick'
	Xwhile $test ! -d "$libexp"; do
	X    $echo " "
	X    case "$libexp" in
	X    blurfl*) ;;
	X    *) $echo "Directory $libexp not found";;
	X    esac
	X    echo $n "Where is your news library (~name okay)? [$dflt] $c"
	X    . myread
	X    case "$ans" in
	X    '') ans="$dflt";;
	X    esac
	X    lib="$ans"
	X    case $lib in
	X    ~*)
	X	libexp=`filexp $lib`
	X	echo "(That is $libexp on this particular system.)"
	X	case $portable in
	X	  undef) lib=$libexp ;;
	X	esac
	X	;;
	X    *)
	X	libexp=$lib
	X	;;
	X    esac
	Xdone
	Xif $test -f $libexp/inews; then
	X    echo "Aha!  Inews is really in $libexp!  Maybe this is 2.10.2..."
	X    case $inews in
	X    inews) 
	X	: null
	X	;;
	X    *)
	X	echo "(Make sure $inews isn't an old version.)"
	X	;;
	X    esac
	X    inews=$libexp/inews
	Xfi
	X
	X: determine where manual pages go
	Xcase "$mansrc" in
	X'')
	X    dflt=`loc . /usr/man/man1 /usr/man/mann /usr/man/local/man1 /usr/man/u_man/man1 /usr/man/man1`
	X    ;;
	X*)  dflt="$mansrc"
	X    ;;
	Xesac
	Xmansrc='blurfl/dyick'
	Xwhile $test ! -d "$mansrc" ; do
	X    case $mansrc in
	X      blurfl*) ;;
	X      *) $echo "$mansrc does not appear to exist." ;;
	X    esac
	X    $echo " "
	X    $echo $n "Where do the manual pages (source) go? [$dflt] $c"
	X    . myread
	X    mansrc=`filexp "$ans"`
	X    case $mansrc in
	X      '') mansrc=$dflt ;;
	X    esac
	Xdone
	Xcase "$mansrc" in
	X*l)
	X    manext=l
	X    ;;
	X*n)
	X    manext=n
	X    ;;
	X*)
	X    manext=1
	X    ;;
	Xesac
	X
	X: determine where mail is spooled
	Xcase "$maildir" in
	X'')
	X    dflt=`loc . /usr/spool/mail /usr/spool/mail /usr/mail`
	X    ;;
	X*)  dflt="$maildir"
	X    ;;
	Xesac
	Xmaildir='blurfl/dyick'
	Xwhile $test ! -d "$maildir" ; do
	X    case $maildir in
	X      blurfl*) ;;
	X      *) $echo "$maildir does not appear to exist." ;;
	X    esac
	X    $echo " "
	X    $echo $n "Where is yet-to-be-read mail spooled? [$dflt] $c"
	X    . myread
	X    maildir=`filexp "$ans"`
	X    case $maildir in
	X      '') maildir=$dflt ;;
	X    esac
	Xdone
	X
	X: find out how to find out full name
	X$echo " "
	Xcase "$berkname" in
	Xdefine)
	X    dflt=y;;
	Xundef)
	X    dflt=n;;
	X*)
	X    if bsd; then
	X	dflt=y
	X    else
	X	dflt=n
	X    fi
	X    ;;
	Xesac
	X$echo "Does your /etc/passwd file keep full names in Berkeley/V7 format (name first"
	X$echo $n "thing after ':' in GCOS field)? [$dflt] $c"
	X. myread
	Xcase $ans in
	X  '') ans=$dflt ;;
	Xesac
	Xcase $ans in
	X  y*)
	X    passnam=define
	X    berknam=define
	X    usgnam=undef
	X    nametype=bsd
	X    ;;
	X  *)
	X    $echo " "
	X    case "$usgname" in
	X    define)
	X	dflt=y;;
	X    undef)
	X	dflt=n;;
	X    *)
	X	if usg; then
	X	    dflt=y
	X	else
	X	    dflt=n
	X	fi
	X	;;
	X    esac
	X    $echo "Does your passwd file keep full names in USG format (name sandwiched"
	X    $echo $n "between a '-' and a '(')? [$dflt] $c"
	X    . myread
	X    case $ans in
	X      '') ans=$dflt ;;
	X    esac
	X    case $ans in
	X      n*)
	X	$echo "Full name will be taken from ~/.fullname"
	X	passnam=undef
	X	berknam=undef
	X	usgnam=undef
	X	nametype=other
	X	;;
	X      *)
	X	passnam=define
	X	berknam=undef
	X	usgnam=define
	X	nametype=usg
	X	;;
	X    esac
	X    ;;
	Xesac
	X
	X: see if we need a special compiler
	X$echo " "
	Xif usg; then
	X    case "$cc" in
	X    '')
	X	case "$Mcc" in
	X	/*) dflt='Mcc'
	X	    ;;
	X	*)
	X	    if $contains '\-M' $mansrc/cc.1 >/dev/null 2>&1 ; then
	X		dflt='cc -M'
	X	    else
	X		dflt='cc'
	X	    fi
	X	    ;;
	X	esac
	X	;;
	X    *)  dflt="$cc";;
	X    esac
	X    $cat <<'EOM'
	X 
	XOn some systems the default C compiler will not resolve multiple global
	Xreferences that happen to have the same name.  On some such systems the
	X"Mcc" command may be used to force these to be resolved.  On other systems
	Xa "cc -M" command is required.  What command will force resolution on
	XEOM
	X    $echo $n "this system? [$dflt] $c"
	X    . myread
	X    cc="$ans"
	X    case "$cc" in
	X	'') cc="$dflt" ;;
	X    esac
	Xelse
	X    $echo "Not a USG system--assuming cc can resolve multiple definitions."
	X    cc=cc
	Xfi
	X
	X: see if we should throw a -i into the Makefile
	X$echo " "
	Xif pdp11; then
	X    if $contains '\-i' $mansrc/cc.1 >/dev/null 2>&1 ; then
	X	$echo $n "Your system appears to have separate I and D space.  Is this true? [y] $c"
	X	. myread
	X	case $ans in
	X	    n*|f*) iandd='' ;;
	X	    *)     iandd='-i' ;;
	X	esac
	X    else
	X	$echo "Your system appears to NOT have separate I and D space."
	X	$echo $n "Is this correct? [y] $c"
	X	. myread
	X	case $ans in
	X	    n*|f*) iandd='-i' ;;
	X	    *)     iandd='' ;;
	X	esac
	X    fi
	Xelse
	X    $echo "Not a pdp11--assuming no separate I and D."
	Xfi
	X
	X: index or strcpy
	X$echo " "
	Xif $contains index.o libc.list >/dev/null 2>&1 ; then
	X    $echo "Your system appears to use index() and rindex() rather than strchr()"
	X    $echo $n "and strrchr().  Is this correct? [y] $c"
	X    . myread
	X    case $ans in
	X	n*|f*) strchr='define' ;;
	X	*)     strchr='undef' ;;
	X    esac
	Xelse
	X    $echo "Your system appears to use strchr() and strrchr() rather than index()"
	X    $echo $n "and rindex().  Is this correct? [y] $c"
	X    . myread
	X    case $ans in
	X	n*|f*) strchr=undef ;;
	X	*)     strchr=define ;;
	X    esac
	Xfi
	X
	X: determine how to determine when a file is a mailbox
	Xcase "$mboxchar" in
	X'') dflt=F;;
	X*)  dflt="$mboxchar";;
	Xesac
	X$cat <<'EOM'
	X 
	XIn saving articles, rn wants to differentiate between saving to mailbox
	Xformat files and normal files.  It does this by examining the first character
	Xof the file in question.  On most systems the first line starts "From...",
	Xso the first character is F.  On other systems there are magic cookies like
	Xcontrol codes between articles, so one of those would be first.  On your
	Xsystem, if a file is in mailbox format, what is the first character of
	XEOM
	Xecho $n "that file? [$dflt] $c"
	X. myread
	Xmboxchar="$ans"
	Xcase $mboxchar in
	X'') mboxchar="$dflt" ;;
	Xesac
	Xcase $mboxchar in
	X'F') ;;
	X*)  cat <<'EOM'
	XYou will need to edit the shell script mbox.saver to properly append an
	Xarticle to a mailbox.  The arguments to the script are documented in
	XEOM
	X    case $shsharp in
	X    false)
	X	echo "comments in mbox.saver.std."
	X	;;
	X    true)
	X	echo "comments in the shell script itself."
	X	;;
	X    esac
	Xesac
	X
	X: where do we get termlib routines from
	X$echo " "
	Xans=`loc libcurses.a x /usr/lib /usr/local/lib /lib`
	Xcase "$ans" in
	X/*)
	X    ar t $ans >grimble
	X    if $contains tputs.o grimble >/dev/null 2>&1; then
	X	termlib='-lcurses'
	X	havetlib=define
	X	$echo "Terminfo library found."
	X    else
	X	ans=x
	X    fi
	X    ;;
	Xesac
	Xcase "$ans" in
	Xx)
	X    ans=`loc libtermlib.a x /usr/lib /usr/local/lib /lib`
	X    case "$ans" in
	X    /usr/lib*|/lib*)
	X	termlib='-ltermlib'
	X	havetlib=define
	X	$echo "Termlib library found."
	X	;;
	X    /*)
	X	termlib="$ans"
	X	havetlib=define
	X	$echo "Termlib library found."
	X	;;
	X    *)
	X	ans=`loc libtermcap.a x /usr/lib /usr/local/lib /lib`
	X	case "$ans" in
	X	/usr/lib*|/lib*)
	X	    termlib='-ltermcap'
	X	    havetlib=define
	X	    $echo "Termcap library found."
	X	    ;;
	X	/*)
	X	    termlib="$ans"
	X	    havetlib=define
	X	    $echo "Termcap library found."
	X	    ;;
	X	*)
	X	    case "$termlib" in
	X	    '')
	X		$echo $n "Your system appears to NOT have termlib-style routines.  Is this true? [y] $c"
	X		. myread
	X		case $ans in
	X		    n*|f*) havetlib=define
	X			  $echo "Then where are the termlib-style routines kept (specify either -llibname"
	X			  $echo $n " or full pathname (~name ok))? $c"
	X			  . myread
	X			  termlib=`filexp $ans`
	X			  ;;
	X		    *)    havetlib=undef
	X			  termlib=''
	X			  $echo "You will have to play around with term.c then."
	X			  ;;
	X		esac
	X		$echo " "
	X		;;
	X	    *)  $echo "You said termlib was $termlib before."
	X		;;
	X	    esac
	X	    ;;
	X	esac
	X	;;
	X    esac
	X    ;;
	Xesac
	X
	X: see if there is a whoami file
	Xif $test -r /usr/include/whoami.h ; then
	X    whoami=define
	X    $echo "whoami.h found."
	Xelse
	X    whoami=undef
	Xfi
	X
	X: see if this is a termio system
	Xif $test -r /usr/include/termio.h ; then
	X    termio=define
	X    $echo "termio.h found."
	Xelse
	X    if $test -r /usr/include/sgtty.h ; then
	X	termio=undef
	X	$echo "sgtty.h found."
	X    else
	X	termio=undef
	X	$echo "Neither termio.h nor sgtty.h found--you could have problems."
	X    fi
	Xfi
	X
	X: see if this is a termio system
	Xif $test -r /usr/include/fcntl.h ; then
	X    fcntl=define
	X    $echo "fcntl.h found."
	Xelse
	X    fcntl=undef
	X    $echo "No fcntl.h found, but that's ok."
	Xfi
	X
	X: see if ioctl defs are in sgtty/termio or sys/ioctl
	Xif $test -r /usr/include/sys/ioctl.h ; then
	X    ioctl=define
	X    $echo "sys/ioctl.h found."
	Xelse
	X    ioctl=undef
	X    $echo "sys/ioctl.h not found, assuming ioctl args are defined in sgtty.h."
	Xfi
	X
	X: see if there is a vfork
	Xif $contains vfork.o libc.list >/dev/null 2>&1 ; then
	X    $echo "vfork() found."
	X    novfork='undef'
	Xelse
	X    $echo "No vfork() found--will use fork() instead."
	X    novfork='define'
	Xfi
	X
	X: see if there is a getpw
	Xif $contains getpw.o libc.list >/dev/null 2>&1 ; then
	X    $echo "getpw() found."
	X    getpwent='undef'
	Xelse
	X    $echo "No getpw() found--will use getpwent() instead."
	X    getpwent='define'
	Xfi
	X
	X: see how we will look up site name
	Xdouname=undef
	Xgethostname=undef
	Xphostname=undef
	Xif $contains gethostname.o libc.list >/dev/null 2>&1 ; then
	X    $echo "gethostname() found."
	X    gethostname=define
	Xelse
	X    if $contains uname.o libc.list >/dev/null 2>&1 ; then
	X	$echo "uname() found."
	X	douname=define
	X    else
	X	case $hostcmd in
	X	  '') ;;
	X	  *)
	X	    $cat <<EOT
	X 
	XThere is no gethostname() or uname() on this system.  You have two
	Xpossibilites at this point:
	X
	X1)  You can have your site name ($sitename) compiled into rn, which lets rn
	X    start up faster, but makes your binaries non-portable, or
	X2)  you can have rn use a
	X	
	X	popen("$hostcmd","r")
	X
	X    which will start slower but be more portable.
	X
	XOption 1 will use whoami.h if you have one.  If you want option 2 but with
	Xa different command, you can edit config.h after this shell script is done.
	X
	XEOT
	X	    case "$phostname" in
	X	    define) dflt=n;;
	X	    undef)  dflt=y;;
	X	    '')
	X		case $portable in
	X		define) dflt=n ;;
	X		*)      dflt=y ;;
	X		esac
	X		;;
	X	    esac
	X	    $echo $n "Do you want your site name compiled in? [$dflt] $c"
	X	    . myread
	X	    case $ans in
	X	    '') ans=$dflt;;
	X	    esac
	X	    case $ans in
	X	      n*) phostname=define ;;
	X	      *)  hostcmd='' phostname=undef;;
	X	    esac
	X	    ;;
	X	esac
	X	case $hostcmd in
	X	  '')
	X	    case $whoami in
	X	      define)
	X		$echo 'No hostname function--using whoami.h.'
	X		;;
	X	      undef)
	X		$echo 'No hostname function--hardwiring "'$sitename'".'
	X		;;
	X	    esac
	X	    ;;
	X	esac
	X    fi
	Xfi
	X
	X: see if we need -ljobs and if we have sigset, etc.
	Xif $test -r /usr/lib/libjobs.a || $test -r /usr/local/lib/libjobs.a ; then
	X    $echo "Jobs library found."
	X    normsig=undef
	X    jobslib='-ljobs'
	Xelse
	X    if bsd; then
	X	$echo "No jobs library found.  (I suppose this is at least 4.2...)"
	X    else
	X	$echo "No jobs library found.  (That's okay, we all have our faults.)"
	X    fi
	X    normsig=define
	X    jobslib=''
	Xfi
	X
	X: see if there are directory access routines out there
	Xif $test -r /usr/lib/libndir.a || $test -r /usr/local/lib/libndir.a ; then
	X    $echo "Ndir library found."
	X    if $test -r /usr/lib/libndir.a; then
	X	ndirlib='-lndir'
	X    else
	X	ndirlib="/usr/local/lib/libndir.a"
	X    fi
	X    libndir=define
	X    usendir=undef
	X    ndirc=''
	X    ndiro=''
	Xelse
	X    ndirlib=''
	X    libndir=undef
	X    if $contains readdir.o libc.list >/dev/null 2>&1 ; then
	X	$echo "No ndir library found, but you have readdir() so we'll use that."
	X	usendir=undef
	X	ndirc=''
	X	ndiro=''
	X    else
	X	$echo "No ndir library found and no readdir() found--using ./ndir.c."
	X	usendir=define
	X	ndirc='ndir.c'
	X	ndiro='ndir.o'
	X    fi
	Xfi
	X
	X: locate spool directory
	Xcase "$spool" in
	X'')
	X    dflt=/usr/spool/news
	X    ;;
	X*)  dflt="$spool";;
	Xesac
	Xans='blurfl/dyick'
	Xwhile $test ! -d $ans; do
	X    $echo " "
	X    case "$ans" in
	X    blurfl*);;
	X    *) echo "Directory $ans not found.";;
	X    esac
	X    $echo $n "Where is news spooled (~name ok)? [$dflt] $c"
	X    . myread
	X    case "$ans" in
	X    '') ans="$dflt";;
	X    esac
	X    spool="$ans"
	X    case $spool in
	X    ~*)
	X	ans=`filexp $spool`
	X	echo "(That is $ans on this particular system.)"
	X	case $portable in
	X	  undef) spool=$ans ;;
	X	esac
	X	;;
	X    *)
	X	ans=$spool
	X	;;
	X    esac
	Xdone
	X
	X: locate active file
	Xcase "$active" in
	X'')
	X    dflt=$lib/active
	X    ;;
	X*)  dflt="$active";;
	Xesac
	Xmyactive='blurfl/dyick'
	Xwhile $test ! -f "$myactive"; do
	X    $echo " "
	X    case "$myactive" in
	X    blurfl*);;
	X    *) "File $myactive not found.";;
	X    esac
	X    $echo $n "Where is the active file (~name ok)? [$dflt] $c"
	X    . myread
	X    case "$ans" in
	X    '') ans="$dflt";;
	X    esac
	X    active="$ans"
	X    case $active in
	X    ~*)
	X	myactive=`filexp $active`
	X	echo "(That is $myactive on this particular system.)"
	X	case $portable in
	X	  undef) active=$myactive ;;
	X	esac
	X	;;
	X    *)
	X	myactive=$active
	X	;;
	X    esac
	X    if $test -d $myactive ; then
	X	myactive=$myactive/active
	X	active=$active/active
	X    fi
	Xdone
	X
	X: check for 2.10.2 and above
	Xecho " "
	Xif $contains ' [0-9][0-9]* [0-9]' "$myactive" >/dev/null 2>&1; then
	X    case "$norelay" in
	X    undef) dflt="n";;
	X    *)     dflt="y";;
	X    esac
	X    $echo $n "Are you running 2.10.3 or above? [${dflt}] $c"
	X    . myread
	X    case "$ans" in
	X    '') ans=$dflt;;
	X    esac
	X    case "$ans" in
	X    n*)
	X      norelay='undef'
	X    echo "Looks like you are running at least 2.10.2 news."
	X      ;;
	X    *)  norelay='define' ;;
	X    esac
	X    mininact=define
	Xelse
	X    echo "It doesn't look like you are running 2.10.2 news yet.  Are you planning"
	X    echo $n "to install it in the near future? [y] $c"
	X    . myread
	X    case $ans in
	X    n*) mininact=undef ;;
	X    *)  mininact=define ;;
	X    esac
	X    norelay='undef'
	Xfi
	X
	X
	X: check for void type
	X$echo " "
	X$echo "Checking to see if your C compiler groks the void type..."
	X$cat >try.c <<'EOCP'
	Xvoid main();
	XEOCP
	Xif cc -c try.c >/dev/null 2>&1 ; then
	X    novoid='undef'
	X    $echo "Yup, it does."
	Xelse
	X    novoid='define'
	X    $echo "Nope, it doesn't (boo hiss).  I will substitute int."
	Xfi
	X$rm try.*
	X
	X: find out which shell people like to use most
	Xans='blurfl/dyick'
	Xwhile $test ! -f "$ans" ; do
	X    case $ans in
	X      blurfl*) ;;
	X      *) $echo "$ans does not appear to exist." ;;
	X    esac
	X    case "$pref" in
	X    '')
	X	if $test -f /bin/ksh; then
	X	    dflt='/bin/ksh'
	X	else
	X	    if $test -f /bin/csh; then
	X		dflt='/bin/csh'
	X	    else
	X		dflt='/bin/sh'
	X	    fi
	X	fi
	X	;;
	X    *)  dflt="$pref";;
	X    esac
	X    $echo " "
	X    $echo "Give the full path name of the shell most people like to use on your"
	X    $echo $n "system: [$dflt] $c"
	X    . myread
	X    case $ans in
	X      '') ans=$dflt ;;
	X    esac
	Xdone
	Xpref=$ans
	X
	X: locate the preferred pager for this system
	Xcase "$pager" in
	X'')
	X    case $pg in
	X    /*) dflt=$pg
	X	;;
	X    esac
	X    case $more in
	X    /*) dflt=$more
	X	;;
	X    esac
	X    case $dflt in
	X    '') dflt=/usr/ucb/more
	X	;;
	X    esac
	X    ;;
	X*)  dflt="$pager";;
	Xesac
	Xpager='blurfl/dyick'
	Xwhile $test ! -f "$pager" ; do
	X    case $pager in
	X      blurfl*)
	X	$echo " "
	X	$echo "(If your kernel does terminal paging then you may answer this with '/bin/cat'.)"
	X	;;
	X      /*) $echo "$pager does not appear to exist."
	X	$echo " "
	X        ;;
	X      *) $echo "Please give the full path name."
	X	$echo " "
	X        ;;
	X    esac
	X    $echo $n "What pager is used on your system? [$dflt] $c"
	X    . myread
	X    pager="$ans"
	X    case $pager in
	X      '') pager="$dflt" ;;
	X    esac
	Xdone
	X
	X: determine default editor
	Xcase "$defeditor" in
	X'')
	X    dflt=/usr/ucb/vi
	X    ;;
	X*)  dflt="$defeditor"
	X    ;;
	Xesac
	Xdefeditor='blurfl/dyick'
	Xwhile $test ! -f "$defeditor" ; do
	X    case $defeditor in
	X      blurfl*) ;;
	X      *) $echo "$defeditor does not appear to exist." ;;
	X    esac
	X    $echo " "
	X    $echo $n "What is the default editor on your system? [$dflt] $c"
	X    . myread
	X    defeditor="$ans"
	X    case $defeditor in
	X      '') defeditor=$dflt ;;
	X    esac
	Xdone
	X
	X: determine mailer for Rnmail to use
	Xecho " "
	Xif $test -f /usr/lib/sendmail; then
	X    mailer=/usr/lib/sendmail
	Xelse
	X    if usg && $test -f $libexp/recmail; then
	X	mailer=$libexp/recmail
	X    else
	X	mailer=/bin/mail
	X    fi
	Xfi
	Xecho "Mail sender is $mailer"
	X
	X: check for internet mailer
	Xcase "$internet" in
	Xdefine) dflt=y;;
	Xundef)	dflt=n;;
	X*)	dflt=n;;
	Xesac
	Xcat <<EOM
	X 
	XSome newer mailers can deliver mail to addresses of the INTERNET persuasion,
	Xsuch as user@host.UUCP.  Other older mailers require the complete path to
	Xthe destination to be specified in the address.  Does your mailer understand
	XEOM
	X$echo $n "INTERNET addresses? [$dflt] $c"
	X. myread
	Xcase "$ans" in
	X'') ans=$dflt;;
	Xesac
	Xcase "$ans" in
	Xy*) internet=define;;
	X*)  internet=undef;;
	Xesac
	X
	X: determine where public executables go
	Xcase "$rnbin" in
	X'')
	X    dflt=`loc . /bin /usr/local/bin /usr/lbin /usr/local /usr/bin`
	X    ;;
	X*)  dflt="$rnbin"
	X    ;;
	Xesac
	Xrnbin='blurfl/dyick'
	Xwhile $test ! -d "$rnbin" ; do
	X    case $rnbin in
	X      blurfl*) ;;
	X      *) $echo "$rnbin does not appear to exist." ;;
	X    esac
	X    $echo " "
	X    $echo $n "Where do you want to put the public executables? [$dflt] $c"
	X    . myread
	X    rnbin="$ans"
	X    rnbin=`filexp $rnbin`
	X    case $rnbin in
	X      '') rnbin=$dflt ;;
	X    esac
	Xdone
	X
	X: determine where private executables go
	Xcase "$rnlib" in
	X'')
	X    dflt=$lib/rn
	X    ;;
	X*)  dflt="$rnlib"
	X    ;;
	Xesac
	X$echo " "
	X$echo "Rn has a number of auxiliary programs that need not be visible to the"
	X$echo "whole world.  Where do you want to put these private executables?"
	X$echo $n "[$dflt] (~name ok) $c"
	X. myread
	Xrnlib="$ans"
	Xcase $rnlib in
	X  '') rnlib=$dflt ;;
	Xesac
	Xcase $portable in
	Xundef)
	X    rnlib=`filexp $rnlib`
	X    ;;
	Xesac
	X: must not allow self reference
	Xcase $rnlib in
	X  /*)
	X    filexp=$rnlib/filexp
	X    ;;
	X  *)
	X    filexp=`pwd`/filexp
	X    ;;
	Xesac
	X
	X: get the local distribution prefixes
	Xif $test -f $libexp/sys ; then
	X    $sed <$libexp/sys -n -e "s/^$sitename://p" | \
	X    $sed -e "s/:.*//" -e "s/,/ /g" | tr ' ' '\012' | \
	X    $sed -e "/^to./d" -e "/^net$/d" -e "/^fa$/d" -e "/^mod$/d" > .distlist
	Xfi
	X
	X$cat <<'EOH'
	X 
	XDistribution groups are the things you use on the Distribution line to limit
	Xwhere an article will go to.  You are likely to be a member of several
	Xdistribution groups, such as organization, city, state, province, country,
	Xcontinent, etc.  For example, Los Angeles has the distribution prefix "la",
	XNew Jersey has the prefix "nj", and Europe has the prefix "eunet".
	X
	XThe categories you will be asked are: 
	X
	Xlocal organization	(Could be just one machine or a cluster or an office)
	Xorganization		att, dec, kgb, ...
	Xcity			la, ny, mosc, ...
	Xstate/province		ca, nj, bc, ...
	Xcountry			usa, can, rok, whatever
	Xcontinent		na (North America, not "Not Applicable"), asia, etc.
	X
	X(If you don't have a distribution prefix in any of these categories then
	Xjust hit return.)
	X
	XEOH
	Xif $test -f .distlist; then
	X    distlist=`tr '\012' ' ' <.distlist`
	X    if $test "$distlist" ; then
	X	$echo "(These are the distributions in your sys file: $distlist)"
	X	$echo " "
	X    fi
	Xfi
	Xcase "$locpref" in
	X'') dflt="";;
	X*)  dflt="[$locpref] ";;
	Xesac
	X$echo $n "What is the distribution prefix for your local organization? $dflt$c"
	X. myread
	Xcase "$ans" in
	X'') ;;
	X*)  locpref="$ans";;
	Xesac
	Xcase $locpref in
	X  '') locpref=none ;;
	Xesac
	Xcase "$orgpref" in
	X'') dflt="";;
	X*)  dflt="[$orgpref] ";;
	Xesac
	X$echo $n "What is the distribution prefix for your organization? $dflt$c"
	X. myread
	Xcase "$ans" in
	X'') ;;
	X*)  orgpref="$ans";;
	Xesac
	Xcase $orgpref in
	X  '') orgpref=none ;;
	Xesac
	Xcase "$citypref" in
	X'') dflt="";;
	X*)  dflt="[$citypref] ";;
	Xesac
	X$echo $n "What is the distribution prefix for your city? $dflt$c"
	X. myread
	Xcase "$ans" in
	X'') ;;
	X*)  citypref="$ans";;
	Xesac
	Xcase $citypref in
	X  '') citypref=none ;;
	Xesac
	Xcase "$statepref" in
	X'') dflt="";;
	X*)  dflt="[$statepref] ";;
	Xesac
	X$echo $n "What is the distribution prefix for your state/province? $dflt$c"
	X. myread
	Xcase "$ans" in
	X'') ;;
	X*)  statepref="$ans";;
	Xesac
	Xcase $statepref in
	X  '') statepref=none ;;
	Xesac
	Xcase "$cntrypref" in
	X'') dflt="";;
	X*)  dflt="[$cntrypref] ";;
	Xesac
	X$echo $n "What is the distribution prefix for your country? $dflt$c"
	X. myread
	Xcase "$ans" in
	X'') ;;
	X*)  cntrypref="$ans";;
	Xesac
	Xcase $cntrypref in
	X  '') cntrypref=none ;;
	Xesac
	Xcase "$contpref" in
	X'') dflt="";;
	X*)  dflt="[$contpref] ";;
	Xesac
	X$echo $n "What is the distribution prefix for your continent? $dflt$c"
	X. myread
	Xcase "$ans" in
	X'') ;;
	X*)  contpref="$ans";;
	Xesac
	Xcase $contpref in
	X  '') contpref=none ;;
	Xesac
	X
	X$echo " "
	X$echo "If you have any other distribution groups you will need to edit Pnews"
	X$echo "and newsetup to add them."
	X$echo " "
	X
	X: determine root id
	Xrootid=`$sed </etc/passwd -e "/^root:/{s/^[^:]*:[^:]*:\([^:]*\).*"'$'"/\1/" -e "q" -e "}" -e "d"`
	Xcase $rootid in
	X  '') rootid=0 ;;
	X  *)  $echo "Root uid = $rootid" ;;
	Xesac
	X
	X: weed out incompatibilities
	Xcase $douname in
	X  define) whoami=undef ;;
	Xesac
	X
	X: preserve RCS keywords in files with variable substitution, grrr
	XLog='$Log'
	XHeader='$Header'
	X
	X: Warnings
	Xif v7; then
	X    cat <<'EOM'
	X 
	XNOTE: the V7 compiler may ignore some #undefs that rn uses.  If so, you will
	Xget messages about redefining EXT.  Some V7 compilers also have difficulties
	Xwith #defines near buffer boundaries, so beware.  You may have to play with
	Xthe spacing in common.h.
	XEOM
	Xfi
	X
	Xif pdp11; then
	X    cat <<'EOM'
	X 
	XNOTE: the PDP-11 does not have enough data space to do subject caching
	Xreliably.  That feature will be disabled automatically.  Subject searching
	Xwill tend to be slow.
	XEOM
	Xfi
	X
	X$echo " "
	X$echo "End of configuration questions."
	X$echo " "
	X
	X: create config.sh file
	X$echo " "
	X$echo "Creating config.sh..."
	X$spitshell <<EOT >config.sh
	X$startsh
	X# config.sh
	X# This file was produced by running the Configure script.
	X
	Xn='$n'
	Xc='$c'
	Xlibc='$libc'
	Xeunicefix='$eunicefix'
	Xeunice='$eunice'
	Xcpp='$cpp'
	Xshsharp='$shsharp'
	Xstartsh='$startsh'
	Xspitshell='$spitshell'
	Xtest='$test'
	Xexpr='$expr'
	Xsed='$sed'
	Xecho='$echo'
	Xcat='$cat'
	Xrm='$rm'
	Xmv='$mv'
	Xcp='$cp'
	Xtail='$tail'
	Xtr='$tr'
	Xmkdir='$mkdir'
	Xsort='$sort'
	Xuniq='$uniq'
	Xinews='$inews'
	Xgrep='$grep'
	Xegrep='$egrep'
	Xcontains='$contains'
	Xlib='$lib'
	Xlibexp='$libexp'
	Xnametype='$nametype'
	Xcc='$cc'
	Xiandd='$iandd'
	Xtermlib='$termlib'
	Xjobslib='$jobslib'
	Xndirlib='$ndirlib'
	Xlibndir='$libndir'
	Xusendir='$usendir'
	Xndirc='$ndirc'
	Xndiro='$ndiro'
	Xpager='$pager'
	Xmailer='$mailer'
	Xinternet='$internet'
	Xrnbin='$rnbin'
	Xfilexp='$filexp'
	Xdistlist='$distlist'
	XLog='$Log'
	XHeader='$Header'
	Xsitename='$sitename'
	Xdomain='$domain'
	Xorgname='$orgname'
	Xisadmin='$isadmin'
	Xnewsadmin='$newsadmin'
	Xrnlib='$rnlib'
	Xmansrc='$mansrc'
	Xmanext='$manext'
	Xmaildir='$maildir'
	Xspool='$spool'
	Xactive='$active'
	Xmyactive='$myactive'
	Xmininact='$mininact'
	Xpref='$pref'
	Xdefeditor='$defeditor'
	Xrootid='$rootid'
	Xmboxchar='$mboxchar'
	Xlocpref='$locpref'
	Xorgpref='$orgpref'
	Xcitypref='$citypref'
	Xstatepref='$statepref'
	Xcntrypref='$cntrypref'
	Xcontpref='$contpref'
	Xstrchr='$strchr'
	Xnovoid='$novoid'
	Xnovfork='$novfork'
	Xportable='$portable'
	Xpassnam='$passnam'
	Xberknam='$berknam'
	Xusgnam='$usgnam'
	Xwhoami='$whoami'
	Xtermio='$termio'
	Xfcntl='$fcntl'
	Xioctl='$ioctl'
	Xnormsig='$normsig'
	Xhavetlib='$havetlib'
	Xgetpwent='$getpwent'
	Xgethostname='$gethostname'
	Xdouname='$douname'
	Xphostname='$phostname'
	Xhostcmd='$hostcmd'
	Xnorelay='$norelay'
	XCONFIG=true
	XEOT
	X
	X: create config.h file
	X$echo " "
	X$echo "Creating config.h..."
	X$cat <<EOT >config.h
	X/* config.h
	X * This file was produced by running the Configure script.
	X * Feel free to modify any of this as the need arises.
	X */
	X
	X/* name of the site.  May be overridden by gethostname, uname, etc. */
	X#define SITENAME "$sitename"
	X
	X/* name of the organization, may be a file name */
	X#define ORGNAME "$orgname"
	X
	X/* login name of news administrator, if any. */
	X#$isadmin NEWSADMIN "$newsadmin"
	X
	X/* news library, may use only ~ and %l expansion */
	X#define LIB "$lib"
	X
	X/* rn private library, may use ~ expansion, %x and %l */
	X#define RNLIB "$rnlib"
	X
	X/* location of the news spool directory, may use ~ expansion, %x and %l */
	X#define SPOOL "$spool"
	X
	X/* location of the active file, may use ~ expansion, %x and %l */
	X#define ACTIVE "$active"
	X
	X/* location of spooled mail */
	X#define MAILFILE "$maildir/%L"
	X
	X/* default shell--ok to be a slow shell like csh */
	X#define PREFSHELL "$pref"
	X
	X/* default editor */
	X#define DEFEDITOR "$defeditor"
	X
	X/* root uid */
	X#define ROOTID $rootid
	X
	X/* what is the first character of a mailbox? */
	X#define MBOXCHAR '$mboxchar'
	X
	X/* how to cancel an article */
	X#define CANCEL "$inews -h <%h"
	X
	X/* distribution groups */
	X#define LOCDIST "$locpref"
	X#define ORGDIST "$orgpref"
	X#define CITYDIST "$citypref"
	X#define STATEDIST "$statepref"
	X#define CNTRYDIST "$cntrypref"
	X#define CONTDIST "$contpref"
	X
	X#$strchr	index strchr	/* cultural */
	X#$strchr	rindex strrchr	/*  differences? */
	X#$novoid	void int	/* is void to be avoided? */
	X#$novfork	vfork fork	/* is vfork too virtual? */
	X#$eunice	EUNICE		/* no linking? */
	X#$eunice	VMS		/* not currently used, here just in case */
	X#$usendir	USENDIR		/* include ndir.c? */
	X#$libndir	LIBNDIR		/* include /usr/include/ndir.h? */
	X#$mininact	MININACT	/* include 2.10.2 optimization? */
	X#$portable	PORTABLE	/* do we do extra lookups to start up? */
	X#$passnam	PASSNAMES	/* do names come from the passwd file? */
	X				/*  (undef to take name from ~/.fullname) */
	X#$berknam	BERKNAMES	/* if so, are they Berkeley format? */
	X				/* (that is, ":name,stuff:") */
	X#$usgnam	USGNAMES	/* or are they USG format? */
	X				/* (that is, ":stuff-name(stuff):") */
	X#$whoami	WHOAMI		/* should we include whoami.h? */
	X#$termio	TERMIO		/* is this a termio system? */
	X#$fcntl		FCNTL		/* should we include fcntl.h? */
	X#$ioctl		IOCTL		/* are ioctl args all defined in one place? */
	X#$normsig	NORMSIG		/* use signal rather than sigset? */
	X#$havetlib	HAVETERMLIB	/* do we have termlib-style routines? */
	X#$getpwent	GETPWENT	/* need we include slow getpwent? */
	X#$internet	INTERNET	/* does our mailer do INTERNET addressing? */
	X#$gethostname	GETHOSTNAME	/* do we have a gethostname function? */
	X#$douname	DOUNAME		/* do we have a uname function? */
	X#$phostname	PHOSTNAME "$hostcmd"	/* how to get host name with popen */
	X#$norelay     NORELAY         /* 2.10.3 doesn't have Relay-Version line */
	XEOT
	X
	XCONFIG=true
	X
	X$rm -f libc.list .distlist kit*isdone
	X
	Xecho " "
	Xecho "Doing variable substitutions on various files..."
	Xecho " "
	Xset `$grep <MANIFEST '\.SH' | awk '{print $1}'`
	Xfor file in $*; do
	X    . $file
	Xdone
	X
	Xecho " "
	Xecho 'Now you need to generate make dependencies by running "makedepend".'
	Xecho 'You might prefer to run it in background: "makedepend > makedepend.out &"'
	Xecho $n "Would you like me to run it for you (it takes quite a while)? [n] $c" 
	X. myread
	Xcase "$ans" in
	Xy*) makedepend;;
	Xesac
	X: end of Configure
SHAR_EOF
if test 43901 -ne "`wc -c < 'Configure'`"
then
	echo shar: error transmitting "'Configure'" '(should have been 43901 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'HACKERSGUIDE'" '(4518 characters)'
if test -f 'HACKERSGUIDE'
then
	echo shar: will not over-write existing file "'HACKERSGUIDE'"
else
sed 's/^	X//' << \SHAR_EOF > 'HACKERSGUIDE'
	XHacking Notes
	X
	XIf you aren't interested in mucking with the innards of rn, don't read this.
	X
	XIn the interests of both space and time optimization, things are done inside
	Xrn that don't always conform to the highest ideals of programming.  To the
	Xextent I felt it was practical, I've tried to conform to good programming
	Xpractice, but you must realize that my goal was to make a better mousetrap,
	Xso certain conscious tradeoffs were made in the design of rn right from the
	Xstart.  In particular, if you want to hack on rn (and I wouldn't blame you,
	Xit's fun), beware of the following:
	X  
	X  * buf and cmd_buf are reused all over the place.  11-squishing is a good
	X    term for it.  No, I'm on a Vax now, but I've been there.
	X
	X  * The article header is parsed on the fly, while it is being displayed.
	X    In fact, practically everything is done on the fly within the article
	X    display loop, and there are plenty of state variables.  The header
	X    is never explicitly stored in memory; rather, pointers are kept into
	X    the file.  The information required to backup pages is not stored in
	X    memory, except for 1 buffer's worth.  The information required to do
	X    the delayed mark as unread (M) is not stored in memory either.
	X
	X  * Lots of contortions are gone through to avoid using static memory, or
	X    allocating unnecessary memory, or losing track of allocated memory,
	X    while at the same time allowing .newsrc lines and header lines to be
	X    ANY length up to the amount of memory you have.  Rn spends a great deal
	X    of effort being lazy.  Do not use a static buffer when you can use
	X    growstr().
	X
	X  * Lots of contortions are gone through to try to do things when people
	X    aren't waiting, or have only been waiting a very short time.  Guessing
	X    the next article to be opened and opening it, searching ahead for the
	X    next article with the same subject, delaying the look up of the number
	X    of articles in a newsgroup, writing the rest of the page while the
	X    reader is examining the header, cacheing up subjects while the user
	X    is reading, checkpointing the .newsrc only while the reader is in the
	X    middle of an interesting article, are some of the strategies employed.
	X  
	X  * There are plenty of goto's.  Most of them involve going back to reprompt,
	X    to reask for input, or to just plain do the unstructured things people
	X    want to do when they are glaring at a terminal.  If they bother you
	X    too much, just think of rn as a big state machine.  If they don't bother
	X    you at all, I don't want you hacking on rn.
	X
	X  * Put all includes at the front of the file, before the first function,
	X    or makedepend will not work right.  I could relax this, but makedepend
	X    would take about 5 times longer to run.
	X
	XIn general then, feel free to hack on rn.  Just don't broadcast untested
	Xpatches to the net.  Remember that there are people with limited address
	Xspaces and limited cpu cycles.  If you add a wonderful new feature and
	Xwant to publish a patch, put #ifdef's around it so that people who don't
	Xwant it or can't afford it can work around it.  THIS MEANS YOU.  We don't
	Xneed 57 varieties of mutually incompatible and incomprehensible rn floating
	Xabout the net.  Consider telling me about your patch so that I can consider
	Xincluding it in the standard version.  A COMPLETE PATCH TAKES INTO ACCOUNT
	XSYSTEM DEPENDENCIES AS DETERMINED BY THE CONFIGURE SCRIPT.
	X
	X* Don't use ints where rn uses typedefs, in particular, for article numbers.
	X* Don't use %d anywhere that someone might need a %ld.  (Just because YOU
	X    typedefed it as an int doesn't mean someone else won't need a long.)
	X* Don't use %D, that's archaic.
	X* Put FLUSHes after printf()s, fputs()es and putchar('\n')s for our poor
	X    brethern and sistern without line buffering.
	X* Declare the type of every function.  Use void, even if your C compiler
	X    doesn't.
	X* Follow the style that rn already uses!  This is my pet peeve.  Well, one of
	X    them, anyway.  I follow other people's strange styles when modifying
	X    their programs, so I'd be much obliged if you did likewise.
	X* Use lint.
	X* Use RCS.  Start a new branch, like 4.3.[2-9].  (I will use 4.3.1 myself.)
	X* Be structured wherever it doesn't interfere with practicality.
	X* Long live paranoid programming.  The rest of the program is out to get you.
	X    The world is out to destroy the program, not to mention the .newsrc.
	X    And then there's always bitrot...
	X* Stop reading this lugubrious trash and start thinking for yourself.
	X* Thank you and good night.
SHAR_EOF
if test 4518 -ne "`wc -c < 'HACKERSGUIDE'`"
then
	echo shar: error transmitting "'HACKERSGUIDE'" '(should have been 4518 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'INIT'" '(314 characters)'
if test -f 'INIT'
then
	echo shar: will not over-write existing file "'INIT'"
else
sed 's/^	X//' << \SHAR_EOF > 'INIT'
	X-ENEWSHEADER="Newsgroups: %F\\nSubject: Re: %S\\nSummary:\\nExpires:\\nReferences: %R\\nSender:\\nReply-To: %L@ukc.ac.uk (%N)\\nFollowup-To:\\nDistribution: %D\\nOrganization: %o\\nKeywords: \\n\\n"
	X-ESAMPLE="sample"
	X-EMAILFILE=~/.mail
	X-hRelay-Version
	X-hPosting-Version
	X-hPath
	X-hMessage-ID
	X-hDate-Received
	X-hXpath
SHAR_EOF
if test 314 -ne "`wc -c < 'INIT'`"
then
	echo shar: error transmitting "'INIT'" '(should have been 314 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'MANIFEST'" '(5581 characters)'
if test -f 'MANIFEST'
then
	echo shar: will not over-write existing file "'MANIFEST'"
else
sed 's/^	X//' << \SHAR_EOF > 'MANIFEST'
	XAfter all the rn kits are run you should have the following files:
	X
	XFilename	Kit Description
	X--------	--- -----------
	XConfigure        2  A shell script that installs everything system dependent.
	XEXTERN.h         9  When included, makes other includes not belong to me.
	XHACKERSGUIDE     5  A brief guide to the contorted innards of rn.
	XINIT             3  Sample system-wide switch file. (NEW)
	XINTERN.h         9  When included, makes other includes belong to me.
	XMANIFEST         7  This list of files.
	XMakefile.SH      7  The makefile.
	XNEW              3  List of new features with 4.3 rn.
	XPnews.1          8  Manual page for Pnews.
	XPnews.SH         5  A news posting shell script that knows about -h.
	XREADME           7  Installation instructions.
	XRnmail.1         8  Manual page for Rnmail.
	XRnmail.SH        7  A mailer that knows about -h.
	XWishlist         8  What the next version wants in it.
	Xaddng.c          8  Routines for scanning the active file for new newsgroups.
	Xaddng.h          9  Public info regarding addng.c.
	Xart.c            4  Routines to display an article.
	Xart.h            8  Public info regarding art.c.
	Xart.help.SH      7  Shell script for help at the article level.
	Xartio.c          8  Reserved for the article abstract type, someday.
	Xartio.h          8  Public info regarding artio.c.
	Xartsrch.c        6  Routines for searching among articles.
	Xartsrch.h        8  Public info regarding artsrch.c.
	Xartstate.h       8  Info on the current state of the article.
	Xbackpage.c       8  Routines for paging backwards in articles.
	Xbackpage.h       8  Public info regarding backpage.c.
	Xbits.c           3  Bitmap management functions.
	Xbits.h           8  Public info regarding bits.c.
	Xcheat.c          7  Routines to do lookahead of several types.
	Xcheat.h          8  Public info regarding cheat.c.
	Xcommon.h         3  Global info.
	Xfinal.c          7  Finalization (exit) routines.
	Xfinal.h          8  Public info regarding final.c.
	Xhead.c           7  Header parsing routines.
	Xhead.h           7  Public info regarding head.c.
	Xheader.c.1.pat   8  DOXREFS patch for header.c for 2.10.1 news.
	Xheader.c.2.pat   8  DOXREFS patch for header.c for 2.10.2 news.
	Xheader.h.1.pat   8  DOXREFS patch for header.h for 2.10.1 news.
	Xheader.h.2.pat   7  DOXREFS patch for header.h for 2.10.2 news.
	Xhelp.c           6  Help routines.
	Xhelp.h           9  Public info regarding help.c.
	Xinews.c.1.pat    6  DOXREFS and LINKART patches for 2.10.1 news.
	Xinews.c.2.pat    6  DOXREFS and LINKART patches for 2.10.2 news.
	Xinit.c           1  Initialization (startup) routines.
	Xinit.h           9  Public info regarding init.c.
	Xintrp.c          3  Filename expansion and % interpretation routines.
	Xintrp.h          8  Public info regarding intrp.c.
	Xkfile.c          7  KILL file routines.
	Xkfile.h          8  Public info regarding kfile.c.
	Xkitleader        8  Shell script to produce front of kit.
	Xkitlists.c       8  Knapsack packer.
	Xkittrailer       8  Shell script to produce end of kit.
	Xlast.c           8  Routines for handling the .rnlast file.
	Xlast.h           8  Public info regarding last.c.
	Xmakedepend.SH    8  Shell script to generate make dependencies.
	Xmakedir.SH       8  Shell script to make nested subdirectories.
	Xmakedist         4  Shell script to make a distribution kit.
	Xmakekit          8  Shell script to make a kit file.
	Xmanifake         8  Shell script to make MANIFEST.new file.
	Xmanimake         8  Shell script to make MANIFEST file.
	Xmbox.saver.SH    8  Shell script to save an article to a mailbox.
	Xndir.c           8  4.2 directory routine emulation.
	Xndir.h           8  Public info regarding ndir.c.
	Xnewsetup.1       8  Manual page for newsetup.
	Xnewsetup.SH      7  Shell script to create a .newsrc file.
	Xnewsgroups.1     8  Manual page for newsgroups.
	Xnewsgroups.SH    8  Shell script to list unsubscribed newsgroups.
	Xnewsnews.SH      8  A motd-like file that rn may print at startup.
	Xng.c             4  Routines to display a newsgroup.
	Xng.h             1  Public info regarding ng.c.
	Xng.help.SH       8  Shell script to do newsgroup selection help.
	Xngdata.c         7  General data fetching routines for a newsgroup.
	Xngdata.h         8  Public info regarding ngdata.c.
	Xngsrch.c         7  Routines to search among newsgroups.
	Xngsrch.h         8  Public info regarding ngsrch.c.
	Xngstuff.c        4  Support routines for ng.c.
	Xngstuff.h        8  Public info regarding ng.c.
	Xnorm.saver.SH    8  Shell script to save an article to a normal file.
	Xonly.c           8  Routines to perform newsgroup restriction.
	Xonly.h           8  Public info regarding only.c.
	Xpager.help.SH    8  Shell script for help at the pager level.
	Xrcln.c           5  Routines to mung a .newsrc line.
	Xrcln.h           8  Public info regarding rcln.c.
	Xrcstuff.c        2  Routines to mung the .newsrc file.
	Xrcstuff.h        8  Public info regarding rcstuff.c.
	Xrespond.c        6  Various routines for doing things with articles.
	Xrespond.h        8  Public info regarding respond.c.
	Xrn.1             1  Manual pages for rn. PLEASE READ.
	Xrn.c             5  Main program.
	Xrn.h             8  Public info regarding rn.c.
	Xsearch.c         4  Regular expression processing ala emacs.
	Xsearch.h         8  Public info regarding search.c.
	Xsubs.help.SH     8  Shell script for help for escape substitutions.
	Xsw.c             6  Switch processing routines.
	Xsw.h             9  Public info regarding switch.c.
	Xterm.c           5  Terminal interface routines.
	Xterm.h           7  Public info regarding term.c.
	Xutil.c           6  Utility routines.
	Xutil.h           8  Public info regarding util.c.
SHAR_EOF
if test 5581 -ne "`wc -c < 'MANIFEST'`"
then
	echo shar: error transmitting "'MANIFEST'" '(should have been 5581 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'NEW'" '(2905 characters)'
if test -f 'NEW'
then
	echo shar: will not over-write existing file "'NEW'"
else
sed 's/^	X//' << \SHAR_EOF > 'NEW'
	X		    NEW FEATURES WITH RN 4.3
	X
	XNew commands
	X	TAB (pager)	scan for end of quoted text.
	X	&& (anywhere)	set or display macros.
	X	Q (art level)	exit this newsgroup but stay on it.
	X	x (ng level)	exit rn without changing .newsrc.
	X
	XNew switch
	X	-=TERM-switch	apply switch if terminal is TERM.		
	X
	XNew environment variables
	X	RNMACRO		name of your macro and keymap file, if any.
	X	SUBJLINE	controls format of = article listing.
	X
	XNew % interpolations.
	X	%I		inclusion indicator (-F argument).
	X	%m		current mode of rn (newsgroup, pager, etc.)
	X	%z		length of current article.
	X	%"prompt"	prompt for input from keyboard.
	X	%`command`	same as shell backquotes.
	X	^char		now produces control-char.
	X
	XMacros and Keymaps
	X	You may now define macros of any reasonable length and map those
	X	macros onto your keyboard in any way.  You can completely remap the
	X	keyboard if you wish.  Macros may contain % interpolations.
	X
	XGlobal RNINIT file
	X	You can now set pseudo-environment variables on a system-wide basis
	X	in the file %X/INIT.  You don't have to recompile rn when you want 
	X	to try something different.
	X
	XPnews
	X	Can append your .signature if you like.
	X	Now knows how to mail to moderators.
	X	Runs somewhat faster now when invoked with -h.
	X	Will use %x/distributions if it exists.
	X	Doesn't ask for Distribution on local newsgroups.
	X	Doesn't ask for editor if EDITOR or VISUAL is set.
	X
	XTerminal handling
	X	-L switch uses erase-to-end-of-line to leave info on screen as long
	X		as possible.
	X	rn -c will not flush typeahead in your login script now.
	X	In multi-character commands, \ now quotes the next character.
	X	Support for non-line-buffered machines.  Certain V7 machines will
	X		appreciate the speedup.
	X
	XConfigure
	X	Lets the poor people without job control do shell escapes.
	X	Now remembers your old answers and uses them for defaults.
	X	Searches much more widely for libraries.
	X	Looks for Mcc or cc -M if it needs to.
	X	Finds pg if it needs to.  (Note, pg users: you can use macros to
	X		reverse the sense of CR and SP in rn now.)
	X	Figures out where manual pages go.
	X	Figures out where mail is spooled.
	X	Looks for ioctl.h, if any.
	X	Determines if you have a builtin echo that works differently than
	X		/bin/echo.
	X	Asks if your mail takes Internet addresses.
	X	Works reasonably on more systems, such as "Pyramids".
	X
	XMiscellaneous
	X	Commands may be typed directly to a help menu or subject list without
	X		having to type 'q' first.
	X	- command on first displayed article of a newsgroup takes you out to
	X		the previous newsgroup.  (Someday it will take you to the
	X		previous article in the previous newsgroup.)
	X	You can now easily get into a newsgroup with a KILL file and no
	X		unread articles.
	X	The catchup command at the top level now asks for confirmation.
	X	Interpretation routines now check for output buffer overflow.
	X	The pager no longer get hung up on non-initial ^L.
	X	The negative unread articles bug was fixed.
	X	Numerous small bug fixes.
SHAR_EOF
if test 2905 -ne "`wc -c < 'NEW'`"
then
	echo shar: error transmitting "'NEW'" '(should have been 2905 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'Pnews.1'" '(2917 characters)'
if test -f 'Pnews.1'
then
	echo shar: will not over-write existing file "'Pnews.1'"
else
sed 's/^	X//' << \SHAR_EOF > 'Pnews.1'
	X''' $Header: Pnews.1,v 4.3.1.2 85/08/01 14:22:48 lwall Exp $
	X''' 
	X''' $Log:	Pnews.1,v $
	X''' Revision 4.3.1.2  85/08/01  14:22:48  lwall
	X''' Added AUTHORCOPY.
	X''' 
	X''' Revision 4.3.1.1  85/05/10  11:30:30  lwall
	X''' Branch for patches.
	X''' 
	X''' Revision 4.3  85/05/01  11:33:50  lwall
	X''' Baseline for release with 4.3bsd.
	X''' 
	X.de Sh
	X.br
	X.ne 5
	X.PP
	X\fB\\$1\fR
	X.PP
	X..
	X.de Sp
	X.if t .sp .5v
	X.if n .sp
	X..
	X'''
	X'''     Set up \*(-- to give an unbreakable dash;
	X'''     string Tr holds user defined translation string.
	X'''     Bell System Logo is used as a dummy character.
	X'''
	X.ie n \{\
	X.tr \(bs-\*(Tr
	X.ds -- \(bs-
	X.if (\n(.H=4u)&(1m=24u) .ds -- \(bs\h'-12u'\(bs\h'-12u'-\" diablo 10 pitch
	X.if (\n(.H=4u)&(1m=20u) .ds -- \(bs\h'-12u'\(bs\h'-8u'-\" diablo 12 pitch
	X.ds L" ""
	X.ds R" ""
	X.ds L' '
	X.ds R' '
	X'br\}
	X.el\{\
	X.ds -- \(em\|
	X.tr \*(Tr
	X.ds L" ``
	X.ds R" ''
	X.ds L' `
	X.ds R' '
	X'br\}
	X.TH PNEWS 1 LOCAL
	X.SH NAME
	XPnews - a program for posting news articles
	X.SH SYNOPSIS
	X.B Pnews newsgroup title
	X.br
	X  or
	X.br
	X.B Pnews -h headerfile [oldarticle]
	X.br
	X  or
	X.br
	X.B Pnews
	X.SH DESCRIPTION
	XPnews is a friendly interface for posting news articles.
	XIt will ask several questions, then allow you to enter your article,
	Xand then post it using the inews(1) program.
	XIf you type h and a carriage return at any point,
	X.I Pnews
	Xwill tell you what it wants to know.
	X.PP
	XThe -h form is used when invoked from
	X.IR rn .
	XIf your editor can edit multiple files, and you want the article to which
	Xyou are replying to show up as an alternate file, define the environment
	Xvariable NEWSPOSTER as \*(L"Pnews -h %h %A\*(R".
	XYou can also modify the the NEWSHEADER environment variable to change the
	Xheader file that
	X.I rn
	Xpasses to Pnews.
	X.SH ENVIRONMENT
	X.IP AUTHORCOPY 8
	XIf defined, contains the name of a file to which the finished article will
	Xbe appended.
	X.Sp
	XDefault: article not saved
	X.IP DOTDIR 8
	XWhere to find your dot files, if they aren't in your home directory.
	XThis is primarily for accounts which are shared by more than one person.
	X.Sp
	XDefault: $HOME
	X.IP EDITOR 8
	XThe editor you want to use, if VISUAL is undefined.
	X.Sp
	XDefault: whatever your news administrator installed, usually vi.
	X.IP HOME 8
	XYour home directory.
	X.Sp
	XDefault: $LOGDIR
	X.IP LOGDIR 8
	XYour home directory if HOME is undefined.
	X.IP LOGNAME 8
	XYour login name, if USER is undefined.
	X.Sp
	XDefault: value of \*(L"whoami\*(R".
	X.IP NAME 8
	XYour full name.
	X.Sp
	XDefault: name from /etc/passwd, or ~/.fullname.
	X.IP ORGANIZATION 8
	XEither the name of your organization, or the name of a file containing the
	Xname of your organization.
	X.Sp
	XDefault: whatever your news administrator chose.
	X.IP USER 8
	XYour login name.
	X.Sp
	XDefault: $LOGNAME
	X.IP VISUAL 8
	XThe editor you want to use.
	X.Sp
	XDefault: $EDITOR
	X.SH FILES
	X$DOTDIR/.article
	X.br
	X~/dead.article
	X.SH SEE ALSO
	Xrn(1), Rnmail(1), inews(1)
	X.SH DIAGNOSTICS
	X.SH BUGS
	XNot the speediest program in the world, but maybe that's a blessing to the
	Xnet.
SHAR_EOF
if test 2917 -ne "`wc -c < 'Pnews.1'`"
then
	echo shar: error transmitting "'Pnews.1'" '(should have been 2917 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'README'" '(5757 characters)'
if test -f 'README'
then
	echo shar: will not over-write existing file "'README'"
else
sed 's/^	X//' << \SHAR_EOF > 'README'
	X			Rn Kit, Version 4.3
	X
	X		    Copyright (c) 1985, Larry Wall
	X
	XYou may copy the rn kit in whole or in part as long as you don't try to
	Xmake money off it, or pretend that you wrote it.
	X--------------------------------------------------------------------------
	X
	XPlease read all the directions below before you proceed any further, and
	Xthen follow them carefully.  Failure to do so may void your warranty. :-)
	X
	XAfter you have unpacked your kit, you should have all the files listed
	Xin MANIFEST.
	X
	XInstallation
	X
	X1)  Run Configure.  This will figure out various things about your system.
	X    Some things Configure will figure out for itself, other things it will
	X    ask you about.  It will then proceed to make config.h, config.sh, Makefile,
	X    and a bunch of shell scripts.  It will also do a make depend for you.
	X    You might possibly have to trim # comments from the front of Configure
	X    if your sh doesn't handle them, but all other # comments will be taken
	X    care of.
	X
	X2)  Glance through config.h and common.h to make sure system dependencies
	X    are correct.  Most of them should have been taken care of by running
	X    the Configure script.
	X
	X    If you have any additional changes to make to the C definitions, they
	X    can be done in the Makefile, in config.h, or in common.h.  If you have
	X    strange mailboxes on your system you should modify mbox.saver to correctly
	X    append an article to a mailbox or folder.
	X
	X    If you are on a machine with limited address space, you may have to
	X    remove some of the special functions of rn to make it fit.  This is
	X    easily done by undefining symbols in the System Dependencies section
	X    of common.h.  You should run "make depend" again to be safe.
	X
	X3)  make
	X
	X    This will attempt to make rn in the current directory.
	X
	X4)  make install
	X
	X    This will put rn, newsetup, newsgroups, Pnews, and Rnmail into a public
	X    directory (normally /usr/local/bin), and put a number of files into the
	X    private rn library (normally /usr/lib/news/rn).  It will also try to put
	X    the man pages in a reasonable place.
	X
	X5)  Read the manual entry before running rn.  It's quite different from
	X    readnews.
	X
	X6)  Install the Xref patch to header.h, header.c, and inews.c.  These patches
	X    are found in header.h.?.pat, header.c.?.pat, and inews.c.?.pat, where ? is
	X    either 1 for news 2.10.1 (or earlier) or 2 for 2.10.2.  Last I heard,
	X    2.10.3 was going to have the Xref patch built in.  The purpose
	X    of the Xref patch is to put an Xref: line in the header of articles
	X    posted to more than one newsgroup.  Rn uses this line to keep from showing
	X    such postings more than once.  Other than that rn will work without
	X    this patch, so if you just want to try out rn you can delay putting in
	X    the patch.
	X
	X    When you put in the patch and recompile inews, don't forget to define
	X    DOXREFS in the makefile for inews.  Do NOT define LINKART unless you
	X    are a Eunice site and really want to do that.  In fact, if you are not
	X    a Eunice site you needn't install the LINKART part of the patch.
	X
	X    NOTE: the Makefile that comes with some of the older news systems does not
	X    have all the dependencies quite right.  In particular, ifuncs.c may
	X    not recompile when you change header.h.  If this happens when you install
	X    the Xref patch, inews will start dumping core.  Make sure both inews.o
	X    and ifuncs.o depend on header.h in the Makefile.
	X
	X    Eunice users: the inews.c patch contains both the Xref patch and a LINKART
	X    patch to put a form of "symbolic link" between articles posted to
	X    multiple newsgroups.  What it does is to put the article into the first
	X    newsgroup on the Newsgroups line, and in subsequent newsgroups it just
	X    puts a little file containing the name of the article in the first
	X    newsgroup.  Rn (when compiled with the LINKART option) is clever about
	X    these pseudo-articles, and ends up opening the right one.  YOU WILL NOT
	X    be able to use readnews or vnews on your system without modification,
	X    though.  If you do this, be sure to define both DOXREFS and LINKART in
	X    the makefile for inews.c.  If you are using the option in inews that
	X    copies instead of linking, you will want to rip that out.
	X
	X    NOTE: if you transmit articles to other systems using xfernews with the
	X    U flag, Xref's can leak out of your system, as can Date-Received's.  This
	X    may make neighboring sites unhappy unless they also have the Xref patch
	X    installed.  For now, either don't use the U flag, or fix the inews/xfernews
	X    interaction.
	X
	X7)  Try rn, and play with some of the switches.  You may want to make -/
	X    default on your system.  This is done in common.h.  You may want to modify
	X    which header lines are displayed by default--this is done in head.h.
	X
	X    To change default values of enviroment variables on a system-wide basis
	X    without recompiling rn, put switches into file INIT in the rn library.
	X
	X8)  IMPORTANT!  Help save the world!  Communicate any problems and
	X    suggested patches to me, lwall@sdcrdcf.UUCP (Larry Wall), so we can
	X    keep the world in sync.  If you have a problem, there's someone else
	X    out there who either has had or will have the same problem.
	X
	X    If possible, send in patches such that the patch program will apply them.
	X    Context diffs are the best, then normal diffs.  Don't send ed scripts--
	X    I've probably changed my copy since the version you have.
	X
	X    Watch for rn patches in net.sources.bugs.  Patches will generally be
	X    applyable (is that a word?) by the patch program.  If you are just
	X    now bringing up news and aren't sure how many patches there are, write
	X    to me and I'll send any you don't have.
	X
	X9)  If you are going to hack on rn, please read the HACKERSGUIDE first.
SHAR_EOF
if test 5757 -ne "`wc -c < 'README'`"
then
	echo shar: error transmitting "'README'" '(should have been 5757 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'Rnmail.1'" '(2825 characters)'
if test -f 'Rnmail.1'
then
	echo shar: will not over-write existing file "'Rnmail.1'"
else
sed 's/^	X//' << \SHAR_EOF > 'Rnmail.1'
	X''' $Header: Rnmail.1,v 4.3.1.2 85/08/01 14:22:08 lwall Exp $
	X''' 
	X''' $Log:	Rnmail.1,v $
	X''' Revision 4.3.1.2  85/08/01  14:22:08  lwall
	X''' Added MAILRECORD, DOTDIR.
	X''' 
	X''' Revision 4.3.1.1  85/05/10  11:30:44  lwall
	X''' Branch for patches.
	X''' 
	X''' Revision 4.3  85/05/01  11:34:28  lwall
	X''' Baseline for release with 4.3bsd.
	X''' 
	X.de Sh
	X.br
	X.ne 5
	X.PP
	X\fB\\$1\fR
	X.PP
	X..
	X.de Sp
	X.if t .sp .5v
	X.if n .sp
	X..
	X'''
	X'''     Set up \*(-- to give an unbreakable dash;
	X'''     string Tr holds user defined translation string.
	X'''     Bell System Logo is used as a dummy character.
	X'''
	X.ie n \{\
	X.tr \(bs-\*(Tr
	X.ds -- \(bs-
	X.if (\n(.H=4u)&(1m=24u) .ds -- \(bs\h'-12u'\(bs\h'-12u'-\" diablo 10 pitch
	X.if (\n(.H=4u)&(1m=20u) .ds -- \(bs\h'-12u'\(bs\h'-8u'-\" diablo 12 pitch
	X.ds L" ""
	X.ds R" ""
	X.ds L' '
	X.ds R' '
	X'br\}
	X.el\{\
	X.ds -- \(em\|
	X.tr \*(Tr
	X.ds L" ``
	X.ds R" ''
	X.ds L' `
	X.ds R' '
	X'br\}
	X.TH RNMAIL 1 LOCAL
	X.SH NAME
	XRnmail - a program for replying via mail
	X.SH SYNOPSIS
	X.B Rnmail destination_list
	X.br
	X  or
	X.br
	X.B Rnmail -h headerfile [oldarticle]
	X.br
	X  or
	X.br
	X.B Rnmail
	X.SH DESCRIPTION
	XRnmail is a friendly interface for mailing replies to news articles.
	XIt will ask several questions, then allow you to enter your letter,
	Xand then mail it off.
	XIf you type h and a carriage return at any point,
	X.I Rnmail
	Xwill tell you what it wants to know.
	X.PP
	XThe -h form is used when invoked from
	X.IR rn .
	XIf your editor can edit multiple files, and you want the article to which
	Xyou are replying to show up as an alternate file, define the environment
	Xvariable MAILPOSTER as \*(L"Rnmail -h %h %A\*(R".
	XYou can also modify the the MAILHEADER environment variable to change the
	Xheader file that
	X.I rn
	Xpasses to Rnmail.
	X.SH ENVIRONMENT
	X.IP DOTDIR 8
	XIf defined, specifies a place other than your home directory where 'dot' files
	Xmay be stored.
	XThis is primarily for accounts which are shared by more than one person.
	X.Sp
	XDefault: $HOME
	X.IP EDITOR 8
	XThe editor you want to use, if VISUAL is undefined.
	X.Sp
	XDefault: whatever your news administrator installed, usually vi.
	X.IP HOME 8
	XYour home directory.
	X.Sp
	XDefault: $LOGDIR
	X.IP LOGDIR 8
	XYour home directory if HOME is undefined.
	X.IP LOGNAME 8
	XYour login name, if USER is undefined.
	X.Sp
	XDefault: value of \*(L"whoami\*(R".
	X.IP MAILRECORD 8
	XIf defined, contains the name of a file to which the finished message will
	Xbe appended.
	X.Sp
	XDefault: message not saved
	X.IP ORGANIZATION 8
	XEither the name of your organization, or the name of a file containing the
	Xname of your organization.
	X.Sp
	XDefault: whatever your news administrator chose.
	X.IP USER 8
	XYour login name.
	X.Sp
	XDefault: $LOGNAME
	X.IP VISUAL 8
	XThe editor you want to use.
	X.Sp
	XDefault: $EDITOR
	X.SH FILES
	X$DOTDIR/.letter
	X.br
	X~/dead.letter
	X.SH SEE ALSO
	Xrn(1), Pnews(1), mail(1)
	X.SH DIAGNOSTICS
	X.SH BUGS
	XUses /bin/mail in the absence of sendmail.
SHAR_EOF
if test 2825 -ne "`wc -c < 'Rnmail.1'`"
then
	echo shar: error transmitting "'Rnmail.1'" '(should have been 2825 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'Wishlist'" '(800 characters)'
if test -f 'Wishlist'
then
	echo shar: will not over-write existing file "'Wishlist'"
else
sed 's/^	X//' << \SHAR_EOF > 'Wishlist'
	XGeneralized article set manipulation
	X	Interface to subject listing.
	X	Recursive newsgroup visitation.
	XVirtual article abstract type to allow the following:
	X	Personalized header munging via % subs.
	X	Undigestification.
	X	Personal archive perusal.
	X	Mail handling.
	X	Remotely stored news.
	XParent command (waiting for ARTFILE interface and recursive newsgroups).
	XMerge Pnews and postnews.
	XVnews duplicate suppression algorithm for sites that can't do Xref patch.
	XDynamic allocation of stuff currently restricted by MAXRCLINE.
	X	(And pull parallel arrays into array of structs).
	XSeparation of .newsrc functions and newsgroup functions to separate processes
	X	communicating via pipes (to make fit on non-separate-I-and-D pdp11,
	X	or unreasonable facsimiles thereof).
	XFaster!!!
	XSmaller!!!
	XMore general!!!
	XPerfect?
SHAR_EOF
if test 800 -ne "`wc -c < 'Wishlist'`"
then
	echo shar: error transmitting "'Wishlist'" '(should have been 800 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'kitleader'" '(541 characters)'
if test -f 'kitleader'
then
	echo shar: will not over-write existing file "'kitleader'"
else
sed 's/^	X//' << \SHAR_EOF > 'kitleader'
	X#! /bin/sh
	X# $Header: kitleader,v 4.3 85/05/01 11:42:03 lwall Exp $
	X#
	X# $Log:	kitleader,v $
	X# Revision 4.3  85/05/01  11:42:03  lwall
	X# Baseline for release with 4.3bsd.
	X# 
	X
	Xcat >$1 <<EOT
	X#! /bin/sh
	X
	X# Make a new directory for the rn sources, cd to it, and run kits 1 thru $3 
	X# through sh.  When all $3 kits have been run, read README.
	X
	Xecho "This is rn kit $2 (of $3).  If kit $2 is complete, the line"
	Xecho '"'"End of kit $2 (of $3)"'" will echo at the end.'
	Xecho ""
	Xexport PATH || (echo "You didn't use sh, you clunch." ; kill \$\$)
	XEOT
SHAR_EOF
if test 541 -ne "`wc -c < 'kitleader'`"
then
	echo shar: error transmitting "'kitleader'" '(should have been 541 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'kittrailer'" '(682 characters)'
if test -f 'kittrailer'
then
	echo shar: will not over-write existing file "'kittrailer'"
else
sed 's/^	X//' << \SHAR_EOF > 'kittrailer'
	X#! /bin/sh
	X# $Header: kittrailer,v 4.3 85/05/01 11:42:11 lwall Exp $
	X#
	X# $Log:	kittrailer,v $
	X# Revision 4.3  85/05/01  11:42:11  lwall
	X# Baseline for release with 4.3bsd.
	X# 
	X
	Xrangelist=`range 1 $3`
	Xcat >>$1 <<EOT
	Xecho ""
	Xecho "End of kit $2 (of $3)"
	Xcat /dev/null >kit${2}isdone
	Xconfig=true
	Xfor iskit in $rangelist; do
	X    if test -f kit\${iskit}isdone; then
	X	echo "You have run kit \${iskit}."
	X    else
	X	echo "You still need to run kit \${iskit}."
	X	config=false
	X    fi
	Xdone
	Xcase \$config in
	X    true)
	X	echo "You have run all your kits.  Please read README and then type Configure."
	X	chmod 755 Configure
	X	;;
	Xesac
	X: I do not append .signature, but someone might mail this.
	Xexit
	XEOT
SHAR_EOF
if test 682 -ne "`wc -c < 'kittrailer'`"
then
	echo shar: error transmitting "'kittrailer'" '(should have been 682 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'makedist'" '(232 characters)'
if test -f 'makedist'
then
	echo shar: will not over-write existing file "'makedist'"
else
sed 's/^	X//' << \SHAR_EOF > 'makedist'
	X#!/bin/sh
	X# $Header: makedist,v 4.3 85/05/01 11:42:35 lwall Exp $
	X#
	X# $Log:	makedist,v $
	X# Revision 4.3  85/05/01  11:42:35  lwall
	X# Baseline for release with 4.3bsd.
	X# 
	X
	Xrm -f kit*.list
	Xmanifake
	Xkitlists
	Xmanimake
	Xmakekit kit*.list
SHAR_EOF
if test 232 -ne "`wc -c < 'makedist'`"
then
	echo shar: error transmitting "'makedist'" '(should have been 232 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'makekit'" '(745 characters)'
if test -f 'makekit'
then
	echo shar: will not over-write existing file "'makekit'"
else
sed 's/^	X//' << \SHAR_EOF > 'makekit'
	X#!/bin/sh
	X# $Header: makekit,v 4.3 85/05/01 11:42:38 lwall Exp $
	X#
	X# $Log:	makekit,v $
	X# Revision 4.3  85/05/01  11:42:38  lwall
	X# Baseline for release with 4.3bsd.
	X# 
	X
	Xnumkits=$#
	Xfor kitlist in $*; do
	X    kit=`basename $kitlist .list`
	X    kitnum=`expr "$kit" : 'kit\([0-9][0-9]*\)'`
	X    echo "*** Making $kit ***"
	X    kitleader "$kit" "$kitnum" "$numkits"
	X    for file in `/bin/cat $kitlist`; do
	X	echo $file
	X	echo "echo Extracting $file" >> $kit
	X	if egrep '^\.$' $file; then
	X	    echo "sed >$file <<'!STUFFY!FUNK!' -e 's/X//'" >> $kit
	X	    sed <$file >>$kit -e 's/^/X/'
	X	else
	X	    echo "cat >$file <<'!STUFFY!FUNK!'" >> $kit
	X	    /bin/cat $file >> $kit
	X	fi
	X	echo "!STUFFY!FUNK!" >> $kit
	X    done
	X    kittrailer "$kit" "$kitnum" "$numkits"
	Xdone
SHAR_EOF
if test 745 -ne "`wc -c < 'makekit'`"
then
	echo shar: error transmitting "'makekit'" '(should have been 745 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'manifake'" '(458 characters)'
if test -f 'manifake'
then
	echo shar: will not over-write existing file "'manifake'"
else
sed 's/^	X//' << \SHAR_EOF > 'manifake'
	X#!/bin/sh
	X# $Header: manifake,v 4.3 85/05/01 11:42:41 lwall Exp $
	X#
	X# $Log:	manifake,v $
	X# Revision 4.3  85/05/01  11:42:41  lwall
	X# Baseline for release with 4.3bsd.
	X# 
	X
	X: make MANIFEST and MANIFEST.new say the same thing
	Xif test ! -f MANIFEST.new; then
	X    if test -f MANIFEST; then
	X	sed <MANIFEST >MANIFEST.new \
	X	    -e '1,/---/d' \
	X	    -e 's/\([ 	][ 	]*\)[0-9]*  */\1/'
	X    else
	X	echo "Make a MANIFEST.new file, with names and descriptions."
	X    fi
	Xfi
SHAR_EOF
if test 458 -ne "`wc -c < 'manifake'`"
then
	echo shar: error transmitting "'manifake'" '(should have been 458 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'manimake'" '(691 characters)'
if test -f 'manimake'
then
	echo shar: will not over-write existing file "'manimake'"
else
sed 's/^	X//' << \SHAR_EOF > 'manimake'
	X#!/bin/sh
	X# $Header: manimake,v 4.3 85/05/01 11:42:46 lwall Exp $
	X#
	X# $Log:	manimake,v $
	X# Revision 4.3  85/05/01  11:42:46  lwall
	X# Baseline for release with 4.3bsd.
	X# 
	X
	X: make MANIFEST and MANIFEST.new say the same thing
	Xif test -f MANIFEST.new; then
	X    cat <<'EOH' > MANIFEST
	XAfter all the rn kits are run you should have the following files:
	X
	XFilename	Kit Description
	X--------	--- -----------
	XEOH
	X    sort MANIFEST.new >.mani
	X    grep . kit*.list | sed 's/^kit\(.*\)\.list:\$*\(.*\)$/\2 |\1|/' | \
	X	sort | \
	X	join -a1 - .mani | \
	X	awk -F'|' '{printf "%-16s%2s %s\n",$1,$2,$3}' | \
	X	unexpand >> MANIFEST
	X    rm .mani
	Xelse
	X    echo "You don't have a MANIFEST.new file.  Run manifake."
	Xfi
SHAR_EOF
if test 691 -ne "`wc -c < 'manimake'`"
then
	echo shar: error transmitting "'manimake'" '(should have been 691 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'newsetup.1'" '(1599 characters)'
if test -f 'newsetup.1'
then
	echo shar: will not over-write existing file "'newsetup.1'"
else
sed 's/^	X//' << \SHAR_EOF > 'newsetup.1'
	X''' $Header: newsetup.1,v 4.3 85/05/01 11:43:22 lwall Exp $
	X''' 
	X''' $Log:	newsetup.1,v $
	X''' Revision 4.3  85/05/01  11:43:22  lwall
	X''' Baseline for release with 4.3bsd.
	X''' 
	X''' 
	X.de Sh
	X.br
	X.ne 5
	X.PP
	X\fB\\$1\fR
	X.PP
	X..
	X.de Sp
	X.if t .sp .5v
	X.if n .sp
	X..
	X'''
	X'''     Set up \*(-- to give an unbreakable dash;
	X'''     string Tr holds user defined translation string.
	X'''     Bell System Logo is used as a dummy character.
	X'''
	X.ie n \{\
	X.tr \(bs-\*(Tr
	X.ds -- \(bs-
	X.if (\n(.H=4u)&(1m=24u) .ds -- \(bs\h'-12u'\(bs\h'-12u'-\" diablo 10 pitch
	X.if (\n(.H=4u)&(1m=20u) .ds -- \(bs\h'-12u'\(bs\h'-8u'-\" diablo 12 pitch
	X.ds L" ""
	X.ds R" ""
	X.ds L' '
	X.ds R' '
	X'br\}
	X.el\{\
	X.ds -- \(em\|
	X.tr \*(Tr
	X.ds L" ``
	X.ds R" ''
	X.ds L' `
	X.ds R' '
	X'br\}
	X.TH NEWSETUP 1 LOCAL
	X.SH NAME
	Xnewsetup - a program to set up a .newsrc file
	X.SH SYNOPSIS
	X.B newsetup
	X.SH DESCRIPTION
	XThe
	X.I newsetup
	Xprogram creates a new .newsrc file containing all of the currently active
	Xnewsgroups.
	XIt tries to put them in a reasonable order, i.e. local newsgroups earlier,
	Xbut you'll probably want to change the ordering anyway (if you use
	X.IR rn )
	Xin order to put interesting newsgroups first.
	XIf you already have a .newsrc, it will be backed up with the name
	X\*(L".oldnewsrc\*(R".
	X.SH ENVIRONMENT
	X.IP DOTDIR 8
	XWhere to put your .newsrc, if not in your home directory.
	X.Sp
	XDefault: $HOME
	X.IP HOME 8
	XYour home directory.
	X.Sp
	XDefault: $LOGDIR
	X.IP LOGDIR 8
	XYour home directory if HOME is undefined.
	X.SH FILES
	X/usr/lib/news/active or a reasonable facsimile
	X.br
	X${DOTDIR-{$HOME-$LOGDIR}}/.newsrc
	X.SH SEE ALSO
	Xrn(1), newsrc(5)
	X.SH DIAGNOSTICS
	X.SH BUGS
SHAR_EOF
if test 1599 -ne "`wc -c < 'newsetup.1'`"
then
	echo shar: error transmitting "'newsetup.1'" '(should have been 1599 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'newsgroups.1'" '(1706 characters)'
if test -f 'newsgroups.1'
then
	echo shar: will not over-write existing file "'newsgroups.1'"
else
sed 's/^	X//' << \SHAR_EOF > 'newsgroups.1'
	X''' $Header: newsgroups.1,v 4.3 85/05/01 11:43:32 lwall Exp $
	X''' 
	X''' $Log:	newsgroups.1,v $
	X''' Revision 4.3  85/05/01  11:43:32  lwall
	X''' Baseline for release with 4.3bsd.
	X''' 
	X''' 
	X.de Sh
	X.br
	X.ne 5
	X.PP
	X\fB\\$1\fR
	X.PP
	X..
	X.de Sp
	X.if t .sp .5v
	X.if n .sp
	X..
	X'''
	X'''     Set up \*(-- to give an unbreakable dash;
	X'''     string Tr holds user defined translation string.
	X'''     Bell System Logo is used as a dummy character.
	X'''
	X.ie n \{\
	X.tr \(bs-\*(Tr
	X.ds -- \(bs-
	X.if (\n(.H=4u)&(1m=24u) .ds -- \(bs\h'-12u'\(bs\h'-12u'-\" diablo 10 pitch
	X.if (\n(.H=4u)&(1m=20u) .ds -- \(bs\h'-12u'\(bs\h'-8u'-\" diablo 12 pitch
	X.ds L" ""
	X.ds R" ""
	X.ds L' '
	X.ds R' '
	X'br\}
	X.el\{\
	X.ds -- \(em\|
	X.tr \*(Tr
	X.ds L" ``
	X.ds R" ''
	X.ds L' `
	X.ds R' '
	X'br\}
	X.TH NEWSGROUPS 1 LOCAL
	X.SH NAME
	Xnewsgroups - a program to list unsubscribed newsgroups.
	X.SH SYNOPSIS
	X.B newsgroups pattern flag
	X.SH DESCRIPTION
	XThe
	X.I newsgroups
	Xprogram compares your .newsrc file with the file of active newsgroups,
	Xand prints a list of unsubscribed newsgroups matching pattern.
	XIf the second argument \*(L"flag\*(R" is present, only newsgroups not
	Xfound in your .newsrc are listed, and the display is not paged.
	XIf the second argument is missing, the display is paged, and an additional
	Xlist of unsubscribed newsgroups occurring in your .newsrc is printed.
	X.SH ENVIRONMENT
	X.IP DOTDIR 8
	XWhere to find your .newsrc, if not in your home directory.
	X.Sp
	XDefault: $HOME
	X.IP HOME 8
	XYour home directory.
	X.Sp
	XDefault: $LOGDIR
	X.IP LOGDIR 8
	XYour home directory if HOME is undefined.
	X.SH FILES
	X/usr/lib/news/active or a reasonable facsimile
	X.br
	X${DOTDIR-{$HOME-$LOGDIR}}/.newsrc
	X.SH SEE ALSO
	Xrn(1), newsrc(5)
	X.SH DIAGNOSTICS
	X.SH BUGS
	XThe flag argument is a kludge.
SHAR_EOF
if test 1706 -ne "`wc -c < 'newsgroups.1'`"
then
	echo shar: error transmitting "'newsgroups.1'" '(should have been 1706 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'patchlevel'" '(12 characters)'
if test -f 'patchlevel'
then
	echo shar: will not over-write existing file "'patchlevel'"
else
sed 's/^	X//' << \SHAR_EOF > 'patchlevel'
	XPatch #: 40
SHAR_EOF
if test 12 -ne "`wc -c < 'patchlevel'`"
then
	echo shar: error transmitting "'patchlevel'" '(should have been 12 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'rn.1'" '(57015 characters)'
if test -f 'rn.1'
then
	echo shar: will not over-write existing file "'rn.1'"
else
sed 's/^	X//' << \SHAR_EOF > 'rn.1'
	X''' $Header: rn.1,v 4.3.1.5 85/09/10 11:05:55 lwall Exp $
	X''' 
	X''' $Log:	rn.1,v $
	X''' Revision 4.3.1.5  85/09/10  11:05:55  lwall
	X''' Improved %m in in_char().
	X''' 
	X''' Revision 4.3.1.4  85/07/23  18:26:40  lwall
	X''' Added MAILCALL.
	X''' 
	X''' Revision 4.3.1.3  85/05/23  17:14:14  lwall
	X''' Now allows 'r' and 'f' on null articles.
	X''' 
	X''' Revision 4.3.1.2  85/05/13  09:27:53  lwall
	X''' Added CUSTOMLINES option.
	X''' 
	X''' Revision 4.3.1.1  85/05/10  11:38:22  lwall
	X''' Branch for patches.
	X''' 
	X''' Revision 4.3  85/05/01  11:48:26  lwall
	X''' Baseline for release with 4.3bsd.
	X''' 
	X''' 
	X.de Sh
	X.br
	X.ne 5
	X.PP
	X\fB\\$1\fR
	X.PP
	X..
	X.de Sp
	X.if t .sp .5v
	X.if n .sp
	X..
	X.de Ip
	X.br
	X.ie \\n.$>=3 .ne \\$3
	X.el .ne 3
	X.IP "\\$1" \\$2
	X..
	X'''
	X'''     Set up \*(-- to give an unbreakable dash;
	X'''     string Tr holds user defined translation string.
	X'''     Bell System Logo is used as a dummy character.
	X'''
	X.tr \(bs-|\(bv\*(Tr
	X.ie n \{\
	X.ds -- \(bs-
	X.if (\n(.H=4u)&(1m=24u) .ds -- \(bs\h'-12u'\(bs\h'-12u'-\" diablo 10 pitch
	X.if (\n(.H=4u)&(1m=20u) .ds -- \(bs\h'-12u'\(bs\h'-8u'-\" diablo 12 pitch
	X.ds L" ""
	X.ds R" ""
	X.ds L' '
	X.ds R' '
	X'br\}
	X.el\{\
	X.ds -- \(em\|
	X.tr \*(Tr
	X.ds L" ``
	X.ds R" ''
	X.ds L' `
	X.ds R' '
	X'br\}
	X.TH RN 1 LOCAL
	X.SH NAME
	Xrn - new read news program
	X.SH SYNOPSIS
	X.B rn [options] [newsgroups]
	X.SH DESCRIPTION
	X.I Rn
	Xis a replacement for the readnews(1) program that was written to be as
	Xefficient as possible, particularly in human interaction.
	X.I Rn
	Xattempts to minimize the amount of \*(L"dead\*(R" time spent reading
	Xnews\*(--it tries to get things done while the user is reading or deciding
	Xwhether to read, and attempts to get useful information onto the screen as
	Xsoon as possible, highlighting spots that the eye makes frequent reference
	Xto, like subjects and previously read lines.
	XWhether or not it's faster, it SEEMS faster.
	X.PP
	XIf no newsgroups are specified, all the newsgroups which have unread news
	Xare displayed, and then the user is asked for each one whether he wants to
	Xread it, in the order in which the newsgroups occur in the
	X.I .newsrc
	Xfile.
	XWith a list of newsgroups,
	X.I rn
	Xwill start up in \*(L"add\*(R" mode, using the list as a set of patterns to
	Xadd new newsgroups and restrict which newsgroups are displayed.
	XSee the discussion of the \*(L'a\*(R' command on the newsgroup selection
	Xlevel.
	X.PP
	X.I Rn
	Xoperates on three levels: the newsgroup selection level, the article
	Xselection level, and the paging level.
	XEach level has its own set of commands, and its own help menu.
	XAt the paging level (the bottom level),
	X.I rn
	Xbehaves much like the
	X.IR more (1)
	Xprogram.
	XAt the article selection level, you may specify which article you want
	Xnext, or read them in the default order, which is either in order of
	Xarrival on your system, or by subject threads.
	XAt the newsgroup selection level (the top level), you may specify which
	Xnewsgroup you want next, or read them in the default order, which is the
	Xorder that the newsgroups occur in your
	X.I .newsrc
	Xfile.
	X(You will therefore want to rearrange your
	X.I .newsrc
	Xfile to put the most interesting newsgroups first.
	XThis can be done with the \*(L'm\*(R' command on the Newsgroup Selection level.
	XWARNING: invoking readnews/vnews (the old user interface) in any way (including
	Xas a news checker in your login sequence!) will cause your
	X.I .newsrc
	Xto be disarranged again.)
	X.PP
	XOn any level, at ANY prompt, an \*(L'h\*(R' may be typed for a list of
	Xavailable commands.
	XThis is probably the most important command to remember, so don't you
	Xforget it.
	XTyping space to any question means to do the normal thing.
	XYou will know what that is because
	Xevery prompt has a list of several plausible commands enclosed in
	Xsquare brackets.
	XThe first command in the list is the one which will be done if you type
	Xa space.
	X(All input is done in cbreak mode, so carriage returns should not be typed
	Xto terminate anything except certain multi-character commands.
	XThose commands will be obvious in the discussion below because they take an
	Xargument.)
	X.PP
	XUpon startup,
	X.I rn
	Xwill do several things:
	X.Ip 1. 4
	XIt will look for your
	X.I .newsrc
	Xfile, which is your list of subscribed-to
	Xnewsgroups.
	XIf
	X.I rn
	Xdoesn't find a
	X.IR .newsrc ,
	Xit will create one.
	XIf it does find one, it will back it up under the name \*(L".oldnewsrc\*(R".
	X.Ip 2. 4
	XIt will input your
	X.I .newsrc
	Xfile, listing out the first several newsgroups
	Xwith unread news.
	X.Ip 3. 4
	XIt will perform certain consistency checks on your
	X.IR .newsrc .
	XIf your
	X.I .newsrc
	Xis out of date in any of several ways,
	X.I rn
	Xwill warn you and patch it up for you, but you may have to wait a little
	Xlonger for it to start up.
	X.Ip 4. 4
	X.I Rn
	Xwill next check to see if any new newsgroups have been created, and give
	Xyou the opportunity to add them to your
	X.IR .newsrc .
	X.Ip 5. 4
	X.I Rn
	Xgoes into the top prompt level\*(--the newsgroup selection level.
	X.Sh "Newsgroup Selection Level"
	XIn this section the words \*(L"next\*(R" and \*(L"previous\*(R" refer to
	Xthe ordering of the newsgroups in your
	X.I .newsrc
	Xfile.
	XOn the newsgroup selection level, the prompt looks like this:
	X.Sp
	X******** 17 unread articles in net.blurfl\*(--read now? [ynq]
	X.Sp
	Xand the following commands may be given at this level:
	X.Ip y,SP 8
	XDo this newsgroup now.
	X.Ip .command 8
	XDo this newsgroup now, but execute
	X.I command
	Xbefore displaying anything.
	XThe command will be interpreted as if given on the article selection level.
	X.Ip = 8
	XDo this newsgroup now, but list subjects before displaying articles.
	X.Ip n 8
	XGo to the next newsgroup with unread news.
	X.Ip N 8
	XGo to the next newsgroup.
	X.Ip p 8
	XGo to the previous newsgroup with unread news.
	XIf there is none, stay at the current newsgroup.
	X.Ip P 8
	XGo to the previous newsgroup.
	X.Ip \- 8
	XGo to the previously displayed newsgroup (regardless of whether it is
	Xbefore or after the current one in the list).
	X.Ip 1 8
	XGo to the first newsgroup.
	X.Ip ^ 8
	XGo to the first newsgroup with unread news.
	X.Ip $ 8
	XGo to the end of the newsgroups list.
	X.Ip "g newsgroup" 8
	XGo to
	X.IR newsgroup .
	XIf it isn't currently subscribed to, you will be asked if you want to
	Xsubscribe.
	X.Ip "/pattern" 8
	XScan forward for a newsgroup matching
	X.IR pattern .
	XPatterns do globbing like filenames, i.e., use ? to match a single
	Xcharacter, * to match any sequence of characters, and [] to specify a list
	Xof characters to match.
	X(\*(L"all\*(R" may be used as a synonym for \*(L"*\*(R".)
	XUnlike normal filename globbing, newsgroup searching is not anchored to
	Xthe front and back of the filename, i.e. \*(L"/jok\*(R" will find
	Xnet.jokes.
	XYou may use ^ or $ to anchor the front or back of the search:
	X\*(L"/^test$\*(R" will find newsgroup test and nothing else
	XIf you want to include newsgroups with 0 unread articles, append /r.
	XIf the newsgroup is not found between the current newsgroup and the last
	Xnewsgroup, the search will wrap around to the beginning.
	X.Ip "?pattern" 8
	XSame as /, but search backwards.
	X.Ip u 8
	XUnsubscribe from current newsgroup.
	X.Ip "l string" 8
	XList newsgroups not subscribed to which contain the string specified.
	X.Ip L 8 13v
	XLists the current state of the
	X.IR .newsrc ,
	Xalong with status information.
	X.Sp
	X.nf
	X    \h'|0.5i'Status    \h'|2i'Meaning
	X    \h'|0.5i'<number>  \h'|2i'Count of unread articles in newsgroup.
	X    \h'|0.5i'READ      \h'|2i'No unread articles in newsgroup.
	X    \h'|0.5i'UNSUB     \h'|2i'Unsubscribed newsgroup.
	X    \h'|0.5i'BOGUS     \h'|2i'Bogus newsgroup.
	X    \h'|0.5i'JUNK      \h'|2i'Ignored line in .newsrc
	X\h'|2i'(e.g. readnews \*(L"options\*(R" line).
	X.fi
	X.Sp
	X(A bogus newsgroup is one that is not in the list of active newsgroups
	Xin the active file, which on most systems is /usr/lib/news/active.)
	X.Ip "m name" 8
	XMove the named newsgroup somewhere else in the
	X.IR .newsrc .
	XIf no name is given, the current newsgroup is moved.
	XThere are a number of ways to specify where you want the newsgroup\*(--type
	Xh for help when it asks where you want to put it.
	X.Ip c 8
	XCatch up\*(--mark all unread articles in this newsgroup as read.
	X.Ip "o pattern" 8
	XOnly display those newsgroups whose name matches
	X.IR pattern .
	XPatterns are the same as for the \*(L'/\*(R' command.
	XMultiple patterns may be separated by spaces, just as on the
	Xcommand line.
	XThe restriction will remain in effect either until there are no articles
	Xleft in the restricted set of newsgroups, or another restriction command
	Xis given.
	XSince
	X.I pattern
	Xis optional, \*(L'o\*(R' by itself will remove the
	Xrestriction.
	X.Ip "a pattern" 8
	XAdd new newsgroups matching
	X.IR pattern .
	XNewsgroups which are already in your
	X.I .newsrc
	Xfile, whether subscribed to or
	Xnot, will not be listed.
	XIf any new newsgroups are found, you will be asked for each one whether
	Xyou would like to add it.
	XAfter any new newsgroups have been added, the \*(L'a\*(R' command also
	Xrestricts the current set of newsgroups just like the \*(L'o\*(R' command
	Xdoes.
	X.Ip & 8
	XPrint out the current status of command line switches and any newsgroup
	Xrestrictions.
	X.Ip "&switch {switch}" 8
	XSet additional command line switches.
	X.Ip && 8
	XPrint out the current macro definitions.
	X.Ip "&&keys commands" 8
	XDefine additional macros.
	X.Ip !command 8
	XEscape to a subshell.
	XOne exclamation mark (!) leaves you in your own news directory.
	XA double exclamation mark (!!) leaves you in the spool
	Xdirectory for news, which on most systems is /usr/spool/news.
	XThe environment variable SHELL will be used if defined.
	XIf
	X.I command
	Xis null, an interactive shell is started.
	X.Ip q 8
	XQuit.
	X.Ip x 8
	XQuit, restoring .newsrc to its state at startup of
	X.IR rn .
	XThe .newsrc you would have had if you had exited with \*(L'q\*(R' will be
	Xcalled .newnewsrc, in case you didn't really want to type \*(L'x\*(R'.
	X.Ip ^K 8
	XEdit the global KILL file.
	XThis is a file which contains /pattern/j commands (one per line) to be
	Xapplied to every newsgroup as it is started up, that is, when it is
	Xselected on the newsgroup selection level.
	XThe purpose of a KILL file is to mark articles as read on the basis of some
	Xset of patterns.
	XThis saves considerable wear and tear on your \*(L'n\*(R' key.
	XThere is also a local KILL file for each newsgroup.
	XBecause of the overhead involved in searching for articles to kill, it is
	Xbetter if possible to use a local KILL file.
	XLocal KILL files are edited with a \*(L'^K\*(R' on the article selection level.
	XThere are also automatic ways of adding search commands to the local KILL
	Xfile\*(--see the \*(L'K\*(R' command and the K search modifier on the
	Xarticle selection level.
	X.Sp
	XIf either of the environment variables VISUAL or EDITOR is set, the
	Xspecified editor will be invoked; otherwise a default editor (normally vi(1))
	Xis invoked on the KILL file.
	X.Sh "Article Selection Level"
	XOn the article selection level,
	X.I rn
	Xselects (by default) unread articles in numerical order (the order in which
	Xarticles have arrived at your site).
	XIf you do a subject search (^N), the default order is modified to be
	Xnumerical order within each subject thread.
	XYou may switch back and forth between numerical order and subject thread
	Xorder at will.
	XThe
	X.B \-S
	Xswitch can be used to make subject search mode the default.
	X.Sp
	XOn the article selection level you are
	X.I not
	Xasked whether you want to read an article before the article is displayed;
	Xrather,
	X.I rn
	Xsimply displays the first page (or portion of a page, at low baud rates) of the
	Xarticle and asks if you want to continue.
	XThe normal article selection prompt comes at the END of the article
	X(though article selection commands can be given from within the middle
	Xof the article (the pager level) also).
	XThe prompt at the end of an article looks like this:
	X.Sp 
	XEnd of article 248 (of 257)\*(--what next? [npq]
	X.Sp
	XThe following are the options at this point:
	X.Ip n,SP 8
	XScan forward for next unread article.
	X(Note: the \*(L'n\*(R' (next) command when typed at the end of an article
	Xdoes not mark the article as read, since an article is automaticaly marked
	Xas read after the last line of it is printed.
	XIt is therefore possible to type a sequence such as \*(L'mn\*(R' and leave
	Xthe article marked as unread.
	XThe fact that an article is marked as read by typing \*(L'n\*(R',
	X\&\*(L'N\*(R', \*(L'^N\*(R', \*(L's\*(R', or \*(L'S\*(R' within the MIDDLE of
	Xthe article is in fact a special case.)
	X.Ip N 8
	XGo to the next article.
	X.Ip ^N 8
	XScan forward for the next article with the same subject, and make ^N default
	X(subject search mode).
	X.Ip p 8
	XScan backward for previous unread article.
	XIf there is none, stay at the current article.
	X.Ip P 8
	XGo to the previous article.
	X.Ip \- 8
	XGo to the previously displayed article (regardless of whether that article
	Xis before or after this article in the normal sequence).
	X.Ip ^P 8
	XScan backward for the previous article with the same subject, and make
	X^N default (subject search mode).
	X.Ip ^R 8
	XRestart the current article.
	X.Ip v 8
	XRestart the current article verbosely, displaying the entire header.
	X.Ip ^L 8
	XRefresh the screen.
	X.Ip ^X 8
	XRestart the current article, and decrypt as a rot13 message.
	X.Ip X 8
	XRefresh the screen, and decrypt as a rot13 message.
	X.Ip b 8
	XBack up one page.
	X.Ip q 8
	XQuit this newsgroup and go back to the newsgroup selection level.
	X.Ip ^ 8
	XGo to the first unread article.
	X.Ip $ 8
	XGo to the last article (actually, one past the last article).
	X.Ip "number" 8
	XGo to the numbered article.
	X.Ip "range{,range} command{:command}" 8
	XApply a set of commands to a set of articles.
	XA range consists of either <article number> or
	X<article\ number>\-<article\ number>.
	XA dot \*(L'.\*(R' represents the current article, and a dollar
	Xsign \*(L'$\*(R' represents the last article.
	X.Sp
	XApplicable commands include \*(L'm\*(R' (mark as unread), \*(L'M\*(R'
	X(delayed mark as unread), \*(L'j\*(R' (mark as read), \*(L"s dest\*(R"
	X(save to a destination), \*(L"!command\*(R" (shell escape), \*(L"=\*(R"
	X(print the subject) and \*(L"C\*(R" (cancel).
	X.Ip j 8
	XJunk the current article\*(--mark it as read.
	XIf this command is used from within an article, you are left at the end of
	Xthe article, unlike \*(L'n\*(R', which looks for the next article.
	X.Ip m 8
	XMark the current article as still unread.
	X(If you are in subject search mode you probably want to use M instead of m.
	XOtherwise the current article may be selected as the beginning of the next
	Xsubject thread.)
	X.Ip M 8
	XMark the current article as still unread, but not until the newsgroup
	Xis exited.
	XUntil then, the current article will be marked as read.
	XThis is useful for returning to an article in another session, or in another
	Xnewsgroup.
	X.Ip /pattern 8
	XScan forward for article containing
	X.I pattern
	Xin the subject.
	XSee the section on Regular Expressions.
	XTogether with the escape substitution facility described later, it becomes
	Xeasy to search for various attributes of the current article, such as
	Xsubject, article ID, author name, etc.
	XThe previous pattern can be recalled with \*(L"<esc>/\*(R".
	XIf
	X.I pattern
	Xis omitted, the previous pattern is assumed.
	X.Ip /pattern/h 8
	XScan forward for article containing
	X.I pattern
	Xin the header.
	X.Ip /pattern/a 8
	XScan forward for article containing
	X.I pattern
	Xanywhere in article.
	X.Ip /pattern/r 8
	XScan read articles also.
	X.Ip /pattern/c 8
	XMake search case sensitive.
	XOrdinarily upper and lower case are considered the same.
	X.Ip "/pattern/modifiers:command{:command}" 8
	XApply the commands listed to articles matching the search command (possibly
	Xwith h, a, or r modifiers).
	XApplicable commands include \*(L'm\*(R' (mark as unread), \*(L'M\*(R'
	X(delayed mark as unread), \*(L'j\*(R' (mark as read), \*(L"s dest\*(R"
	X(save to a destination), \*(L"!command\*(R" (shell escape), \*(L"=\*(R"
	X(print the subject) and \*(L"C\*(R" (cancel).
	XIf the first command is \*(L'm\*(R' or \*(L'M\*(R', modifier r is assumed.
	XA K may be included in the modifiers (not the commands) to cause the
	Xentire command (sans K) to be saved to the local KILL file, where it will
	Xbe applied to every article that shows up in the newsgroup.
	X.Sp
	XFor example, to save all articles in a given newsgroup to the line printer
	Xand mark them read, use \*(L"/^/\||\|lpr:j\*(R".
	XIf you say \*(L"/^/K\||\|lpr:j\*(R", this will happen every time you enter the
	Xnewsgroup.
	X.Ip ?pattern 8
	XScan backward for article containing
	X.I pattern
	Xin the subject.
	XMay be modified as the forward search is: ?pattern?modifiers[:commands].
	XIt is likely that you will want an r modifier when scanning backward.
	X.Ip k 8
	XMark as read all articles with the same subject as the current article.
	X(Note: there is no single character command to temporarily mark as read (M
	Xcommand) articles matching the current subject.
	XThat can be done with \*(L"/<esc>s/M\*(R", however.)
	X.Ip K 8
	XDo the same as the k command, but also add a line to the local KILL file for
	Xthis newsgroup to kill this subject every time the newsgroup is started up.
	XFor a discussion of KILL files, see the \*(L'^K\*(R' command below.
	XSee also the K modifier on searches above.
	X.Ip ^K 8
	XEdit the local KILL file for this newsgroup.
	XEach line of the KILL file should be a command of the form /pattern/j.
	X(With the exception that
	X.I rn
	Xwill insert a line at the beginning of the form \*(L"THRU <number>\*(R",
	Xwhich tells
	X.I rn
	Xthe maximum article number that the KILL file has been applied to.  You
	Xmay delete the THRU line to force a rescan of current articles.)
	XYou may also have reason to use the m, h, or a modifiers.
	XBe careful with the M modifier in a kill file\*(--there are more efficient
	Xways to never read an article.
	XYou might have reason to use it if a particular series of articles is posted
	Xto multiple newsgroups.
	XIn this case, M would force you to view the article in a different newsgroup.
	X.Sp
	XTo see only newgroup articles in the control newsgroup, for instance, you
	Xmight put
	X.Sp
	X/^/j
	X.br
	X/newgroup/m
	X.Sp
	Xwhich kills all subjects not containing \*(L"newgroup\*(R".
	XYou can add lines automatically via the K command and K search modifiers,
	Xbut editing is the only way to remove lines.
	XIf either of the environment variables VISUAL or EDITOR is set, the
	Xspecified editor will be invoked; otherwise a default editor (normally vi)
	Xis invoked on the KILL file.
	X.Sp
	XThe KILL file may also contain switch setting lines beginning with \*(L'&\*(R'.
	XAdditionally, any line beginning with \*(L'X\*(R' is executed on exit
	Xfrom the newsgroup rather than on entrance.
	XThis can be used to set switches back to a default value.
	X.Ip r 8
	XReply through net mail.
	XThe environment variables MAILPOSTER and MAILHEADER may be used to modify
	Xthe mailing behavior of
	X.I rn
	X(see environment section).
	XIf on a nonexistent article such as the "End of newsgroup" pseudo-article
	X(which you can get to with a \*(L'$\*(R' command), invokes the mailer to
	Xnobody in particular.
	X.Ip R 8
	XReply, including the current article in the header file generated.
	X(See \*(L'F\*(R' command below).
	XThe YOUSAID environment variable controls the format of the attribution line.
	X.Ip f 8
	XSubmit a followup article.
	XIf on a nonexistent article such as the "End of newsgroup" pseudo-article
	X(which you can get to with a \*(L'$\*(R' command), posts an original
	Xarticle (basenote).
	X.Ip F 8
	XSubmit a followup article, and include the old article, with lines prefixed
	Xeither by \*(L">\*(R" or by the argument to a
	X.B \-F
	Xswitch.
	X.I Rn
	Xwill attempt to provide an attribution line in front of the quoted article,
	Xgenerated from the From: line of the article.
	XUnfortunately, the From: line doesn't always contain the right name; you
	Xshould double check it against the signature and change it if necessary,
	Xor you may have to apologize for quoting the wrong person.
	XThe environment variables NEWSPOSTER, NEWSHEADER and ATTRIBUTION may be
	Xused to modify the posting behavior of
	X.I rn
	X(see environment section).
	X.Ip C 8
	XCancel the current article, but only if you are the contributor or superuser.
	X.Ip c 8
	XCatch up in this newsgroup; i.e., mark all articles as read.
	X.Ip u 8
	XUnsubscribe to this newsgroup.
	X.Ip "s destination" 8
	XSave to a filename or pipe using sh.
	XIf the first character of the destination is a vertical bar, the rest of
	Xthe command is considered a shell command to which the article is passed
	Xthrough standard input.
	XThe command is subject to filename expansion.
	X(See also the environment variable PIPESAVER.)
	XIf the destination does not begin with a vertical bar, the rest of the
	Xcommand is assumed to be a filename of some sort.
	XAn initial tilde \*(L'~\*(R' will be translated to the name of the home
	Xdirectory, and an initial environment variable substitution is also allowed.
	XIf only a directory name is specified, the environment variable SAVENAME
	Xis used to generate the actual name.
	XIf only a filename is specified (i.e. no directory), the environment variable
	XSAVEDIR will be used to generate the actual directory.
	XIf nothing is specified, then obviously both variables will be used.
	XSince the current directory for rn while doing a save command is your
	Xprivate news directory, saying \*(L"s ./filename\*(R" will force the file
	Xto your news directory.
	XSave commands are also run through % interpretation, so that you can
	Xsay \*(L"s %O/filename\*(R" to save to the directory you were in when you ran
	X.IR rn ,
	Xand \*(L"s %t\*(R" to save to a filename consisting of the Internet address
	Xof the sender.
	X.Sp
	XAfter generating the full pathname of the file to save to,
	X.I rn
	Xdetermines if the file exists already, and if so, appends to it.
	X.I Rn
	Xwill attempt to determine if an existing file is a mailbox or a normal file,
	Xand save the article in the same format.
	XIf the output file does not yet exist,
	X.I rn
	Xwill by default ask you which format you want, or you can make it skip the
	Xquestion with either the
	X.B \-M
	Xor
	X.B \-N
	Xswitch.
	XIf the article is to be saved in mailbox format, the command to do so is
	Xgenerated from the environment variable MBOXSAVER.
	XOtherwise, NORMSAVER is used.
	X.Ip "S destination" 8
	XSave to a filename or pipe using a preferred shell, such as csh.
	XWhich shell is used depends first on what you have the environment variable
	XSHELL set to, and in the absence of that, on what your news administrator
	Xset for the preferred shell when he or she installed
	X.IR rn .
	X.Ip "| command" 8
	XShorthand for \*(L"s | command\*(R".
	X.Ip "w destination" 8
	XThe same as \*(L"s destination\*(R", but saves without the header.
	X.Ip "W destination" 8
	XThe same as \*(L"S destination\*(R", but saves without the header.
	X.Ip & 8
	XPrint out the current status of command line switches.
	X.Ip "&switch {switch}" 8
	XSet additional command line switches.
	X.Ip && 8
	XPrint out current macro definitions.
	X.Ip "&&keys commands" 8
	XDefine an additional macro.
	X.Ip !command 8
	XEscape to a subshell.
	XOne exclamation mark (!) leaves you in your own news directory.
	XA double exclamation mark (!!) leaves you in the spool
	Xdirectory of the current newsgroup.
	XThe environment variable SHELL will be used if defined.
	XIf
	X.I command
	Xis null, an interactive shell is started.
	X.Sp
	XYou can use escape key substitutions described later to get to many
	Xrun-time values.
	XThe command is also run through % interpretation, in case it is being called
	Xfrom a range or search command.
	X.Ip = 8
	XList subjects of unread articles.
	X.Ip # 8
	XPrint last article number.
	X.Sh "Pager Level"
	XAt the pager level (within an article), the prompt looks like this:
	X.Sp
	X\*(--MORE\*(--(17%)
	X.Sp
	Xand a number of commands may be given:
	X.Ip SP 8
	XDisplay next page.
	X.Ip x 8
	XDisplay next page and decrypt as a rot13 message.
	X.Ip d,^D 8
	XDisplay half a page more.
	X.Ip CR 8
	XDisplay one more line.
	X.Ip q 8
	XGo to the end of the current article (don't mark it either read or unread).
	XLeaves you at the \*(L"What next?\*(R" prompt.
	X.Ip j 8
	XJunk the current article.
	XMark it read and go to the end of the article.
	X.Ip ^L 8
	XRefresh the screen.
	X.Ip X 8
	XRefresh the screen and decrypt as a rot13 message.
	X.Ip b,^B 8
	XBack up one page.
	X.Ip gpattern 8
	XGoto (search forward for)
	X.I pattern
	Xwithin current article.
	XNote that there is no space between the command and the pattern.
	XIf the pattern is found, the page containing the pattern will be displayed.
	XWhere on the page the line matching the pattern goes depends on the value
	Xof the
	X.B \-g
	Xswitch.
	XBy default the matched line goes at the top of the screen.
	X.Ip G 8
	XSearch for g pattern again.
	X.Ip ^G 8
	XThis is a special version of the \*(L'g\*(R' command that is for skipping
	Xarticles in a digest.
	XIt is equivalent to setting \*(L"\-g4\*(R" and then executing the command
	X\*(L"g^Subject:\*(R".
	X.Ip TAB 8
	XThis is another special version of the \*(L'g\*(R' command that is for
	Xskipping inclusions of older articles.
	XIt is equivalent to setting \*(L"\-g4\*(R" and then executing the command
	X\*(L"g^[^c]\*(R", where \fIc\fR is the first character of the last line
	Xon the screen.
	XIt searches for the first line that doesn't begin with the same character
	Xas the last line on the screen.
	X.Ip !command 8
	XEscape to a subshell.
	X.PP
	XThe following commands skip the rest of the current article, then behave just
	Xas if typed to the \*(L"What next?\*(R" prompt at the end of the article.
	XSee the documentation at the article selection level for these commands.
	X.Sp	
	X    # $ & / = ? c C f F k K ^K m M r R ^R u v Y ^
	X.br
	X    number
	X.br
	X    range{,range} command{:command}
	X.Sp
	XThe following commands also skip to the end of the article, but have the
	Xadditional effect of marking the current article as read:
	X.Sp
	X    n N ^N s S | w W
	X.Sp
	X.Sh "Miscellaneous facts about commands"
	XAn \*(L'n\*(R' typed at either the \*(L"Last newsgroup\*(R" prompt or a
	X\*(L"Last article\*(R" prompt will cycle back to the top of the newsgroup
	Xor article list, whereas a \*(L'q\*(R' will quit the level.
	X(Note that \*(L'n\*(R' does not mean \*(L"no\*(R", but rather
	X\*(L"next\*(R".)
	XA space will of course do whatever is shown as the
	Xdefault, which will vary depending on whether rn thinks you have more
	Xarticles or newsgroups to read.
	X.PP
	XThe \*(L'b\*(R' (backup page) command may be repeated until the beginning of
	Xthe article is reached.
	XIf
	X.I rn
	Xis suspended (via a ^Z), then when the job is resumed, a refresh (^L) will
	Xautomatically be done (Berkeley-type systems only).
	XIf you type a command such as \*(L'!\*(R' or \*(L's\*(R' which takes you
	Xfrom the middle of the article to the end, you can always get back into the
	Xmiddle by typing \*(L'^L\*(R'.
	X.PP
	XIn multi-character commands such as \*(L'!\*(R', \*(L's\*(R', \*(L'/\*(R',
	Xetc, you can interpolate various run-time values by typing escape and a
	Xcharacter.
	XTo find out what you can interpolate, type escape and \*(L'h\*(R', or check
	Xout the single character % substitutions for environment variables in the
	XInterpretation and Interpolation section, which are the same.
	XAdditionally, typing a double escape will cause any % substitutions in the
	Xstring already typed in to be expanded.
	X.Sh "Options"
	X.I Rn
	Xhas a nice set of options to allow you to tailor the interaction
	Xto your liking.
	X(You might like to know that the author swears by \*(L"\-e \-m \-S \-/\*(R".)
	XThese options may be set on the command line, via the RNINIT
	Xenvironment variable, via a file pointed to by the RNINIT variable, or
	Xfrom within rn via the & command.
	XOptions may generally be unset by saying \*(L"+switch\*(R".
	XOptions include:
	X.TP 5
	X.B \-c
	Xchecks for news without reading news.
	XIf a list of newsgroups is given on the command line, only those newsgroups
	Xwill be checked; otherwise all subscribed-to newsgroups are checked.
	XWhenever the
	X.B \-c
	Xswitch is specified, a non-zero exit status from
	X.I rn
	Xmeans that there is unread news in one of the checked newsgroups.
	XThe
	X.B \-c
	Xswitch does not disable the printing of newsgroups with unread news;
	Xthis is controlled by the
	X.B \-s
	Xswitch.
	X(The
	X.B \-c
	Xswitch is not meaningful when given via the & command.)
	X.TP 5
	X.B \-C<number>
	Xtells
	X.I rn
	Xhow often to checkpoint the
	X.IR .newsrc ,
	Xin articles read.
	XActually, this number says when to start thinking about doing a checkpoint
	Xif the situation is right.
	XIf a reasonable checkpointing situation doesn't arise within 10 more
	Xarticles, the
	X.I .newsrc
	Xis checkpointed willy-nilly.
	X.TP 5
	X.B \-d<directory name>
	Xsets the default save directory to something other than ~/News.
	XThe directory name will be globbed (via csh) if necessary (and if possible).
	XArticles saved by
	X.I rn
	Xmay be placed in the save directory or in a subdirectory thereof depending
	Xon the command that you give and the state of the environment variables
	XSAVEDIR and SAVENAME.
	XAny KILL files (see the K command in the Article Selection section)
	Xalso reside in this directory and its subdirectories, by default.
	XIn addition, shell escapes leave you in this directory.
	X.TP 5
	X.B \-D<flags>
	Xenables debugging output.
	XSee common.h for flag values.
	XWarning: normally
	X.I rn
	Xattempts to restore your
	X.I .newsrc
	Xwhen an unexpected signal or internal error occurs.
	XThis is disabled when any debugging flags are set.
	X.TP 5
	X.B \-e
	Xcauses each page within an article to be started at the top of the screen,
	Xnot just the first page.
	X(It is similar to the
	X.B \-c
	Xswitch of
	X.IR more (1).)
	XYou never have to read scrolling text with this switch.
	XThis is helpful especially at certain baud rates because you can start reading
	Xthe top of the next page without waiting for the whole page to be printed.
	XIt works nicely in conjuction with the
	X.B \-m
	Xswitch, especially if you use half-intensity for your highlight mode.
	XSee also the
	X.B \-L
	Xswitch.
	X.TP 5
	X.B \-E<name>=<val>
	Xsets the environment variable <name> to the value specified.
	XWithin
	X.IR rn ,
	X\*(L"&\-ESAVENAME=%t\*(R" is similar to \*(L"setenv SAVENAME '%t'\*(R" in
	X.IR csh ,
	Xor \*(L"SAVENAME='%t'; export SAVENAME\*(R" in
	X.IR sh .
	XAny environment variables set with
	X.B \-E
	Xwill be inherited by subprocesses of
	X.IR rn .
	X.TP 5
	X.B \-F<string>
	Xsets the prefix string for the \*(L'F\*(R' followup command to use in
	Xprefixing each line of the quoted article.
	XFor example, \*(L"\-F<tab>\*(R" inserts a tab on the front of each line
	X(which will cause long lines to wrap around, unfortunately),
	X\*(L"\-F>>>>\*(R" inserts \*(L">>>>\*(R" on every line, and
	X\*(L"\-F\*(R" by itself causes nothing to be inserted, in case you want to
	Xreformat the text, for instance.
	XThe initial default prefix is \*(L">\*(R".
	X.TP 5
	X.B \-g<line>
	Xtells
	X.I rn
	Xwhich line of the screen you want searched-for strings to show up on when
	Xyou search with the \*(L'g\*(R' command within an article.
	XThe lines are numbered starting with 1.
	XThe initial default is \*(L"\-g1\*(R", meaning the first line of the screen.
	XSetting the line to less than 1 or more than the number of lines on the screen
	Xwill set it to the last line of the screen.
	X.TP 5
	X.B \-h<string>
	Xhides (disables the printing of) all header lines beginning with
	X.I string.
	XFor instance, \-hexp will disable the printing of the \*(L"Expires:\*(R" line.
	XCase is insignificant.
	XIf <string> is null, all header lines except Subject are hidden, and you
	Xmay then use
	X.B +h
	Xto select those lines you want to see.
	XYou may wish to use the baud-rate switch modifier below to hide more lines
	Xat lower baud rates.
	X.TP 5
	X.B \-H<string>
	Xworks just like
	X.B \-h
	Xexcept that instead of setting the hiding flag for a header line, it sets
	Xthe magic flag for that header line.
	XCertain header lines have magic behavior that can be controlled this way.
	XAt present, the following actions are caused by the flag for the particular
	Xline:
	Xthe Newsgroups line will only print when there are multiple newsgroups,
	Xthe Subject line will be underlined, and the Expires line will always be
	Xsuppressed if there is nothing on it.
	XIn fact, all of these actions are the default, and you must use
	X.B +H
	Xto undo them.
	X.TP 5
	X.B \-i=<number>
	Xspecifies how long (in lines) to consider the initial page of an
	Xarticle\*(--normally this is determined automatically depending on baud rate.
	X(Note that an entire article header will always be printed regardless of the
	Xspecified initial page length.
	XIf you are working at low baud rate and wish to reduce the size of the
	Xheaders, you may hide certain header lines with the
	X.B \(bsh
	Xswitch.)
	X.TP 5
	X.B \-l
	Xdisables the clearing of the screen at the beginning of each
	Xarticle, in case you have a bizarre terminal.
	X.TP 5
	X.B \-L
	Xtells
	X.I rn
	Xto leave information on the screen as long as possible by not blanking
	Xthe screen between pages, and by using clear to end-of-line.
	X(The
	X.IR more (1)
	Xprogram does this.)
	XThis feature works only if you have the requisite termcap
	Xcapabilities.
	XThe switch has no effect unless the
	X.B \-e
	Xswitch is set.
	X.TP 5
	X.B \-m=<mode>
	Xenables the marking of the last line of the previous page
	Xprinted, to help the user see where to continue reading.
	XThis is most helpful when less than a full page is going to be displayed.
	XIt may also be used in conjunction with the
	X.B \-e
	Xswitch, in which case the page is erased, and the first line (which is
	Xthe last line of the previous page) is highlighted.
	XIf
	X.B \-m=s
	Xis specified, the standout mode will be used, but if
	X.B \-m=u
	Xis specified, underlining will be used.
	XIf neither
	X.B =s
	Xor
	X.B =u
	Xis specified, standout is the default.
	XUse
	X.B +m
	Xto disable highlighting.
	X.TP 5
	X.B \-M
	Xforces mailbox format in creating new save files.
	XOrdinarily you are asked which format you want.
	X.TP 5
	X.B \-N
	Xforces normal (non-mailbox) format in creating new save files.
	XOrdinarily you are asked which format you want.
	X.TP 5
	X.B \-r
	Xcauses
	X.I rn
	Xto restart in the last newsgroup read during a previous session with
	X.I rn.
	XIt is equivalent to starting up normally and then getting to the newsgroup
	Xwith a g command.
	X.TP 5
	X.B \-s
	Xwith no argument suppresses the initial listing of newsgroups with unread
	Xnews, whether
	X.B \-c
	Xis specified or not.
	XThus
	X.B \-c
	Xand
	X.B \-s
	Xcan be used together to test \*(L"silently\*(R" the status of news from
	Xwithin your
	X.I .login
	Xfile.
	XIf
	X.B \-s
	Xis followed by a number, the initial listing is suppressed after that many
	Xlines have been listed.
	XPresuming that you have your
	X.I .newsrc
	Xsorted into order of interest,
	X.B \-s5
	Xwill tell you the 5 most interesting newsgroups that have unread news.
	XThis is also a nice feature to use in your
	X.I .login
	Xfile, since it not only tells you whether there is unread news, but also how
	Ximportant the unread news is, without having to wade through the entire
	Xlist of unread newsgroups.
	XIf no 
	X.B \-s
	Xswitch is given 
	X.B \-s5
	Xis assumed, so just putting \*(L"rn \-c\*(R"
	Xinto your
	X\&.login file is fine.
	X.TP 5
	X.B \-S<number>
	Xcauses
	X.I rn
	Xto enter subject search mode (^N) automatically whenever a newsgroup is
	Xstarted up with <number> unread articles or more.
	XAdditionally, it causes any \*(L'n\*(R' typed while in subject search mode
	Xto be interpreted as \*(L'^N\*(R' instead.
	X(To get back out of subject search mode, the best command is probably
	X\&\*(L'^\*(R'.)
	XIf <number> is omitted, 3 is assumed.
	X.TP 5
	X.B \-t
	Xputs
	X.I rn
	Xinto terse mode.
	XThis is more cryptic but useful for low baud rates.
	X(Note that your system administrator may have compiled
	X.I rn
	Xwith either verbose or terse messages only to save memory.)
	XYou may wish to use the baud-rate switch modifier below to enable terse mode
	Xonly at lower baud rates.
	X.TP 5
	X.B \-T
	Xallows you to type ahead of rn.
	XOrdinarily rn will eat typeahead to prevent your autorepeating space bar from
	Xdoing a very frustrating thing when you accidentally hold it down.
	XIf you don't have a repeating space bar, or you are working at low baud
	Xrate, you can set this switch to prevent this behavior.
	XYou may wish to use the baud-rate switch modifier below to disable typeahead
	Xonly at lower baud rates.
	X.TP 5
	X.B \-v
	Xsets verification mode for commands.
	XWhen set, the command being executed is displayed to give some feedback that
	Xthe key has actually been typed.
	XUseful when the system is heavily loaded and you give a command that takes
	Xa while to start up.
	X.TP 5
	X.B \-/
	Xsets SAVEDIR to \*(L"%p/%c\*(R" and SAVENAME to \*(L"%a\*(R", which means
	Xthat by default articles are saved in a subdirectory of your private news
	Xdirectory corresponding to the name of the the current newsgroup, with the
	Xfilename being the article number.
	X.B +/
	Xsets SAVEDIR to \*(L"%p\*(R" and SAVENAME to \*(L"%^C\*(R", which by
	Xdefault saves articles directly to your private news directory, with the
	Xfilename being the name of the current newsgroup, first letter capitalized.
	X(Either
	X.B +/
	Xor
	X.B \-/
	Xmay be default on your system, depending on the feelings of your news
	Xadministrator when he, she or it installed
	X.IR rn .)
	XYou may, of course, explicitly set SAVEDIR and SAVENAME to other values\*(--see
	Xdiscussion in the environment section.
	X.PP
	XAny switch may be selectively applied according to the current baud-rate.
	XSimply prefix the switch with +speed to apply the switch at that speed or
	Xgreater, and \%\-speed to apply the switch at that speed or less.
	XExamples: \%\-1200\-hposted suppresses the Posted line at 1200 baud or less;
	X\%+9600\-m enables marking at 9600 baud or more.
	XYou can apply the modifier recursively to itself also: \%+300\-1200\-t sets
	Xterse mode from 300 to 1200 baud.
	X.PP
	XSimilarly, switches may be selected based on terminal type:
	X.Sp
	X	\-=vt100+T		set +T on vt100
	X.br
	X	\-=tvi920\-ETERM=mytvi	get a special termcap entry
	X.br
	X	\-=tvi920\-ERNMACRO=%./.rnmac.tvi
	X.br
	X				set up special keymappings
	X.br
	X	+=paper\-v		set verify mode if not hardcopy
	X.PP
	XSome switch arguments, such as environment variable values, may require
	Xspaces in them.
	XSuch spaces should be quoted via ", ', or \e in the conventional fashion,
	Xeven when passed via RNINIT or the & command.
	X.Sh "Regular Expressions"
	XThe patterns used in article searching are regular expressions such as
	Xthose used by
	X.IR ed (1).
	XIn addition, \ew matches an alphanumeric character and \eW a nonalphanumeric.
	XWord boundaries may be matched by \eb, and non-boundaries by \eB.
	XThe bracketing construct \e(\ ...\ \e) may also be used, and \edigit matches
	Xthe digit'th substring, where digit can range from 1 to 9.
	X\e0 matches whatever the last bracket match matched.
	XUp to 10 alternatives may given in a pattern, separated by \e|, with the
	Xcaveat that \e(\ ...\ \e|\ ...\ \e) is illegal.
	X.Sh "Interpretation and Interpolation"
	XMany of the strings that
	X.I rn
	Xhandles are subject to interpretations of several types.
	XUnder filename expansion, an initial \*(L"~/\*(R" is translated to the name
	Xof your home directory, and \*(L"~name\*(R" is translated to the login
	Xdirectory for the user specified.
	XFilename expansion will also expand an initial environment variable, and
	Xalso does the backslash, uparrow and percent expansion mentioned below.
	X.PP
	XAll interpreted strings go through backslash, uparrow and percent
	Xinterpretation.
	XThe backslash escapes are the normal ones (such as \en, \et, \ennn, etc.).
	XThe uparrow escapes indicate control codes in the normal fashion.
	XBackslashes or uparrows to be passed through should be escaped with backslash.
	XThe special percent escapes are similar to printf percent escapes.
	XThese cause the substitution of various run-time values into the string.
	XThe following are currently recognized:
	X.Ip %a 8
	XCurrent article number.
	X.Ip %A 8
	XFull name of current article (%P/%c/%a).
	X(On a Eunice system with the LINKART option, %P/%c/%a returns the name of
	Xthe article in the current newsgroup, while %A returns the real name of
	Xthe article, which may be different if the current article was posted to
	Xmultiple newsgroups.)
	X.Ip %b 8
	XDestination of last save command, often a mailbox.
	X.Ip %B 8
	XThe byte offset to the beginning of the part of the article to be saved,
	Xset by the save command.
	XThe \*(L's\*(R' and \*(L'S\*(R' commands set it to 0, and the \*(L'w\*(R'
	Xand \*(L'W\*(R' commands set it to the byte offset of the body of the article.
	X.Ip %c 8
	XCurrent newsgroup, directory form.
	X.Ip %C 8
	XCurrent newsgroup, dot form.
	X.Ip %d 8
	XFull name of newsgroup directory (%P/%c).
	X.Ip %D 8
	X\*(L"Distribution:\*(R" line from the current article.
	X.Ip %f 8
	X\*(L"From:\*(R" line from the current article, or the \*(L"Reply-To:\*(R"
	Xline if there is one.
	XThis differs from %t in that comments (such as the full name) are not
	Xstripped out with %f.
	X.Ip %F 8
	X\*(L"Newsgroups:\*(R" line for a new article, constructed from
	X\*(L"Newsgroups:\*(R" and \*(L"Followup-To:\*(R" lines of current article.
	X.Ip %h 8
	XName of the header file to pass to the mail or news poster,
	Xcontaining all the information that the poster program needs in the
	Xform of a message header.
	XIt may also contain a copy of the current article.
	XThe format of the header file is controlled by the MAILHEADER and NEWSHEADER
	Xenvironment variables.
	X.Ip %H 8
	XHost name (your machine's name).
	X.Ip %i 8
	X\*(L"Message-I.D.:\*(R" line from the current article, with <> guaranteed.
	X.Ip %I 8
	XThe reference indication mark (see the
	X.B \-F
	Xswitch.)
	X.Ip %l 8
	XThe news administrator's login name, if any.
	X.Ip %L 8
	XLogin name (yours).
	X.Ip %m 8
	XThe current mode of rn, for use in conditional macros.
	X.Sp
	X.nf
	X	i	Initializing.
	X	n	Newsgroup selection level.
	X	a	Article selection level (What next?).
	X	p	Pager level (MORE prompt).
	X	A	Add this newsgroup?
	X	C	Catchup confirmation.
	X	D	Delete bogus newsgroups?
	X	M	Use mailbox format?
	X	R	Resubscribe to this newsgroup?
	X.fi
	X.Sp
	XNote that yes/no questions are all upper-case modes.
	XIf, for example, you wanted to disallow defaults on all yes/no questions,
	Xyou could define the following macro:
	X.Sp
	X.nf
	X\e040	%(%m=[A-Z]?h: )
	X.fi
	X.Ip %M 8
	XThe number of articles marked to return via the \*(L'M\*(R' command.
	XIf the same article is Marked multiple times, \*(L"%M\*(R" counts it
	Xmultiple times in the current implementation.
	X.Ip %n 8
	X\*(L"Newsgroups:\*(R" line from the current article.
	X.Ip %N 8
	XFull name (yours).
	X.Ip %o 8
	XOrganization (yours).
	X.Ip %O 8
	XOriginal working directory (where you ran rn from).
	X.Ip %p 8
	XYour private news directory, normally ~/News.
	X.Ip %P 8
	XPublic news spool directory, normally /usr/spool/news.
	X.Ip %r 8
	XLast reference on references line of current article (parent article id).
	X.Ip %R 8
	XReferences list for a new article, constructed from the references and article
	XID of the current article.
	X.Ip %s 8
	XSubject, with all Re's and (nf)'s stripped off.
	X.Ip %S 8
	XSubject, with one \*(L"Re:\*(R" stripped off.
	X.Ip %t 8
	X\*(L"To:\*(R" line derived from the \*(L"From:\*(R" and \*(L"Reply-To:\*(R"
	Xlines of the current article.
	XThis always returns an Internet format address.
	X.Ip %T 8
	X\*(L"To:\*(R" line derived from the \*(L"Path:\*(R" line of the
	Xcurrent article to produce a uucp path.
	X.Ip %u 8
	XThe number of unread articles in the current newsgroup.
	X.Ip %U 8
	XThe number of unread articles in the current newsgroup, not counting the
	Xcurrent article.
	X.Ip %x 8
	XThe news library directory.
	X.Ip %X 8
	XThe rn library directory.
	X.Ip %z 8
	XThe length of the current article in bytes.
	X.Ip %~ 8
	XYour home directory.
	X.Ip %. 8
	XThe directory containing your dot files, which is your home directory unless
	Xthe environment variable DOTDIR is defined when rn is invoked.
	X.Ip %$ 8
	XCurrent process number.
	X.Ip %/ 8
	XLast search string.
	X.Ip %% 8
	XA percent sign.
	X.Ip "%{name} or %{name\-default}" 8
	XThe environment variable \*(L"name\*(R".
	X.Ip %[name] 8
	XThe value of header line \*(L"Name:\*(R" from the current article.
	XThe \*(L"Name:\ \*(R" is not included.
	XFor example \*(L"%D\*(R" and \*(L"%[distribution]\*(R" are equivalent.
	XThe name must be spelled out in full.
	X.Ip %`command` 8
	XInserts the output of the command, with any embedded newlines translated
	Xto space.
	X.Ip %""prompt"" 8
	XPrints prompt on the terminal, then inputs one string, and inserts it.
	X.Ip "%(test_text=pattern?then_text:else_text)" 8
	XIf
	X.I test_text
	Xmatches
	X.IR pattern ,
	Xhas the value
	X.IR then_text ,
	Xotherwise
	X.IR else_text .
	XThe \*(L":else_text\*(R" is optional, and if absent, interpolates the null string.
	XThe = may be replaced with != to negate the test.
	XTo quote any of the metacharacters
	X(\*(L'=\*(R', \*(L'?\*(R', \*(L':\*(R', or \*(L')\*(R'),
	Xprecede with a backslash.
	X.Ip %digit 8
	XThe digits 1 through 9 interpolate the string matched by the nth bracket
	Xin the last pattern match that had brackets.
	XIf the last pattern had alternatives, you may not know the number of the
	Xbracket you want\*(--%0 will give you the last bracket matched.
	X.PP
	XModifiers: to capitalize the first letter, insert \*(L'^\*(R':
	X\*(L"%^C\*(R" produces something like \*(L"Net.jokes\*(R".
	XInserting \*(L'_\*(R' causes the first letter following the last
	X\&\*(L'/\*(R' to be capitalized: \*(L"%_c\*(R" produces \*(L"net/Jokes\*(R".
	X.SH ENVIRONMENT
	XThe following environment variables are paid attention to by
	X.IR rn .
	XIn general the default values assumed for these variables by
	X.I rn
	Xare reasonable, so if you are using
	X.I rn
	Xfor the first time, you can safely ignore this section.
	XNote that the defaults below may not correspond precisely to the defaults
	Xon your system.
	XTo find the actual defaults you would need to look in config.h and common.h
	Xin the rn source directory, and the file INIT in the rn library.
	X.PP
	XThose variables marked (%) are subject to % interpolation, and those marked
	X(~) are subject to both % interpolation and ~ interpretation.
	X.Ip "ATTRIBUTION (%)" 8
	XGives the format of the attribution line in front of the quoted article
	Xincluded by an F command.
	X.Sp
	XDefault: In article %i %f writes:
	X.Ip "CANCEL (~)" 8
	XThe shell command used to cancel an article.
	X.Sp
	XDefault: inews \-h < %h
	X.Ip "CANCELHEADER (%)" 8 13v
	XThe format of the file to pass to the CANCEL command in order to cancel
	Xan article.
	X.Sp
	XDefault:
	X.br
	XNewsgroups: %n
	X.br
	XSubject: cmsg cancel %i
	X.br
	XReferences: %R
	X.br
	XReply-To: %L@%H.UUCP (%N)
	X.br
	XDistribution: %D
	X.br
	XOrganization: %o
	X.sp 1
	X%i cancelled from rn.
	X.Ip DOTDIR 8
	XWhere to find your dot files, if they aren't in your home directory.
	XCan be interpolated using \*(L"%.\*(R".
	X.Sp
	XDefault: $HOME
	X.Ip "EDITOR (~)" 8
	XThe name of your editor, if VISUAL is undefined.
	X.Sp
	XDefault: whatever your news administrator compiled in, usually vi.
	X.Ip "FIRSTLINE (%)" 8
	XControls the format of the line displayed at the top of an article.
	XWarning: this may go away.
	X.Sp
	XDefault: Article %a %(%U%M!=^00$?(%U more%(%M!=^0$? + %M Marked to return)\e) )in %C:, more or less.
	X.Ip HIDELINE 8
	XIf defined, contains a regular expression which matches article lines to
	Xbe hidden, in order, for instance, to suppress quoted material.
	XA recommended string for this purpose is \*(L"^>...\*(R", which \fIdoesn't\fR
	Xhide lines with only \*(L'>\*(R', to give some indication that quoted
	Xmaterial is being skipped.
	XIf you want to hide more than one pattern, you can use \*(L"\||\|\*(R" to
	Xseparate the alternatives.
	XYou can view the hidden lines by restarting the article with the \*(L'v\*(R'
	Xcommand.
	X.Sp
	XThere is some overhead involved in matching each line of the article against
	Xa regular expression.
	XYou might wish to use a baud-rate modifier to enable this feature only at
	Xlow baud rates.
	X.Sp
	XDefault: undefined
	X.Ip HOME 8
	XYour home directory.
	XAffects ~ interpretation, and the location of your
	Xdot files if DOTDIR is not defined.
	X.Sp
	XDefault: $LOGDIR
	X.Ip "KILLGLOBAL (~)" 8
	XWhere to find the KILL file to apply to every newsgroup.
	XSee the \*(L'^K\*(R' command at the newsgroup selection level.
	X.Sp
	XDefault: %p/KILL
	X.Ip "KILLLOCAL (~)" 8
	XWhere to find the KILL file for the current newsgroup.
	XSee the commands \*(L'K\*(R' and \*(L'^K\*(R' at the article selection level,
	Xand the search modifier \*(L'K\*(R'.
	X.Sp
	XDefault: %p/%c/KILL
	X.Ip LOGDIR 8
	XYour home directory if HOME is undefined.
	XAffects ~ interpretation, and the location of your
	Xdot files if DOTDIR is not defined.
	X.Sp
	XDefault: none.
	X.Sp
	XExplanation: you must have either $HOME or $LOGDIR.
	X.Ip LOGNAME 8
	XYour login name, if USER is undefined.
	XMay be interpolated using \*(L"%L\*(R".
	X.Sp
	XDefault: value of getlogin().
	X.Ip "MAILCALL (~)" 8
	XWhat to say when there is new mail.
	X.Sp
	XDefault: (Mail)
	X.Ip "MAILFILE (~)" 8
	XWhere to check for mail.
	X.Sp
	XDefault: /usr/spool/mail/%L
	X.Ip "MAILHEADER (%)" 8
	XThe format of the header file for replies.
	XSee also MAILPOSTER.
	X.Sp
	XDefault:
	X.Sp
	XTo: %T
	X.br
	XSubject: %(%i=^$?:Re: %S
	X.br
	XNewsgroups: %n
	X.br
	XIn-Reply-To: %i)
	X.br
	X%(%[references]!=^$?References\\: %[references]
	X.br
	X)Organization: %o
	X.br
	XCc: 
	X.br
	XBcc: \en\en
	X.Ip "MAILPOSTER (~)" 8
	XThe shell command to be used by the reply commands (r and R)
	Xin order to allow you to enter and deliver the response.
	X.I Rn
	Xwill not itself call upon an editor for replies\*(--this
	Xis a function of the program called by
	X.IR rn .
	XSee also MAILHEADER.
	X.Sp
	XDefault: Rnmail \-h %h
	X.Ip "MBOXSAVER (~)" 8
	XThe shell command to save an article in mailbox format.
	X.Sp
	XDefault: %X/mbox.saver %A %P %c %a %B %C "%b" \e
	X.br
	X"From: %T %`date`"
	X.Sp
	XExplanation: the first seven arguments are the same as for NORMSAVER.
	XThe eighth argument to the shell script is the new From: line
	Xfor the article, including the posting date,
	Xderived either directly from the Posted: line, or not-so-directly from
	Xthe Date: line.
	XHeader munging at its finest.
	X.Ip NAME 8
	XYour full name.
	XMay be interpolated using \*(L"%N\*(R".
	X.Sp
	XDefault: name from /etc/passwd, or ~/.fullname.
	X.Ip "NEWSHEADER (%)" 8 16v
	XThe format of the header file for followups.
	XSee also NEWSPOSTER.
	X.Sp
	XDefault:
	X.Sp
	XNewsgroups: %(%F=^$?%C:%F)
	X.br
	XSubject: %(%S=^$?%"\n\nSubject: ":Re: %S)
	X.br
	XSummary:
	X.br
	XExpires: 
	X.br
	X%(%R=^$?:References: %R
	X.br
	X)Sender: 
	X.br
	XReply-To: %L@%H.UUCP (%N)
	X.br
	XFollowup-To: 
	X.br
	XDistribution: %(%i=^$?%"\nDistribution: ":%D)
	X.br
	XOrganization: %o
	X.br
	XKeywords: \en\en
	X.Ip "NEWSPOSTER (~)" 8
	XThe shell command to be used by the followup commands (f and F)
	Xin order to allow you to enter and post a followup news article.
	X.I Rn
	Xwill not itself call upon an editor for followups\*(--this
	Xis a function of the program called by
	X.IR rn .
	XSee also NEWSHEADER.
	X.Sp
	XDefault: Pnews \-h %h
	X.Ip "NORMSAVER (~)" 8
	XThe shell command to save an article in the normal (non-mailbox) format.
	X.Sp
	XDefault: %X/norm.saver %A %P %c %a %B %C "%b"
	X.Ip ORGANIZATION 8
	XEither the name of your organization, or the name of a file containing the
	Xname of your organization.
	XMay be interpolated using \*(L"%o\*(R".
	X.Sp
	XDefault: whatever your news administrator compiled in.
	X.Ip PAGESTOP 8
	XIf defined, contains a regular expression which matches article lines to
	Xbe treated as form-feeds.
	XThere are at least two things you might want to do with this.
	XTo cause page breaks between articles in a digest, you might define it
	Xas \*(L"^--------\*(R".
	XTo force a page break before a signature, you could define it
	Xas \*(L"^-- $\*(R".
	X(Then, when you see \*(L"--\*(R" at the bottom of the page, you can skip
	Xthe signature if you so desire by typing \*(L'n\*(R' instead of space.)
	XTo do both, you could use \*(L"^--\*(R".
	XIf you want to break on more than one pattern, you can use \*(L"\||\|\*(R" to
	Xseparate the alternatives.
	X.Sp
	XThere is some overhead involved in matching each line of the article against
	Xa regular expression.
	XYou might wish to use a baud-rate modifier to enable this feature only at
	Xlow baud rates.
	X.Sp
	XDefault: undefined
	X.Ip "PIPESAVER (%)" 8
	XThe shell command to execute in order to accomplish a save to a pipe
	X(\*(L"s\ |\ command\*(R" or \*(L"w\ |\ command\*(R").
	XThe command typed by the user is substituted in as %b.
	X.Sp
	XDefault: %(%B=^0$?<%A:tail +%Bc %A |) %b
	X.Sp
	XExplanation: if %B is 0, the command is \*(L"<%A %b\*(R", otherwise
	Xthe command is \*(L"tail +%Bc %A | %b\*(R".
	X.Ip RNINIT 8
	XDefault values for switches may be passed to
	X.I rn
	Xby placing them in RNINIT.
	XAny switch that is set in RNINIT may be overruled 
	Xon the command line, or via the \*(L'&\*(R' command from within
	X.IR rn .
	XBinary-valued switches that are set with \*(L"\-switch\*(R" may be unset
	Xusing \*(L"+switch\*(R".
	X.Sp
	XIf RNINIT begins with a \*(L'/\*(R' it is assumed to be the name of a file
	Xcontaining switches.
	XIf you want to set many environment variables but don't want to keep
	Xthem all in your environment, or if the use of any of these variables
	Xconflicts with other programs, you can use this feature along with the
	X.B \-E
	Xswitch to set the environment variables upon startup.
	X.Sp
	XDefault: \*(L" \*(R".
	X.Ip "RNMACRO (~)" 8
	XThe name of the file containing macros and key mappings.
	XSee the MACROS section.
	X.Sp
	XDefault: %./.rnmac
	X.Ip "SAVEDIR (~)" 8
	XThe name of the directory to save to, if the save command does not specify
	Xa directory name.
	X.Sp
	XDefault:
	X.br
	X   If
	X.B \-/
	Xis set: %p/%c
	X.br
	X   If
	X.B +/
	Xis set: %p
	X.Ip "SAVENAME (%)" 8
	XThe name of the file to save to, if the save command contains only a
	Xdirectory name.
	X.Sp
	XDefault:
	X.br
	X   If
	X.B \-/
	Xis set: %a
	X.br
	X   If
	X.B +/
	Xis set: %^C
	X.Ip SHELL 8
	XThe name of your preferred shell.
	XIt will be used by the \*(L'!\*(R', \*(L'S\*(R' and \*(L'W\*(R' commands.
	X.Sp
	XDefault: whatever your news administrator compiled in.
	X.Ip "SUBJLINE (%)" 8
	XControls the format of the lines displayed by the \*(L'=\*(R' command at
	Xthe article selection level.
	X.Sp
	XDefault: %s
	X.Ip TERM 8
	XDetermines which termcap entry to use, unless TERMCAP contains the entry.
	X.Ip TERMCAP 8
	XHolds either the name of your termcap file, or a termcap entry.
	X.Sp
	XDefault: /etc/termcap, normally.
	X.Ip USER 8
	XYour login name.
	XMay be interpolated using \*(L"%L\*(R".
	X.Sp
	XDefault: $LOGNAME
	X.Ip "VISUAL (~)" 8
	XThe name of your editor.
	X.Sp
	XDefault: $EDITOR
	X.Ip "YOUSAID (%)" 8
	XGives the format of the attribution line in front of the quoted article
	Xincluded by an R command.
	X.Sp
	XDefault: In article %i you write:
	X.SH MACROS
	XWhen
	X.I rn
	Xstarts up, it looks for a file containing macro definitions (see environment
	Xvariable RNMACRO).
	XAny sequence of commands may be bound to any sequence of keys, so you
	Xcould remap your entire keyboard if you desire.
	XBlank lines or lines beginning with # in the macro file are considered
	Xcomments; otherwise
	X.I rn
	Xlooks for two fields separated by white space.
	XThe first field gives the sequence of keystrokes that trigger the macro,
	Xand the second field gives the sequence of commands to execute.
	XBoth fields are subject to % interpolation, which will also translate
	Xbackslash and uparrow sequences.
	X(The keystroke field is interpreted at startup time, but the command field
	Xis interpreted at macro execution time so that you may refer to % values
	Xin a macro.)
	XFor example, if you want to reverse the roles of carriage return and
	Xspace in rn
	X.Sp
	X^J	\e040
	X.br
	X^M	\e040
	X.br
	X\e040	^J
	X.Sp
	Xwill do just that.
	XBy default, all characters in the command field are interpreted as the
	Xcanonical
	X.I rn
	Xcharacters, i.e. no macro expansion is done.
	XOtherwise the above pair of macros would cause an infinite loop.
	XTo force macro expansion in the command field, enclose the
	Xmacro call with ^( ... ^) thusly:
	X.Sp
	X@s	|mysavescript
	X.br
	X@w	w^(@s^)
	X.Sp
	XYou can use the %() conditional construct to construct macros that work
	Xdifferently under different circumstances.
	XIn particular, the current mode (%m) of
	X.I rn
	Xcould be used to make a command that only works at a particular level.
	XFor example,
	X.Sp
	X^[[O	%(%m=p?\e040)
	X.Sp
	Xwill only allow the macro to work at the pager level.
	X.Sp
	X%(%{TERM}=vt100?^[[O)	/^J
	X.Sp
	Xwill do the binding only if the terminal type is vt100,
	Xthough if you have many of these it would be better to have separate
	Xfiles for each terminal.
	X.Sp
	XIf you want to bind a macro to a function key that puts a common garbage character
	Xafter the sequence (such as the carriage return on the end of Televideo 920
	Xfunction sequences), DO NOT put the carriage return
	Xinto all the sequences or you will waste a CONSIDERABLE amount of internal
	Xstorage.
	XInstead of \*(L"^AF^M\*(R", put \*(L"^AF+1\*(R", which indicates to
	X.I rn
	Xthat it should gobble up one character after the F.
	X.SH AUTHOR
	XLarry Wall <lwall@sdcrdcf.UUCP>
	X.br
	XRegular expression routines are borrowed from emacs, by James Gosling.
	X.SH FILES
	X.Ip "%./.newsrc" 1.25i
	Xstatus of your news reading
	X.Ip "%./.oldnewsrc" 1.25i
	Xbackup copy of your
	X.I .newsrc
	Xfrom start of session
	X.Ip "%./.rnlock" 1.25i
	Xlock file so you don't screw up your
	X.I .newsrc
	X.Ip "%./.rnlast" 1.25i
	Xinfo from last run of rn
	X.Ip "%./.rnsoft" 1.25i
	Xsoft pointers into /usr/lib/active to speed startup, synchronous with
	X.I .newsrc
	X.Ip "%./.rnhead" 1.25i
	Xtemporary header file to pass to a mailer or news poster
	X.Ip "%./.rnmac" 1.25i
	Xmacro and keymap definitions
	X.Ip "%p" 1.25i
	Xyour news save directory, usually ~/News
	X.Ip "%x/active" 1.25i
	Xthe list of active newsgroups, usually /usr/lib/news/active
	X.Ip "%P" 1.25i
	Xthe public news spool directory, usually /usr/spool/news
	X.Ip "%X/INIT" 1.25i
	Xsystem-wide default switches
	X.SH SEE ALSO
	Xnewsrc(5), more(1), readnews(1), Pnews(1), Rnmail(1)
	X.SH DIAGNOSTICS
	XGenerally self-documenting, as they say.
	X.SH BUGS
	XThe
	X.B \-h
	Xswitch can only hide header lines that
	X.I rn
	Xknows about.
	X.PP
	XThe \*(L'\-\*(R' command doesn't cross newsgroup boundaries, and only undoes
	Xthe last article selection.
	X.PP
	XIf you edit your
	X.I .newsrc
	Xwhile
	X.I rn
	Xis running,
	X.I rn
	Xwill happily wipe out your changes when it decides to
	Xwrite out the
	X.I .newsrc
	Xfile.
	X.PP
	X.I Rn
	Xdoesn't do certain things (like ordering articles on posting date) that
	Xthe author feels should be handled by inews.
	X.PP
	XMarking of duplicate articles as read in cross-referenced newsgroups will
	Xnot work unless the Xref patch is installed in inews.
	X.PP
	XIf you get carried away with % or escape substitutions, you can overflow
	Xbuffers.
	X.PP
	XThere should be no fixed limit on the number of newsgroups.
	X.PP
	XSome of the more esoteric features may be missing on machines with limited
	Xaddress space.
SHAR_EOF
if test 57015 -ne "`wc -c < 'rn.1'`"
then
	echo shar: error transmitting "'rn.1'" '(should have been 57015 characters)'
fi
fi # end of overwriting check
#	End of shell archive
exit 0

