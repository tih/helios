#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	src/Makefile.dst
#	src/checkgroups.sh
#	src/defs.dist
#	src/euninstal.com
#	src/getdate.y
#	src/header.h
#	src/help
#	src/install.sh
#	src/iparams.h
#	src/localize.4.3
#	src/localize.7300
#	src/localize.sample
#	src/localize.usg
#	src/localize.v7
#	src/localize.vms
#	src/makeactive.sh
#	src/ndir.h
#	src/params.h
#	src/patchlevel.h
#	src/rmgroup.sh
#	src/rparams.h
#	src/sendbatch.sh
#	src/vnews.help
# This archive created: Wed Mar  1 10:57:02 1989
export PATH; PATH=/bin:$PATH
echo shar: extracting "'Makefile.dst'" '(12847 characters)'
if test -f 'Makefile.dst'
then
	echo shar: will not over-write existing file "'Makefile.dst'"
else
sed 's/^	X//' << \SHAR_EOF > 'Makefile.dst'
	X# '@(#)Makefile.dst	1.30	12/1/87'
	X# Generic Makefile.
	X# This is converted to USG/v7/etc by localize.sh
	X# which should at least be a copy of localize.v7 or localize.usg
	X
	X# We MUST use the Bourne shell during the install phase
	XSHELL=/bin/sh
	X
	X# definitions
	X
	X#V7 OSTYPE = v7
	X#USG OSTYPE = usg
	X
	X# HOME is the user name whose home dir has all the news stuff in it.
	XHOME=	exptools
	X# Use the -DHOME line if you want dynamic lookup in /etc/passwd
	X#HOMENAME=	-DHOME=\"$(HOME)\"
	XHOMENAME=
	X
	X# Support for Parallel Make files on a Sequent
	X#P=&
	X
	XNEWSUSR = news
	XNEWSGRP = news
	XSPOOLDIR = /usr/spool/news
	XBATCHDIR = /usr/spool/batch
	XLIBDIR = /usr/lib/news
	XBINDIR = /usr/bin
	XDESTDIR =
	XUUXFLAGS = -r -z
	XMAXPERBATCH = 1000000000
	XMINDISKFREE = 0
	XSPOOL_DISK = /usr/spool
	X
	X#NNTP NNTPDIR = NNTPSRC
	X
	XLNRNEWS = ln
	X#VMS LNRNEWS = cp	# No links in Eunice
	XDEBUG =
	XSCCSID = -DSCCSID
	X
	X#NNTP SERVER= -DSERVER -I$(NNTPDIR)/common
	X
	X# Order is important here
	XINST = full
	X#NFSCLIENT INST = nfs
	X
	X#NFSCLIENT NFSCLIENT= -DNFSCLIENT
	XNFSSPOOLDIR = /nfsnews/$(SPOOLDIR)
	XNFSLIBDIR = /nfsnews/$(LIBDIR)
	X
	XDEFS =	-DRNEWS=\"$(DESTDIR)$(BINDIR)/rnews\" \
	X	-DSPOOLDIR=\"$(DESTDIR)$(SPOOLDIR)\" \
	X	-DBATCHDIR=\"$(DESTDIR)$(BATCHDIR)\" -DLIBDIR=\"$(DESTDIR)$(LIBDIR)\" \
	X	-DBINDIR=\"$(DESTDIR)$(BINDIR)\" -DNEWSUSR=\"$(NEWSUSR)\" \
	X	-DNEWSGRP=\"$(NEWSGRP)\" ${SERVER} ${NFSCLIENT}
	X
	X# Order is important here
	XINSCOMPRESS=
	X#BSD4_3 INSCOMPRESS= rm -f $(DESTDIR)$(LIBDIR)/compress; ln -s /usr/ucb/compress $(DESTDIR)$(LIBDIR)/compress
	XCOMPRESS= compress
	X#BSD4_3 COMPRESS=
	X
	X#USG VFORK=-Dvfork=fork
	X#V7 VFORK=-Dvfork=fork
	X#EXCELAN NETINCLUDE= -I/usr/include/EXOS
	X#BSD4_1 VFORK=
	X#BSD4_2 VFORK=
	X#BSD4_3 VFORK=
	X
	X#USG IBMFLAGS =
	X#USG CFLAGS = ${DEBUG} -O $(IBMFLAGS) -DUSG -Dindex=strchr -Drindex=strrchr ${DEFS} ${SCCSID} ${VFORK} ${NETINCLUDE}
	X#USG LFLAGS = ${DEBUG} -s -i $(IBMFLAGS)
	X#USG LIBS =
	X#USG LINTFLAGS = -DUSG ${DEFS} ${NETINCLUDE}
	X#V7 CFLAGS = ${DEBUG} -DDBM ${DEFS} ${SCCSID} ${VFORK} ${NETINCLUDE}
	X#V7 LFLAGS = ${DEBUG}
	X#V7 LIBS = -ldbm
	X#V7 LINTFLAGS = -chba -DDBM ${DEFS} ${NETINCLUDE}
	X#BSD4_1 LIBS = -ldbm -ljobs
	X
	X#EXCELAN NETLIB = -lsocket
	X#RESOLVE NETLIB = -lresolv
	X
	XTERMLIB = -ltermlib
	XFIXACTIVE =
	X
	X#VMS TERMLIB = -ltrmlib
	X#VMS LIBS = -ldbm
	X#VMS CFLAGS = ${DEBUG} -O -DDBM ${DEFS} -DVMS ${SCCSID} ${VFORK}
	X#VMS MISC = uname.o
	X#VMS LINTFLAGS = -chba -DDBM -DVMS ${DEFS}
	X#VMS VFORK=
	X#VMS FIXACTIVE = /etc/vmstounix $(DESTDIR)$(LIBDIR)/active
	X
	X#NNTP CLIENTLIB = clientlib.o nntp.o
	X#V7 MISC = uname.o ${CLIENTLIB}
	X#USG MISC = ftime.o ${CLIENTLIB}
	XOBJECTS = funcs.o funcs2.o header.o ndir.o $(MISC) getdate.o 
	XIOBJECTS = inews.o ifuncs.o iextern.o control.o fullname.o \
	X	$(OBJECTS) ipathinit.o 
	X
	XPOBJECTS = postnews.o rextern.o rpathinit.o funcs.o $(MISC)
	XROBJECTS = readnews.o rfuncs.o rfuncs2.o rextern.o readr.o \
	X	process.o digest.o $(OBJECTS) rpathinit.o 
	XVOBJECTS = readnews.o rfuncs.o rfuncs2.o rextern.o process.o \
	X	$(OBJECTS) visual.o virtterm.o rpathinit.o 
	XEXPOBJS = expire.o header.o funcs.o getdate.o iextern.o \
	X	funcs2.o ndir.o $(MISC) epathinit.o 
	X
	X#NNTP CSRCS = $(NNTPDIR)/common/clientlib.c nntp.c
	X
	XSRCS = funcs.c funcs2.c header.c
	XISRCS = inews.c ifuncs.c iextern.c control.c fullname.c  $(SRCS)
	XPSRCS = postnews.c rextern.c funcs.c $(CSRCS)
	XRSRCS = readnews.c rfuncs.c rfuncs2.c rextern.c readr.c process.c  \
	X	digest.c $(SRCS) $(CSRCS)
	XVSRCS = readnews.c rfuncs.c rfuncs2.c rextern.c process.c $(SRCS) \
	X	visual.c virtterm.c $(CSRCS)
	XESRCS = expire.c header.c funcs.c iextern.c \
	X	funcs2.c
	XOSRCS = uurec.c recnews.c sendnews.c batch.c caesar.c \
	X	recmail.c compress.c
	X
	X
	X
	XUTILS = uurec recnews sendnews expire batch caesar recmail \
	X	encode decode $(COMPRESS)
	XSCRIPTS = sendbatch rmgroup checkgroups
	XNFSOTHERS = inews
	XOTHERS = $(NFSOTHERS) $(UTILS) $(SCRIPTS)
	XCOMMANDS = readnews checknews postnews vnews
	X
	X# dependencies
	Xall: $(INST)all
	X
	Xfullall: $(P) $(OTHERS) $(COMMANDS)
	X
	Xnfsall: $(P) $(NFSOTHERS) $(COMMANDS)
	X
	Xinstall: $(INST)install
	X
	Xfullinstall: all help vnews.help installit
	X	chmod 755 ./installit
	X	-test -d $(DESTDIR)$(BINDIR) || mkdir $(DESTDIR)$(BINDIR)
	X	-test -d $(DESTDIR)$(LIBDIR) || mkdir $(DESTDIR)$(LIBDIR)
	X	for i in $(COMMANDS); do \
	X		./installit -m 755 -o $(NEWSUSR) -g $(NEWSGRP) -s $$i \
	X			$(DESTDIR)$(BINDIR); \
	X	done
	X	cp help vnews.help $(DESTDIR)$(LIBDIR)
	X	for i in $(UTILS); do \
	X		./installit -m 755 -o $(NEWSUSR) -g $(NEWSGRP) -s $$i \
	X			$(DESTDIR)$(LIBDIR); \
	X	done
	X	for i in $(SCRIPTS); do \
	X		./installit -m 755 -o $(NEWSUSR) -g $(NEWSGRP) $$i \
	X		$(DESTDIR)$(LIBDIR); \
	X	done
	X	./installit -m 6755 -o $(NEWSUSR) -g $(NEWSGRP) -s inews \
	X		$(DESTDIR)$(LIBDIR)
	X	-rm -f $(DESTDIR)$(BINDIR)/rnews 
	X	${LNRNEWS} $(DESTDIR)$(LIBDIR)/inews $(DESTDIR)$(BINDIR)/rnews
	X	chmod 6755 $(DESTDIR)$(LIBDIR)/inews $(DESTDIR)$(BINDIR)/rnews
	X	$(INSCOMPRESS)
	X#VMS 	vms -v @euninstal
	X
	Xnfsinstall: nfsall help vnews.help
	X	chmod 755 ./installit
	X	-test -d $(DESTDIR)$(BINDIR) || mkdir $(DESTDIR)$(BINDIR)
	X	-test -d $(DESTDIR)$(LIBDIR) || mkdir $(DESTDIR)$(LIBDIR)
	X	for i in $(COMMANDS); do \
	X		./installit -m 755 -o $(NEWSUSR) -g $(NEWSGRP) -s $$i \
	X			$(DESTDIR)$(BINDIR); \
	X	done
	X	cp help vnews.help $(DESTDIR)$(LIBDIR)
	X	./installit -m 6755 -o root -g $(NEWSGRP) -s inews \
	X		$(DESTDIR)$(LIBDIR)
	X	-rm -f $(DESTDIR)$(BINDIR)/rnews
	X#VMS 	vms -v @euninstal
	X
	Xdefs.h:	defs.dist localize.sh Makefile.dst Makefile
	X	sh localize.sh
	X	@echo Localize has been run. Restart the make.
	X	@exit 1
	X
	XMakefile: localize.sh defs.dist Makefile.dst
	X	sh localize.sh
	X	@echo Localize has been run. Restart the make.
	X	@exit 1
	X
	Xupdate: $(INST)update
	X
	Xfullupdate: install.sh makeactive.sh
	X	sh install.sh $(DESTDIR)$(SPOOLDIR) $(DESTDIR)$(LIBDIR) $(DESTDIR)$(BINDIR) $(DESTDIR)$(NEWSUSR) $(DESTDIR)$(NEWSGRP) $(DESTDIR)$(OSTYPE)
	X	chmod 6755 $(DESTDIR)$(LIBDIR)/inews
	X
	Xnfsupdate: install.sh
	X	sh install.sh $(DESTDIR)$(SPOOLDIR) $(DESTDIR)$(LIBDIR) $(DESTDIR)$(BINDIR) $(DESTDIR)$(NEWSUSR) $(DESTDIR)$(NEWSGRP) $(DESTDIR)$(OSTYPE) $(DESTDIR)$(NFSSPOOLDIR) $(DESTDIR)$(NFSLIBDIR)
	X	chown root $(DESTDIR)$(LIBDIR)/inews
	X	chmod 6755 $(DESTDIR)$(LIBDIR)/inews
	X
	X
	Xclean:
	X	rm -f $(COMMANDS) $(OTHERS) *.o a.out
	X	rm -f core index errs getdate.c
	X
	Xlint:  ilint vlint rlint elint plint olint
	Xilint: defs.h params.h iparams.h header.h patchlevel.h $(ISRCS) pathinit.c
	X	lint $(LINTFLAGS) $(ISRCS) -DINEW pathinit.c
	Xvlint: defs.h params.h rparams.h header.h patchlevel.h $(VSRCS) pathinit.c
	X	lint $(LINTFLAGS) $(VSRCS) -DREAD pathinit.c
	Xrlint: defs.h params.h rparams.h header.h patchlevel.h $(RSRCS) pathinit.c
	X	lint $(LINTFLAGS) $(RSRCS) -DREAD pathinit.c
	Xelint: defs.h params.h iparams.h header.h patchlevel.h $(ESRCS) pathinit.c
	X	lint $(LINTFLAGS) $(ESRCS) -DEXP pathinit.c
	Xplint: defs.h params.h iparams.h header.h patchlevel.h $(PSRCS) pathinit.c
	X	lint $(LINTFLAGS) $(PSRCS) -DREAD pathinit.c
	X
	Xolint: defs.h params.h iparams.h header.h $(OSRCS)
	X	for i in $(OSRCS); do lint $(LINTFLAGS) $$i; done
	X
	Xinews:  $(P) $(IOBJECTS)
	X	$(CC) $(LFLAGS) $(IOBJECTS) -o inews $(LIBS)  #NOTVMS
	X#VMS 	vms link/notrace inews.o,ifuncs.o,iextern.o,control.o, \
	X#VMS 	fullname.o,ipathinit.o,funcs.o,funcs2.o,getdate.o,header.o, \
	X#VMS 	ndir.o,uname.o,lib:libdbm/lib,lib:libc/lib/exe=inews.
	X
	Xreadnews:  $(P) $(ROBJECTS)
	X	$(CC) $(LFLAGS) $(ROBJECTS) -o readnews $(NETLIB) $(LIBS)
	X#VMS 	mv readnews.exe readnews
	X
	X#NNTP clientlib.o: $(NNTPDIR)/common/clientlib.c
	X#NNTP 	$(CC) $(CFLAGS)  -c $(NNTPDIR)/common/clientlib.c
	X
	X#NNTP nntp.o: nntp.c
	X#NNTP 	$(CC) $(CFLAGS) -c nntp.c
	X
	Xfuncs.o:  funcs.c params.h defs.h header.h Makefile
	X	$(CC) $(CFLAGS) -c funcs.c
	X
	Xfuncs2.o:  funcs2.c params.h defs.h header.h Makefile
	X	$(CC) $(CFLAGS) -c funcs2.c
	X
	Xgetdate.o:  getdate.y defs.h
	X	@echo "expect 8 shift/reduce conflicts"
	X	yacc getdate.y
	X	mv y.tab.c getdate.c
	X	$(CC) $(CFLAGS) -c getdate.c
	X	-rm -f getdate.c
	X
	Xinews.o:  inews.c iparams.h defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) -c inews.c
	X
	Xifuncs.o:  ifuncs.c iparams.h defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) $(HOMENAME) -c ifuncs.c
	X
	Xiextern.o:  iextern.c iparams.h defs.h params.h Makefile header.h
	X	$(CC) $(CFLAGS) $(HOMENAME) -c iextern.c
	X
	Xpostnews: $(P) $(POBJECTS)
	X	$(CC) $(CFLAGS) $(LFLAGS) $(POBJECTS) -o postnews $(NETLIB) $(LIBS)
	X#VMS 	mv postnews.exe postnews
	X
	Xpostnews.o: postnews.c defs.h params.h header.h  Makefile
	X	$(CC) $(CFLAGS) -c postnews.c 
	X
	Xreadnews.o:  readnews.c rparams.h defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) $(HOMENAME) -c readnews.c
	X
	Xrfuncs.o:  rfuncs.c rparams.h defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) -c rfuncs.c
	X
	Xrfuncs2.o:  rfuncs2.c rparams.h defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) -c rfuncs2.c
	X
	Xrextern.o:  rextern.c rparams.h defs.h params.h Makefile header.h
	X	$(CC) $(CFLAGS) -c rextern.c
	X
	Xreadr.o:  readr.c rparams.h defs.h params.h Makefile ndir.h header.h
	X	$(CC) $(CFLAGS) -c readr.c
	X
	Xchecknews.o:  checknews.c defs.h header.h Makefile params.h
	X	$(CC) $(CFLAGS) -c checknews.c
	X
	Xvnews:	$(P) $(VOBJECTS)
	X	$(CC) $(LFLAGS) $(VOBJECTS)  -o $@  $(TERMLIB) $(NETLIB) $(LIBS)
	X#VMS 	mv vnews.exe vnews
	X
	Xvisual.o:  visual.c rparams.h defs.h params.h ndir.h header.h Makefile
	X	$(CC) $(CFLAGS) -c visual.c
	X
	Xcontrol.o:  control.c defs.h iparams.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) -c control.c
	X
	Xlogdir.o: logdir.c Makefile
	X	$(CC) $(CFLAGS) -c logdir.c
	X
	Xuname.o:  uname.c defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) -c uname.c
	X
	Xndir.o: ndir.c ndir.h defs.h
	X	$(CC) $(CFLAGS) -c ndir.c
	X
	Xuurec:  uurec.c defs.h Makefile
	X	$(CC) $(CFLAGS) $(LFLAGS) uurec.c -o uurec $(LIBS)
	X#VMS 	mv uurec.exe uurec
	X
	Xrecnews:  recnews.c defs.h header.h params.h Makefile
	X	$(CC) $(CFLAGS) $(LFLAGS) recnews.c -o recnews $(LIBS)
	X#VMS 	mv recnews.exe recnews
	X
	Xsendnews:  sendnews.o defs.h
	X	$(CC) $(LFLAGS) sendnews.o -o sendnews $(LIBS)
	X#VMS 	mv sendnews.exe sendnews
	X
	Xbatch:  batch.c Makefile defs.h
	X	$(CC) $(CFLAGS) $(LFLAGS) batch.c -o batch $(LIBS)
	X#VMS 	mv batch.exe batch
	X
	Xencode:	encode.c
	X	$(CC) $(CFLAGS) $(LFLAGS) encode.c -o encode $(LIBS)
	X#VMS 	mv encode.exe encode
	X
	Xdecode:	decode.c
	X	$(CC) $(CFLAGS) $(LFLAGS) decode.c -o decode $(LIBS)
	X#VMS 	mv decode.exe decode
	X
	Xcaesar:  caesar.c Makefile
	X	$(CC) $(CFLAGS) $(LFLAGS) caesar.c -o caesar -lm $(LIBS)
	X#VMS 	mv caesar.exe caesar
	X
	Xcompress: compress.c
	X	$(CC) $(CFLAGS) $(LFLAGS) -o compress compress.c $(LIBS)
	X#VMS 	mv compress.exe compress
	X
	Xrecmail:  recmail.c defs.h params.h header.h
	X	$(CC) $(CFLAGS) $(LFLAGS) recmail.c -o recmail $(LIBS)
	X#VMS 	mv recmail.exe recmail
	X
	Xprocess.o:  process.c rparams.h defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) -c process.c
	X
	Xchecknews:  $(P) checknews.o process.o cpathinit.o rextern.o $(NNTP) $(CLIENTLIB) 
	X	$(CC) $(LFLAGS) checknews.o process.o cpathinit.o rextern.o $(NNTP) $(CLIENTLIB) -o checknews $(NETLIB) $(LIBS)
	X#VMS 	mv checknews.exe checknews
	X
	Xsendbatch: sendbatch.sh Makefile
	X	sed -e "s%LIBDIR%$(DESTDIR)$(LIBDIR)%g" \
	X	 -e "s%UUXFLAGS%$(UUXFLAGS)%g" \
	X	 -e "s%MAXPERBATCH%$(MAXPERBATCH)%g" \
	X	 -e "s%MINDISKFREE%$(MINDISKFREE)%g" \
	X	 -e "s%SPOOL_DISK%$(SPOOL_DISK)%g" \
	X	 -e "s%BATCHDIR%$(DESTDIR)$(BATCHDIR)%g" sendbatch.sh > sendbatch
	X#VMS 	/etc/unixtovms sendbatch
	X
	Xrmgroup: rmgroup.sh Makefile
	X	sed -e "s%LIBDIR%$(DESTDIR)$(LIBDIR)%g" \
	X	 -e "s%FIXACTIVE%$(FIXACTIVE)%g" \
	X	 -e "s%SPOOLDIR%$(DESTDIR)$(SPOOLDIR)%g" rmgroup.sh > rmgroup
	X#VMS 	/etc/unixtovms rmgroup
	X
	Xcheckgroups: checkgroups.sh Makefile
	X	sed -e "s%LIBDIR%$(DESTDIR)$(LIBDIR)%g" checkgroups.sh > checkgroups
	X#VMS 	/etc/unixtovms checkgroups
	X
	Xsendnews.o: sendnews.c defs.h
	X	$(CC) $(CFLAGS) -c sendnews.c
	X
	Xfullname.o: defs.h params.h header.h Makefile
	X	$(CC) $(CFLAGS) -c fullname.c
	X
	Xexpire: $(P) $(EXPOBJS)
	X	$(CC) $(LFLAGS) -o expire $(EXPOBJS) $(LIBS)
	X#VMS 	mv expire.exe expire
	X
	Xheader.o:  header.c header.h defs.h patchlevel.h params.h Makefile
	X	$(CC) $(CFLAGS) -c header.c
	X
	Xexpire.o:  expire.c defs.h Makefile params.h ndir.h header.h Makefile
	X	$(CC) $(CFLAGS) -c expire.c
	X
	Xdigest.o:  digest.c Makefile
	X	$(CC) $(CFLAGS) -c digest.c
	X
	X# Some silliness here to get pathinit for both readnews & inews
	Xrpathinit.o:  pathinit.c rparams.h header.h params.h defs.h Makefile
	X	$(CC) $(CFLAGS) $(HOMENAME) -DREAD -c pathinit.c
	X	mv pathinit.o rpathinit.o
	X
	Xipathinit.o:  pathinit.c iparams.h header.h params.h defs.h Makefile
	X	$(CC) $(CFLAGS) $(HOMENAME) -DINEW -c pathinit.c
	X	mv pathinit.o ipathinit.o
	X
	Xcpathinit.o:  pathinit.c iparams.h header.h params.h defs.h Makefile
	X	$(CC) $(CFLAGS) $(HOMENAME) -DCHKN -c pathinit.c
	X	mv pathinit.o cpathinit.o
	X
	Xepathinit.o:  pathinit.c iparams.h header.h params.h defs.h Makefile
	X	$(CC) $(CFLAGS) $(HOMENAME) -DEXP -c pathinit.c
	X	mv pathinit.o epathinit.o
	X
	Xtags:	/tmp
	X	ctags -w *.h *.c
	X
	X$(DESTDIR)$(LIBDIR):
	X	mkdir $(DESTDIR)$(LIBDIR)
	X	chmod 755 $(DESTDIR)$(LIBDIR)
	X	chown $(NEWSUSR) $(DESTDIR)$(LIBDIR)
	X	chgrp $(NEWSGRP) $(DESTDIR)$(LIBDIR)
	X
	X$(DESTDIR)$(BINDIR):
	X	mkdir $(DESTDIR)$(BINDIR)
	X	chmod 755 $(DESTDIR)$(BINDIR)
	X	chown $(NEWSUSR) $(DESTDIR)$(BINDIR)
	X	chgrp $(NEWSGRP) $(DESTDIR)$(BINDIR)
SHAR_EOF
if test 12847 -ne "`wc -c < 'Makefile.dst'`"
then
	echo shar: error transmitting "'Makefile.dst'" '(should have been 12847 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'checkgroups.sh'" '(3777 characters)'
if test -f 'checkgroups.sh'
then
	echo shar: will not over-write existing file "'checkgroups.sh'"
else
sed 's/^	X//' << \SHAR_EOF > 'checkgroups.sh'
	X: check active file for missing or extra newsgroups
	X: '@(#)checkgroups	1.24	11/4/87'
	X
	Xif  test  ! -s LIBDIR/newsgroups
	Xthen
	X	cp /dev/null LIBDIR/newsgroups
	Xfi
	Xecho "" >/tmp/$$out
	X# Read first line of stdin.  If of the form "-n group", then only check
	X# for the specified group.  Otherwise, assume doing standard groups
	Xsed -e "/^From: /w /tmp/$$out" -e '/^[a-zA-Z-]*: /d' -e '/^$/d' -e '/^[#:]/d' | (
	Xread line
	Xcase "${line}" in
	X-n*)
	X	# Doing specific group.  extract group name and preserve
	X	# all of current newsgroups file except for that group.
	X	# Then append entries for this group.
	X	group=`echo "x${line}" | sed -e 's/x-n /^/' -e 's/$/[. 	]/'`
	X	egrep -v "${group}" LIBDIR/newsgroups > /tmp/$$a
	X	cat /tmp/$$a - > LIBDIR/newsgroups
	X	;;
	X*)
	X	# Get the distributions from the checkgroups message itself
	X	# This allows sites to append their local groups to the distributed
	X	# checkgroups message and prevents stray checkgroups from other sites
	X	# from showing all the local groups as being bad groups.
	X	#
	X	echo "${line}" > /tmp/$$msg
	X	cat >> /tmp/$$msg
	X	cp /dev/null /tmp/$$b
	X	sed -e "s;[ 	].*;;" -e "s;\..*;;" -e "s;^!;;" /tmp/$$msg | sort -u |
	X		while read dist
	X		do
	X			group=`cat /tmp/$$b`
	X			group="${group}|^$dist[. 	]"
	X			echo "${group}" > /tmp/$$b
	X		done
	X	group=`cat /tmp/$$b`
	X	egrep -v "${group}" LIBDIR/newsgroups > /tmp/$$a
	X	cat /tmp/$$a > LIBDIR/newsgroups
	X	sed -e "/^!/d" /tmp/$$msg >> LIBDIR/newsgroups
	X	rm -f /tmp/$$b /tmp/$$msg
	X	;;
	Xesac
	X
	Xegrep "${group}" LIBDIR/active | sed 's/ .*//' | sort >/tmp/$$active
	Xegrep "${group}" LIBDIR/newsgroups | sed 's/[ 	].*//' | sort >/tmp/$$newsgrps
	X
	Xcomm -13 /tmp/$$active /tmp/$$newsgrps >/tmp/$$missing
	Xcomm -23 /tmp/$$active /tmp/$$newsgrps >/tmp/$$remove
	X
	Xegrep "${group}" LIBDIR/active | sed -n "/m\$/s/ .*//p" |
	X	sort > /tmp/$$amod.all
	Xegrep "${group}" LIBDIR/newsgroups |
	Xsed -n "/Moderated/s/[ 	][ 	]*.*//p" | sort > /tmp/$$ng.mod
	X
	Xcomm -12 /tmp/$$missing /tmp/$$ng.mod >/tmp/$$add.mod
	Xcomm -23 /tmp/$$missing /tmp/$$ng.mod >/tmp/$$add.unmod
	Xcat /tmp/$$add.mod /tmp/$$add.unmod >>/tmp/$$add
	X
	Xcomm -23 /tmp/$$amod.all /tmp/$$remove >/tmp/$$amod
	Xcomm -13 /tmp/$$ng.mod /tmp/$$amod >/tmp/$$ismod
	Xcomm -23 /tmp/$$ng.mod /tmp/$$amod >/tmp/$$nm.all
	Xcomm -23 /tmp/$$nm.all /tmp/$$add >/tmp/$$notmod
	X
	Xecho "" >>/tmp/$$out
	Xif test -s /tmp/$$remove
	Xthen
	X	(
	X	echo "# The following newsgroups are non-standard."
	X	sed "s/^/#	/" /tmp/$$remove
	X	echo ""
	X	echo "# You can remove them by executing the commands:"
	X	echo \	LIBDIR/rmgroup `cat /tmp/$$remove`
	X	echo ""
	X	) 2>&1 >>/tmp/$$out
	Xfi
	X
	Xif test -s /tmp/$$add
	Xthen
	X	(
	X	echo "# The following newsgroups were missing and should be added."
	X	sed "s/^/#	/" /tmp/$$add
	X	echo ""
	X	echo "# You can do this by executing the command(s):"
	X	for i in `cat /tmp/$$add.unmod`
	X	do
	X		echo 'LIBDIR/inews -C '$i' </dev/null'
	X	done
	X	for i in `cat /tmp/$$add.mod`
	X	do
	X		echo 'LIBDIR/inews -C '$i' moderated </dev/null'
	X	done
	X	echo ""
	X	) 2>&1 >>/tmp/$$out
	Xfi
	X
	Xif test -s /tmp/$$ismod
	Xthen
	X	(
	X	echo "# The following newsgroups are not moderated and are marked moderated."
	X	sed "s/^/#	/" /tmp/$$ismod
	X	echo ""
	X	echo "# You can correct this by executing the command(s):"
	X	for i in `cat /tmp/$$ismod`
	X	do
	X		echo 'LIBDIR/inews -C '$i' </dev/null'
	X	done
	X	echo ""
	X	) 2>&1 >>/tmp/$$out
	Xfi
	X
	Xif test -s /tmp/$$notmod
	Xthen
	X	(
	X	echo "# The following newsgroups are moderated and not marked so."
	X	sed "s/^/#	/" /tmp/$$notmod
	X	echo ""
	X	echo "# You can correct this by executing the command(s):"
	X	for i in `cat /tmp/$$notmod`
	X	do
	X		echo 'LIBDIR/inews -C '$i' moderated </dev/null'
	X	done
	X	echo ""
	X	) 2>&1 >>/tmp/$$out
	Xfi
	X
	Xif test -s /tmp/$$out
	Xthen
	X	(echo	"Subject: Problems with your active file"
	X	echo ""
	X	cat /tmp/$$out
	X	) | if test $# -gt 0
	X		then
	X			PATH=/bin:$PATH
	X			mail $1
	X		else
	X			cat
	X		fi	
	Xfi
	X)
	X
	Xrm -f /tmp/$$*
SHAR_EOF
if test 3777 -ne "`wc -c < 'checkgroups.sh'`"
then
	echo shar: error transmitting "'checkgroups.sh'" '(should have been 3777 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'defs.dist'" '(7614 characters)'
if test -f 'defs.dist'
then
	echo shar: will not over-write existing file "'defs.dist'"
else
sed 's/^	X//' << \SHAR_EOF > 'defs.dist'
	X/*
	X *	This software is Copyright (c) 1986 by Rick Adams.
	X *
	X *	Permission is hereby granted to copy, reproduce, redistribute or
	X *	otherwise use this software as long as: there is no monetary
	X *	profit gained specifically from the use or reproduction or this
	X *	software, it is not sold, rented, traded or otherwise marketed, and
	X *	this copyright notice is included prominently in any copy
	X *	made.
	X *
	X *	The author make no claims as to the fitness or correctness of
	X *	this software for any use whatsoever, and it is provided as is. 
	X *	Any use of this software is at the user's own risk.
	X *
	X */
	X
	X/*	@(#)defs.dist	2.61	11/30/87	*/
	X
	X/*
	X * defs.h - defines for news-related programs.
	X *
	X * If you remove any lines here or in your Makefile, make the change
	X * to localize.sh so you won't have to redo it for each news release.
	X *
	X * If TMAIL is undefined, the -M option will be disabled.
	X *
	X * By convention, the version of the software you are running is taken
	X * to be news_version below.
	X */
	X
	X#define DAYS	(60L*60L*24L)
	X#define WEEKS	(7*DAYS)
	X/* Things that very well may require local configuration */
	X#ifndef HOME
	X#define ROOTID	10	/* uid of person allowed to cancel anything	*/
	X#endif
	X#define N_UMASK 000	/* mask for umask call, 022 for secure system	*/
	X#define DFLTEXP	2*WEEKS	/* default no. of seconds to expire in		*/
	X#define HISTEXP	4*WEEKS	/* default no. of seconds to forget in		*/
	X#define DFLTSUB "general,all.announce"	/* default subscription list	*/
	X#define TMAIL	"/usr/ucb/Mail"	/* Mail program that understands -T	*/
	X#define ADMSUB	"general,all.announce"	/* Mandatory subscription list	*/
	X#define PAGE	"/usr/ucb/more"	/* Default pager			*/
	X#define NOTIFY	"usenet"	/* Tell him about certain ctl messages	*/
	X				/* Default xmit command - remove -z if	*/
	X#define DFTXMIT	"uux - -r -z %s!rnews < %s" /* your uux can't do it	*/
	X#define UXMIT	"uux -r -z -c %s!rnews '<' %s" /* If uux -c is ok	*/
	X#define DFTEDITOR "vi"		/* Default editor, see also postnews.	*/
	X/* #define UUPROG "euuname"	/* omit for uuname, put in LIBDIR	*/
	X#define MANUALLY		/* Don't execute rmgroups, just notify.	*/
	X/* #define NONEWGROUPS		/* Don't create new groups, just notify.*/
	X/* #define SPOOLNEWS		/* Spool incoming rnews, don't process	*/
	X/* #define SPOOLINEWS		/* Spool local inews, don't process	*/
	X/* #define LOCALNAME 		/* There is no full name database. 	*/
	X/* #define INTERNET		/* Internet mail works locally		*/
	X#define MYDOMAIN ".UUCP"	/* Local domain				*/
	X/* #define CHEAP		/* don't chown files to news		*/
	X/* #define OLD			/* Add extra headers for old neighbors	*/
	X/* #define UNAME		/* If uname call returns your nodename  */
	X/* #define GHNAME		/* If gethostname call is available.	*/
	X/* #define UUNAME "/etc/uucpname" /* If your nodename is stored in a file */
	X#define V7MAIL			/* Local mail format is V7 ("From ")	*/
	X#define SORTACTIVE		/* if you want news presented in the order of the .newsrc */
	X#define ZAPNOTES		/* if you want old style notes headers moved into the headers */
	X#define DIGPAGE			/* allow digestifying in vnews */
	X/* #define DOXREFS		/* Generate xref line for rn to use */
	X/* #define MULTICAST		/* If you want to be able to multicast news */
	X/* #define BSD4_2		/* If you are running 4.2  or 4.3 BSD	*/
	X/* #define BSD2_10		/* If you are running 2.10 BSD */
	X/* #define LOCKF		/* If you have the lockf() sys call */
	X/* #define LOCKING		/* If you have the locking() sys call */
	X/* #define DOGETUSER		/* Always do 'getuser' so can't fake name */
	X/* #define LOGDIR		/* use the 'logdir' call on path lookups */
	X/* #define MKDIRSUB		/* your system has mkdir as a syscall */
	X/* #define READDIR		/* your system has readdir() in libc */
	X/* #define RENAMESUB		/* your system has rename() in libc */
	X/* #define ALWAYSALIAS		/* temporary kludge for conversion */
	X/* #define SENDMAIL "/usr/lib/sendmail" /* command line to run "sendmail" if you have it	*/
	X/* #define MMDF	"/usr/mmdf/submit"	/* command line to run mmdf if you have it */
	X#define MYORG "Frobozz Inc., St. Louis"	/* My organization.  Please	*/
	X				/* include your city (and state, and	*/
	X				/* country, if not obvious) in MYORG,	*/
	X				/* and please keep it short.		*/
	X/* #define HIDDENNET "frooz"	/* if you have a local network and want */
	X				/* The mail address to look like it came */
	X				/* from one machine */
	X/* NOTE: The following two macros replace the use of HIDDENNET */
	X/* #define GENERICPATH "frooz"	/* If you are using a shared USENET/UUCP node */
	X/* #define GENERICFROM "Frobozz.COM"	/* If you want generic From:-addresses */
	X/* #define NICENESS	4	/* does a nice(NICENESS) in rnews */
	X/* #define FASCIST	"all,!all.all"	/* only permit posting to certain groups */
	X				/* see installation guide for details */
	X/* #define SMALL_ADDRESS_SPACE	/* If your machine can't address > 32767 */
	X/* #define ORGDISTRIB	"froozum"	/* For organization wide control message handling */
	X/* #define MODFILEONLY		/* define when local postings to moderated */
	X				/* groups must be approved by the contents */
	X				/* of the $(LIB)/moderators file	   */
	X
	X/* Things you might want to change */
	X#define NEWSRC  ".newsrc"	/* name of .newsrc file (in home dir)	*/
	X#define LINES	512	/* maximum no. of lines in .newsrc		*/
	X#define NEGCHAR	'!'	/* newsgroup negation character			*/
	X#define DEADTIME 45	/* no. of seconds to wait on deadlock		*/
	X#define FMETA	'%'	/* file meta-character for c option		*/
	X#if defined(pdp11) || defined(SMALL_ADDRESS_SPACE)
	X# define BUFLEN	128	/* standard buffer size				*/
	X#else
	X# define BUFLEN	256	/* standard buffer size				*/
	X#endif
	X#define LBUFLEN 1024	/* big buffer size				*/
	X#define SBUFLEN 32	/* small buffer size (for system names, etc)	*/
	X#define LNCNT	14	/* Articles with > LNCNT lines go through pager */
	X
	X/* Things you probably won't want to change */
	X#define PATHLEN 512	/* length of longest source string		*/
	X#define DATELEN	64	/* length of longest allowed date string	*/
	X#define NAMELEN	128	/* length of longest possible message ID	*/
	X#define SNLN	8	/* max significant characters in sysname	*/
	X#define PROTO	'A'	/* old protocol name				*/
	X#define NETCHRS	"!:@^%,"/* Punct. chars used for various networks	*/
	X#define TRUE	1	/* boolean true					*/
	X#define FALSE	0	/* boolean false				*/
	X#define PERHAPS	2	/* indeterminate boolean value			*/
	X#define NGDELIM	','	/* delimit character in news group line		*/
	X
	X/* for NNTP */
	X#ifdef SERVER
	X# include "NNTPSRC/common/response_codes.h"
	X# define SERVER_FILE "SERVERFILE"
	X#endif /* SERVER */
	X
	X#ifdef M_XENIX
	X#define index	strchr
	X#define rindex	strrchr
	X#define	vfork	fork
	X#endif /* M_XENIX */
	X
	X/* for NFS Support */
	X#ifdef NFSCLIENT		/* NFSSYSNAME found in $(LIB)/nfssysname */
	X# define NFSCMDFORMAT "/usr/ucb/rsh %s /usr/lib/news/inews -p < %s"
	X# define NFSCMDARGS NFSSYSNAME,ARTICLE
	X	/* If NFSCLIENT is flagged in Makefile, then we're compiling code
	X	 * for an NFS client system.  In this case, inews on the client is
	X	 * expected to only do some preliminary checking.  The full check is
	X	 * expected to happen on the host NFSCLIENT.  The two statements above
	X	 * are used to form a command which is called by system(command) in the
	X	 * code.  The two arguments are most probably the only pieces of
	X	 * information that one will need from within the program.  The first
	X	 * argument (NFSSYSNAME) is the name of the master system that is
	X	 * suppose to perform the final checks and post the article.  The
	X	 * second argument (ARTicle) is a string which contains the /tmp
	X	 * file name of the file that has the article to be posted. Note:
	X	 * all program and file names should be fully qualified with directory
	X	 * names for security purposes!!!!
	X	 */
	X#endif /* NFSCLIENT */
SHAR_EOF
if test 7614 -ne "`wc -c < 'defs.dist'`"
then
	echo shar: error transmitting "'defs.dist'" '(should have been 7614 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'euninstal.com'" '(295 characters)'
if test -f 'euninstal.com'
then
	echo shar: will not over-write existing file "'euninstal.com'"
else
sed 's/^	X//' << \SHAR_EOF > 'euninstal.com'
	X$ ! @(#)euninstal.com	1.2	10/28/86
	X$ ! This DCL script installs inews and rnews with the necessary
	X$ ! privileges in a Eunice system.
	X$ SET PROCESS/PRIV=CMKRNL
	X$ RUN SYS$SYSTEM:INSTALL
	XEUN_USR:[USR.BIN]RNEWS. /OPEN/SHARED/PRIV=SYSPRV
	XEUN_USR:[USR.LIB.NEWS]INEWS. /OPEN/SHARED/PRIV=SYSPRV
	X$ EXIT
SHAR_EOF
if test 295 -ne "`wc -c < 'euninstal.com'`"
then
	echo shar: error transmitting "'euninstal.com'" '(should have been 295 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'getdate.y'" '(12800 characters)'
if test -f 'getdate.y'
then
	echo shar: will not over-write existing file "'getdate.y'"
else
sed 's/^	X//' << \SHAR_EOF > 'getdate.y'
	X%token ID MONTH DAY MERIDIAN NUMBER UNIT MUNIT SUNIT ZONE DAYZONE AGO
	X%{
	X	/* 	Originally from: Steven M. Bellovin (unc!smb)	*/ 
	X	/*	Dept. of Computer Science			*/
	X	/*	University of North Carolina at Chapel Hill	*/
	X	/*	@(#)getdate.y	2.17	11/30/87			*/
	X
	X#include "defs.h"
	X#include <sys/types.h>
	X#ifdef USG
	Xstruct timeb
	X{
	X	time_t	time;
	X	unsigned short millitm;
	X	short	timezone;
	X	short	dstflag;
	X};
	X#else
	X#include <sys/timeb.h>
	X#endif
	X#include <ctype.h>
	X
	X#if defined(BSD4_2) || defined (BSD4_1C)
	X#include <sys/time.h>
	X#else /* sane */
	X#include <time.h>
	X#endif /* sane */
	X
	X#define	NULL	0
	X#define daysec (24L*60L*60L)
	X	static int timeflag, zoneflag, dateflag, dayflag, relflag;
	X	static time_t relsec, relmonth;
	X	static int hh, mm, ss, merid, daylight;
	X	static int dayord, dayreq;
	X	static int month, day, year;
	X	static int ourzone;
	X#define AM 1
	X#define PM 2
	X#define DAYLIGHT 1
	X#define STANDARD 2
	X#define MAYBE    3
	X%}
	X
	X%%
	Xtimedate: 		/* empty */
	X	| timedate item;
	X
	Xitem:	tspec =
	X		{timeflag++;}
	X	| zone =
	X		{zoneflag++;}
	X	| dtspec =
	X		{dateflag++;}
	X	| dyspec =
	X		{dayflag++;}
	X	| rspec =
	X		{relflag++;}
	X	| nspec;
	X
	Xnspec:	NUMBER =
	X		{if (timeflag && dateflag && !relflag) year = $1;
	X		else {timeflag++;hh = $1/100;mm = $1%100;ss = 0;merid = 24;}};
	X
	Xtspec:	NUMBER MERIDIAN =
	X		{hh = $1; mm = 0; ss = 0; merid = $2;}
	X	| NUMBER ':' NUMBER =
	X		{hh = $1; mm = $3; merid = 24;}
	X	| NUMBER ':' NUMBER MERIDIAN =
	X		{hh = $1; mm = $3; merid = $4;}
	X	| NUMBER ':' NUMBER NUMBER =
	X		{hh = $1; mm = $3; merid = 24;
	X		daylight = STANDARD; ourzone = -($4%100 + 60*($4/100));}
	X	| NUMBER ':' NUMBER ':' NUMBER =
	X		{hh = $1; mm = $3; ss = $5; merid = 24;}
	X	| NUMBER ':' NUMBER ':' NUMBER MERIDIAN =
	X		{hh = $1; mm = $3; ss = $5; merid = $6;}
	X	| NUMBER ':' NUMBER ':' NUMBER NUMBER =
	X		{hh = $1; mm = $3; ss = $5; merid = 24;
	X		daylight = STANDARD; ourzone = -($6%100 + 60*($6/100));};
	X
	Xzone:	ZONE =
	X		{ourzone = $1; daylight = STANDARD;}
	X	| DAYZONE =
	X		{ourzone = $1; daylight = DAYLIGHT;};
	X
	Xdyspec:	DAY =
	X		{dayord = 1; dayreq = $1;}
	X	| DAY ',' =
	X		{dayord = 1; dayreq = $1;}
	X	| NUMBER DAY =
	X		{dayord = $1; dayreq = $2;};
	X
	Xdtspec:	NUMBER '/' NUMBER =
	X		{month = $1; day = $3;}
	X	| NUMBER '/' NUMBER '/' NUMBER =
	X		{month = $1; day = $3; year = $5;}
	X	| MONTH NUMBER =
	X		{month = $1; day = $2;}
	X	| MONTH NUMBER ',' NUMBER =
	X		{month = $1; day = $2; year = $4;}
	X	| NUMBER MONTH =
	X		{month = $2; day = $1;}
	X	| NUMBER MONTH NUMBER =
	X		{month = $2; day = $1; year = $3;};
	X
	X
	Xrspec:	NUMBER UNIT =
	X		{relsec +=  60L * $1 * $2;}
	X	| NUMBER MUNIT =
	X		{relmonth += $1 * $2;}
	X	| NUMBER SUNIT =
	X		{relsec += $1;}
	X	| UNIT =
	X		{relsec +=  60L * $1;}
	X	| MUNIT =
	X		{relmonth += $1;}
	X	| SUNIT =
	X		{relsec++;}
	X	| rspec AGO =
	X		{relsec = -relsec; relmonth = -relmonth;};
	X%%
	X
	Xstatic int mdays[12] =
	X	{31, 0, 31,  30, 31, 30,  31, 31, 30,  31, 30, 31};
	X#define epoch 1970
	X
	Xextern struct tm *localtime();
	X
	Xtime_t
	Xdateconv(mm, dd, yy, h, m, s, mer, zone, dayflag)
	Xint mm, dd, yy, h, m, s, mer, zone, dayflag;
	X{
	X	time_t tod, jdate;
	X	register int i;
	X	time_t timeconv();
	X
	X	if (yy < 0) yy = -yy;
	X	if (yy < 100) yy += 1900;
	X	mdays[1] = 28 + (yy%4 == 0 && (yy%100 != 0 || yy%400 == 0));
	X	if (yy < epoch || yy > 1999 || mm < 1 || mm > 12 ||
	X		dd < 1 || dd > mdays[--mm]) return (-1);
	X	jdate = dd-1;
	X        for (i=0; i<mm; i++) jdate += mdays[i];
	X	for (i = epoch; i < yy; i++) jdate += 365 + (i%4 == 0);
	X	jdate *= daysec;
	X	jdate += zone * 60L;
	X	if ((tod = timeconv(h, m, s, mer)) < 0) return (-1);
	X	jdate += tod;
	X	if (dayflag==DAYLIGHT || (dayflag==MAYBE&&localtime(&jdate)->tm_isdst))
	X		jdate += -1*60*60;
	X	return (jdate);
	X}
	X
	Xtime_t
	Xdayconv(ord, day, now)
	Xint ord, day; time_t now;
	X{
	X	register struct tm *loctime;
	X	time_t tod;
	X	time_t daylcorr();
	X
	X	tod = now;
	X	loctime = localtime(&tod);
	X	tod += daysec * ((day - loctime->tm_wday + 7) % 7);
	X	tod += 7*daysec*(ord<=0?ord:ord-1);
	X	return daylcorr(tod, now);
	X}
	X
	Xtime_t
	Xtimeconv(hh, mm, ss, mer)
	Xregister int hh, mm, ss, mer;
	X{
	X	if (mm < 0 || mm > 59 || ss < 0 || ss > 59) return (-1);
	X	switch (mer) {
	X		case AM: if (hh < 1 || hh > 12) return(-1);
	X			 return (60L * ((hh%12)*60L + mm)+ss);
	X		case PM: if (hh < 1 || hh > 12) return(-1);
	X			 return (60L * ((hh%12 +12)*60L + mm)+ss);
	X		case 24: if (hh < 0 || hh > 23) return (-1);
	X			 return (60L * (hh*60L + mm)+ss);
	X		default: return (-1);
	X	}
	X}
	Xtime_t
	Xmonthadd(sdate, relmonth)
	Xtime_t sdate, relmonth;
	X{
	X	struct tm *ltime;
	X	time_t dateconv();
	X	time_t daylcorr();
	X	int mm, yy;
	X
	X	if (relmonth == 0) return 0;
	X	ltime = localtime(&sdate);
	X	mm = 12*ltime->tm_year + ltime->tm_mon + relmonth;
	X	yy = mm/12;
	X	mm = mm%12 + 1;
	X	return daylcorr(dateconv(mm, ltime->tm_mday, yy, ltime->tm_hour,
	X		ltime->tm_min, ltime->tm_sec, 24, ourzone, MAYBE), sdate);
	X}
	X
	Xtime_t
	Xdaylcorr(future, now)
	Xtime_t future, now;
	X{
	X	int fdayl, nowdayl;
	X
	X	nowdayl = (localtime(&now)->tm_hour+1) % 24;
	X	fdayl = (localtime(&future)->tm_hour+1) % 24;
	X	return (future-now) + 60L*60L*(nowdayl-fdayl);
	X}
	X
	Xstatic char *lptr;
	X
	Xyylex()
	X{
	X	extern int yylval;
	X	int sign;
	X	register char c;
	X	register char *p;
	X	char idbuf[20];
	X	int pcnt;
	X
	X	for (;;) {
	X		while (isspace(*lptr))
	X			lptr++;
	X
	X		if (isdigit(c = *lptr) || c == '-' || c == '+') {
	X			if (c== '-' || c == '+') {
	X				if (c=='-') sign = -1;
	X				else sign = 1;
	X				if (!isdigit(*++lptr)) {
	X					/* yylval = sign; return (NUMBER); */
	X					return yylex();	/* skip the '-' sign */
	X				}
	X			} else sign = 1;
	X			yylval = 0;
	X			while (isdigit(c = *lptr++))
	X				yylval = 10*yylval + c - '0';
	X			yylval *= sign;
	X			lptr--;
	X			return (NUMBER);
	X
	X		} else if (isalpha(c)) {
	X			p = idbuf;
	X			while (isalpha(c = *lptr++) || c=='.')
	X				if (p < &idbuf[sizeof(idbuf)-1]) *p++ = c;
	X			*p = '\0';
	X			lptr--;
	X			return (lookup(idbuf));
	X		}
	X
	X		else if (c == '(') {
	X			pcnt = 0;
	X			do {
	X				c = *lptr++;
	X				if (c == '\0') return(c);
	X				else if (c == '(') pcnt++;
	X				else if (c == ')') pcnt--;
	X			} while (pcnt > 0);
	X		}
	X
	X		else return (*lptr++);
	X	}
	X}
	X
	Xstruct table {
	X	char *name;
	X	int type, value;
	X};
	X
	Xstruct table mdtab[] = {
	X	{"january", MONTH, 1},
	X	{"february", MONTH, 2},
	X	{"march", MONTH, 3},
	X	{"april", MONTH, 4},
	X	{"may", MONTH, 5},
	X	{"june", MONTH, 6},
	X	{"july", MONTH, 7},
	X	{"august", MONTH, 8},
	X	{"september", MONTH, 9},
	X	{"sept", MONTH, 9},
	X	{"october", MONTH, 10},
	X	{"november", MONTH, 11},
	X	{"december", MONTH, 12},
	X
	X	{"sunday", DAY, 0},
	X	{"monday", DAY, 1},
	X	{"tuesday", DAY, 2},
	X	{"tues", DAY, 2},
	X	{"wednesday", DAY, 3},
	X	{"wednes", DAY, 3},
	X	{"thursday", DAY, 4},
	X	{"thur", DAY, 4},
	X	{"thurs", DAY, 4},
	X	{"friday", DAY, 5},
	X	{"saturday", DAY, 6},
	X	{0, 0, 0}};
	X
	X#define HRS *60
	X#define HALFHR 30
	Xstruct table mztab[] = {
	X	{"a.m.", MERIDIAN, AM},
	X	{"am", MERIDIAN, AM},
	X	{"p.m.", MERIDIAN, PM},
	X	{"pm", MERIDIAN, PM},
	X	{"nst", ZONE, 3 HRS + HALFHR},		/* Newfoundland */
	X	{"n.s.t.", ZONE, 3 HRS + HALFHR},
	X	{"ast", ZONE, 4 HRS},		/* Atlantic */
	X	{"a.s.t.", ZONE, 4 HRS},
	X	{"adt", DAYZONE, 4 HRS},
	X	{"a.d.t.", DAYZONE, 4 HRS},
	X	{"est", ZONE, 5 HRS},		/* Eastern */
	X	{"e.s.t.", ZONE, 5 HRS},
	X	{"edt", DAYZONE, 5 HRS},
	X	{"e.d.t.", DAYZONE, 5 HRS},
	X	{"cst", ZONE, 6 HRS},		/* Central */
	X	{"c.s.t.", ZONE, 6 HRS},
	X	{"cdt", DAYZONE, 6 HRS},
	X	{"c.d.t.", DAYZONE, 6 HRS},
	X	{"mst", ZONE, 7 HRS},		/* Mountain */
	X	{"m.s.t.", ZONE, 7 HRS},
	X	{"mdt", DAYZONE, 7 HRS},
	X	{"m.d.t.", DAYZONE, 7 HRS},
	X	{"pst", ZONE, 8 HRS},		/* Pacific */
	X	{"p.s.t.", ZONE, 8 HRS},
	X	{"pdt", DAYZONE, 8 HRS},
	X	{"p.d.t.", DAYZONE, 8 HRS},
	X	{"yst", ZONE, 9 HRS},		/* Yukon */
	X	{"y.s.t.", ZONE, 9 HRS},
	X	{"ydt", DAYZONE, 9 HRS},
	X	{"y.d.t.", DAYZONE, 9 HRS},
	X	{"hst", ZONE, 10 HRS},		/* Hawaii */
	X	{"h.s.t.", ZONE, 10 HRS},
	X	{"hdt", DAYZONE, 10 HRS},
	X	{"h.d.t.", DAYZONE, 10 HRS},
	X
	X	{"gmt", ZONE, 0 HRS},
	X	{"g.m.t.", ZONE, 0 HRS},
	X	{"bst", DAYZONE, 0 HRS},		/* British Summer Time */
	X	{"b.s.t.", DAYZONE, 0 HRS},
	X	{"eet", ZONE, 0 HRS},		/* European Eastern Time */
	X	{"e.e.t.", ZONE, 0 HRS},
	X	{"eest", DAYZONE, 0 HRS},	/* European Eastern Summer Time */
	X	{"e.e.s.t.", DAYZONE, 0 HRS},
	X	{"met", ZONE, -1 HRS},		/* Middle European Time */
	X	{"m.e.t.", ZONE, -1 HRS},
	X	{"mest", DAYZONE, -1 HRS},	/* Middle European Summer Time */
	X	{"m.e.s.t.", DAYZONE, -1 HRS},
	X	{"wet", ZONE, -2 HRS },		/* Western European Time */
	X	{"w.e.t.", ZONE, -2 HRS },
	X	{"west", DAYZONE, -2 HRS},	/* Western European Summer Time */
	X	{"w.e.s.t.", DAYZONE, -2 HRS},
	X
	X	{"jst", ZONE, -9 HRS},		/* Japan Standard Time */
	X	{"j.s.t.", ZONE, -9 HRS},	/* Japan Standard Time */
	X					/* No daylight savings time */
	X
	X	{"aest", ZONE, -10 HRS},	/* Australian Eastern Time */
	X	{"a.e.s.t.", ZONE, -10 HRS},
	X	{"aesst", DAYZONE, -10 HRS},	/* Australian Eastern Summer Time */
	X	{"a.e.s.s.t.", DAYZONE, -10 HRS},
	X	{"acst", ZONE, -(9 HRS + HALFHR)},	/* Australian Central Time */
	X	{"a.c.s.t.", ZONE, -(9 HRS + HALFHR)},
	X	{"acsst", DAYZONE, -(9 HRS + HALFHR)},	/* Australian Central Summer */
	X	{"a.c.s.s.t.", DAYZONE, -(9 HRS + HALFHR)},
	X	{"awst", ZONE, -8 HRS},		/* Australian Western Time */
	X	{"a.w.s.t.", ZONE, -8 HRS},	/* (no daylight time there, I'm told */
	X	{0, 0, 0}};
	X
	Xstruct table unittb[] = {
	X	{"year", MUNIT, 12},
	X	{"month", MUNIT, 1},
	X	{"fortnight", UNIT, 14*24*60},
	X	{"week", UNIT, 7*24*60},
	X	{"day", UNIT, 1*24*60},
	X	{"hour", UNIT, 60},
	X	{"minute", UNIT, 1},
	X	{"min", UNIT, 1},
	X	{"second", SUNIT, 1},
	X	{"sec", SUNIT, 1},
	X	{0, 0, 0}};
	X
	Xstruct table othertb[] = {
	X	{"tomorrow", UNIT, 1*24*60},
	X	{"yesterday", UNIT, -1*24*60},
	X	{"today", UNIT, 0},
	X	{"now", UNIT, 0},
	X	{"last", NUMBER, -1},
	X	{"this", UNIT, 0},
	X	{"next", NUMBER, 2},
	X	{"first", NUMBER, 1},
	X	/* {"second", NUMBER, 2}, */
	X	{"third", NUMBER, 3},
	X	{"fourth", NUMBER, 4},
	X	{"fifth", NUMBER, 5},
	X	{"sixth", NUMBER, 6},
	X	{"seventh", NUMBER, 7},
	X	{"eigth", NUMBER, 8},
	X	{"ninth", NUMBER, 9},
	X	{"tenth", NUMBER, 10},
	X	{"eleventh", NUMBER, 11},
	X	{"twelfth", NUMBER, 12},
	X	{"ago", AGO, 1},
	X	{0, 0, 0}};
	X
	Xstruct table milzone[] = {
	X	{"a", ZONE, 1 HRS},
	X	{"b", ZONE, 2 HRS},
	X	{"c", ZONE, 3 HRS},
	X	{"d", ZONE, 4 HRS},
	X	{"e", ZONE, 5 HRS},
	X	{"f", ZONE, 6 HRS},
	X	{"g", ZONE, 7 HRS},
	X	{"h", ZONE, 8 HRS},
	X	{"i", ZONE, 9 HRS},
	X	{"k", ZONE, 10 HRS},
	X	{"l", ZONE, 11 HRS},
	X	{"m", ZONE, 12 HRS},
	X	{"n", ZONE, -1 HRS},
	X	{"o", ZONE, -2 HRS},
	X	{"p", ZONE, -3 HRS},
	X	{"q", ZONE, -4 HRS},
	X	{"r", ZONE, -5 HRS},
	X	{"s", ZONE, -6 HRS},
	X	{"t", ZONE, -7 HRS},
	X	{"u", ZONE, -8 HRS},
	X	{"v", ZONE, -9 HRS},
	X	{"w", ZONE, -10 HRS},
	X	{"x", ZONE, -11 HRS},
	X	{"y", ZONE, -12 HRS},
	X	{"z", ZONE, 0 HRS},
	X	{0, 0, 0}};
	X
	Xlookup(id)
	Xchar *id;
	X{
	X#define gotit (yylval=i->value,  i->type)
	X
	X	char idvar[128];
	X	register char *j, *k;
	X	register struct table *i;
	X	int abbrev;
	X
	X	(void) strcpy(idvar, id);
	X	j = idvar;
	X	k = id - 1;
	X	while (*++k)
	X		*j++ = isupper(*k) ? tolower(*k) : *k;
	X	*j = '\0';
	X
	X	if (strlen(idvar) == 3)
	X		abbrev = 1;
	X	else
	X		if (strlen(idvar) == 4 && idvar[3] == '.') {
	X			abbrev = 1;
	X			idvar[3] = '\0';
	X		}
	X	else
	X		abbrev = 0;
	X
	X	for (i = mdtab; i->name; i++) {
	X		k = idvar;
	X		for (j = i->name; *j++ == *k++;) {
	X			if (abbrev && j == i->name+3)
	X				return gotit;
	X			if (j[-1] == 0)
	X				return gotit;
	X		}
	X	}
	X
	X	for (i = mztab; i->name; i++)
	X		if (strcmp(i->name, idvar) == 0)
	X			return gotit;
	X
	X	for (i=mztab; i->name; i++)
	X		if (strcmp(i->name, idvar) == 0)
	X			return gotit;
	X
	X	for (i=unittb; i->name; i++)
	X		if (strcmp(i->name, idvar) == 0)
	X			return gotit;
	X
	X	if (idvar[strlen(idvar)-1] == 's')
	X		idvar[strlen(idvar)-1] = '\0';
	X
	X	for (i=unittb; i->name; i++)
	X		if (strcmp(i->name, idvar) == 0)
	X			return gotit;
	X
	X	for (i = othertb; i->name; i++)
	X		if (strcmp(i->name, idvar) == 0)
	X			return gotit;
	X
	X	if (strlen(idvar) == 1 && isalpha(*idvar)) {
	X		for (i = milzone; i->name; i++)
	X			if (strcmp(i->name, idvar) == 0)
	X				return gotit;
	X	}
	X
	X	return ID;
	X}
	X
	Xtime_t
	Xgetdate(p, now)
	Xchar *p;
	Xstruct timeb *now;
	X{
	X#define mcheck(f)	if (f>1) err++
	X	time_t monthadd();
	X	int err;
	X	struct tm *lt;
	X	struct timeb ftz;
	X
	X	time_t sdate, tod;
	X
	X	lptr = p;
	X	if (now == ((struct timeb *) NULL)) {
	X		now = &ftz;
	X		ftime(&ftz);
	X	}
	X	lt = localtime(&now->time);
	X	year = lt->tm_year;
	X	month = lt->tm_mon+1;
	X	day = lt->tm_mday;
	X	relsec = 0; relmonth = 0;
	X	timeflag=zoneflag=dateflag=dayflag=relflag=0;
	X	ourzone = now->timezone;
	X	daylight = MAYBE;
	X	hh = mm = ss = 0;
	X	merid = 24;
	X
	X	if (err = yyparse()) return (-1);
	X
	X	mcheck(timeflag);
	X	mcheck(zoneflag);
	X	mcheck(dateflag);
	X	mcheck(dayflag);
	X
	X	if (err) return (-1);
	X	if (dateflag || timeflag || dayflag) {
	X		sdate = dateconv(month,day,year,hh,mm,ss,merid,ourzone,daylight);
	X		if (sdate < 0) return -1;
	X	}
	X	else {
	X		sdate = now->time;
	X		if (relflag == 0)
	X			sdate -= (lt->tm_sec + lt->tm_min*60 +
	X				lt->tm_hour*(60L*60L));
	X	}
	X
	X	sdate += relsec;
	X	sdate += monthadd(sdate, relmonth);
	X
	X	if (dayflag && !dateflag) {
	X		tod = dayconv(dayord, dayreq, sdate);
	X		sdate += tod;
	X	}
	X
	X	/*
	X	** Have to do *something* with a legitimate -1 so it's distinguishable
	X	** from the error return value.  (Alternately could set errno on error.)
	X	*/
	X	return (sdate == -1) ? 0 : sdate;
	X}
	X
	Xyyerror(s) char *s;
	X{}
SHAR_EOF
if test 12800 -ne "`wc -c < 'getdate.y'`"
then
	echo shar: error transmitting "'getdate.y'" '(should have been 12800 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'header.h'" '(1285 characters)'
if test -f 'header.h'
then
	echo shar: will not over-write existing file "'header.h'"
else
sed 's/^	X//' << \SHAR_EOF > 'header.h'
	X/*
	X * header.h - Article header format
	X */
	X
	X/*	@(#)header.h	2.21	10/7/87	*/
	X
	X#define NUNREC 50
	X
	X/* article header */
	Xstruct	hbuf {
	X	char	from[BUFLEN];		/* From:		*/
	X	char	path[PATHLEN];		/* Path:		*/
	X	char	nbuf[LBUFLEN];		/* Newsgroups:		*/
	X	char	title[BUFLEN];		/* Subject:		*/
	X	char	ident[BUFLEN];		/* Message-ID:		*/
	X	char	replyto[BUFLEN];	/* Reply-To:		*/
	X	char	followid[BUFLEN];	/* References:		*/
	X	char	subdate[DATELEN];	/* Date: (submission)	*/
	X	time_t	subtime;		/* subdate in secs	*/
	X	char	expdate[DATELEN];	/* Expires:		*/
	X	char	ctlmsg[PATHLEN];	/* Control:		*/
	X	char	sender[BUFLEN];		/* Sender:		*/
	X	char	followto[BUFLEN];	/* Followup-to:		*/
	X	char	distribution[BUFLEN];	/* Distribution:	*/
	X	char	organization[BUFLEN];	/* Organization:	*/
	X	char	numlines[8];		/* Lines:		*/
	X	int	intnumlines;		/* Integer version	*/
	X	char	keywords[BUFLEN];	/* Keywords:		*/
	X	char	summary[BUFLEN];	/* Summary:		*/
	X	char	approved[BUFLEN];	/* Approved:		*/
	X	char	nf_id[BUFLEN];		/* Nf-ID:		*/
	X	char	nf_from[BUFLEN];	/* Nf-From:		*/
	X	char 	supersedes[BUFLEN];	/* Supersedes:		*/
	X#ifdef DOXREFS
	X	char 	xref[BUFLEN];		/* Xref:		*/
	X#endif /* DOXREFS */
	X	char	*unrec[NUNREC];		/* unrecognized lines	*/
	X};
	X
	X#define hwrite(hp,fp)	ihwrite(hp,fp,0)
	X#define lhwrite(hp,fp)	ihwrite(hp,fp,1)
	X
	Xchar *oident();
SHAR_EOF
if test 1285 -ne "`wc -c < 'header.h'`"
then
	echo shar: error transmitting "'header.h'" '(should have been 1285 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'help'" '(1149 characters)'
if test -f 'help'
then
	echo shar: will not over-write existing file "'help'"
else
sed 's/^	X//' << \SHAR_EOF > 'help'
	XCommand		Meaning
	X
	Xy		Yes.  (Or just hit return.)  Prints this article and goes on.
	Xn		No.  Goes on to next article without printing current one.
	Xd		Digest.  Breaks a digest article up into seperate articles.
	Xq		Quit.  Update .newsrc if -l or -x not used.
	XU		Unsubscribe.  You won't be shown this newsgroup anymore.
	Xc		Cancel an article you posted.
	Xr		Reply.  Reply to article's author via mail.
	Xf [title]	Submit a follow up article.
	XN [newsgroup]	Go to next newsgroup or named newsgroup.
	Xs [file]	Save.  Article is appended to file (default is "Articles").
	Xs |program	Run program with article as standard input.
	Xe		Erase.  Forget that an article was read.
	Xh		Print verbose header.  Use H for extremely verbose header.
	X!		Shell escape.
	X<number>	Go to message #<number> in this newsgroup.
	X-		Go back to last article.
	Xb		Back up one article in the current group.
	XK		Mark the rest of the articles in current group as read.
	Xx		Exit.  Don't update .newsrc.
	Xv		Version.  Print current news version number.
	Xl		List unread articles in newsgroup.
	XL		List all articles in newsgroup.
	Xc, f, r, e, h, and s can be followed by -'s to refer to the previous article
SHAR_EOF
if test 1149 -ne "`wc -c < 'help'`"
then
	echo shar: error transmitting "'help'" '(should have been 1149 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'install.sh'" '(5409 characters)'
if test -f 'install.sh'
then
	echo shar: will not over-write existing file "'install.sh'"
else
sed 's/^	X//' << \SHAR_EOF > 'install.sh'
	X: '@(#)install.sh	1.19	11/19/87'
	X
	Xif test "$#" -lt 6
	Xthen
	Xecho "usage: $0 spooldir libdir bindir nuser ngroup ostype [nfs_spooldir nfs_libdir]"
	X	exit 1
	Xfi
	XSPOOLDIR=$1
	XLIBDIR=$2
	XBINDIR=$3
	XNEWSUSR=$4
	XNEWSGRP=$5
	XOSTYPE=$6
	XNFSSPOOLDIR=$7
	XNFSLIBDIR=$8
	X
	X: Get name of local system
	Xcase $OSTYPE in
	X	usg)	SYSNAME=`uname -n`
	X		if test ! -d $LIBDIR/history.d
	X		then
	X			mkdir $LIBDIR/history.d
	X			chown $NEWSUSR $LIBDIR/history.d
	X			chgrp $NEWSGRP $LIBDIR/history.d
	X		fi
	X		for i in 0 1 2 3 4 5 6 7 8 9
	X		do
	X			touch $LIBDIR/history.d/$i
	X			chown $NEWSUSR $LIBDIR/history.d/$i
	X			chgrp $NEWSGRP $LIBDIR/history.d/$i
	X		done
	X		;;
	X	v7)	SYSNAME=`uuname -l`
	X		if test "$NFSSPOOLDIR" = ""
	X		then
	X			touch $LIBDIR/history.pag $LIBDIR/history.dir
	X		else
	X			rm -f $LIBDIR/history.dir $LIBDIR/history.pag
	X			ln -s $NFSLIBDIR/history.dir $LIBDIR/history.dir
	X			ln -s $NFSLIBDIR/history.pag $LIBDIR/history.pag
	X		fi;;
	X	*)	echo "$0: Unknown Ostype"
	X		exit 1;;
	Xesac
	X
	Xif test "$SYSNAME" = ""
	Xthen
	X	echo "$0: Cannot get system name"
	X	exit 1
	Xfi
	X
	X: Ensure SPOOLDIR exists
	Xif test "$NFSSPOOLDIR" = ""
	Xthen
	X	for i in $SPOOLDIR $SPOOLDIR/.rnews
	X	do
	X		if test ! -d $i
	X		then
	X			mkdir $i
	X		fi
	X		chmod 777 $i
	X		chown $NEWSUSR $i
	X		chgrp $NEWSGRP $i
	X	done
	Xelse
	X	rm -rf $SPOOLDIR
	X	ln -s $NFSSPOOLDIR $SPOOLDIR
	X	chmod 777 $SPOOLDIR
	X	chown $NEWSUSR $SPOOLDIR
	X	chgrp $NEWSGRP $SPOOLDIR
	Xfi
	X
	Xchown $NEWSUSR $LIBDIR
	Xchgrp $NEWSGRP $LIBDIR
	X
	X: Ensure certain files in LIBDIR exist
	Xif test "$NFSLIBDIR" = ""
	Xthen
	X	touch $LIBDIR/history $LIBDIR/active
	Xelse
	X	rm -f $LIBDIR/history $LIBDIR/active
	X	ln -s $NFSLIBDIR/history $LIBDIR/history
	X	ln -s $NFSLIBDIR/active $LIBDIR/active
	Xfi
	Xtouch  $LIBDIR/log $LIBDIR/errlog $LIBDIR/users
	Xchmod 666 $LIBDIR/users
	X
	X: If no sys file, make one.
	Xif test "$NFSLIBDIR" = ""
	Xthen
	Xif test ! -f $LIBDIR/sys
	Xthen
	Xecho
	Xecho Making a $LIBDIR/sys file to link you to oopsvax.
	Xecho You must change oopsvax to your news feed.
	Xecho If you are not in the USA, remove '"usa"' from your line in the sys file.
	Xecho If you are not in North America, remove '"na"' from your line in the sys file.
	X	cat > $LIBDIR/sys << EOF
	X$SYSNAME:world,comp,sci,news,rec,soc,talk,misc,na,usa,to::
	Xoopsvax:world,comp,sci,news,rec,soc,talk,misc,na,usa,to.oopsvax::
	XEOF
	Xfi
	Xelse
	X	rm -f $LIBDIR/sys
	X	ln -s $NFSLIBDIR/sys $LIBDIR/sys
	Xfi
	X
	X: If no seq file, make one.
	Xif test ! -s $LIBDIR/seq
	Xthen
	X	echo '100' >$LIBDIR/seq
	Xfi
	X
	X: If no mailpaths, make one.
	Xif test "$NFSLIBDIR" = ""
	Xthen
	Xif test ! -s $LIBDIR/mailpaths
	Xthen
	X	cat <<E_O_F >$LIBDIR/mailpaths
	Xbackbone	%s
	Xinternet	%s
	XE_O_F
	Xecho "I have created $LIBDIR/mailpaths for you. The paths are certainly wrong."
	Xecho "You must correct them manually to be able to post to moderated groups."
	Xfi
	Xelse
	X	rm -f $LIBDIR/mailpaths
	X	ln -s $NFSLIBDIR/mailpaths $LIBDIR/mailpaths
	Xfi
	X
	Xif test "$NFSLIBDIR" = ""
	Xthen
	X	sh makeactive.sh $LIBDIR $SPOOLDIR $NEWSUSR $NEWSGRP
	Xelse
	X	rm -f $LIBDIR/newsgroups
	X	ln -s $NFSLIBDIR/newsgroups $LIBDIR/newsgroups
	Xfi
	X
	Xif test "$NFSLIBDIR" = ""
	Xthen
	Xfor i in $LIBDIR/ngfile $BINDIR/inews $LIBDIR/localgroups $LIBDIR/moderators \
	X	$LIBDIR/cunbatch $LIBDIR/c7unbatch
	Xdo
	X	if test -f $i
	X	then
	X		echo "$i is no longer used. You should remove it."
	X	fi
	Xdone
	X
	Xfor i in $LIBDIR/csendbatch $LIBDIR/c7sendbatch
	Xdo
	X	if test -f $i
	X	then
	X		echo "$i is no longer used. You should remove it after"
	X		echo "changing your crontab entry to use sendbatch [flags]"
	X	fi
	Xdone
	X
	Xif test -f $BINDIR/cunbatch
	Xthen
	X	echo "$BINDIR/cunbatch is not used by the new batching scheme."
	X	echo "You should remove it when all of your neighbors have upgraded."
	Xfi
	Xfi
	X
	Xcat >$LIBDIR/aliases.new <<EOF
	Xcomp.os.fidonet		comp.org.fidonet
	Xnet.sources	comp.sources.misc
	Xmisc.jobs		misc.jobs.misc
	Xna.forsale		misc.forsale
	Xrec.skydive		rec.skydiving
	Xtalk.philosophy.tech		sci.philosophy.tech 
	Xtalk.religion		talk.religion.misc
	Xtalk.rumor		talk.rumors
	XEOF
	X: if no aliases file, make one
	Xif test "$NFSLIBDIR" != ""
	Xthen
	X	rm -f $LIBDIR/aliases
	X	ln -s $NFSLIBDIR/aliases $LIBDIR/aliases
	X	rm -f $LIBDIR/aliases.new
	Xelse
	Xif test ! -f $LIBDIR/aliases
	Xthen
	X	mv $LIBDIR/aliases.new $LIBDIR/aliases
	Xelse
	X	: see whats missing
	X	sort $LIBDIR/aliases | sed -e 's/  */	/g'  -e 's/		*/	/g' >/tmp/$$aliases
	X	sort $LIBDIR/aliases.new | sed -e 's/  */	/g'  -e 's/		*/	/g' >/tmp/$$aliases.new
	X	comm -23 /tmp/$$aliases.new /tmp/$$aliases >/tmp/$$comm
	X	if test -s /tmp/$$comm
	X	then
	X		echo "The following suggested aliases are missing or incorrect in your"
	X		echo "$LIBDIR/aliases file. It is suggested you add them."
	X		echo ""
	X		cat /tmp/$$comm
	X		echo ""
	X		echo "A suggested aliases file has been left in $LIBDIR/aliases.new"
	X		echo "for your convenience."
	X		rm /tmp/$$comm /tmp/$$aliases
	X	else
	X		rm /tmp/$$comm /tmp/$$aliases $LIBDIR/aliases.new
	X	fi
	Xfi
	Xfi
	X
	X: if no distributions file, make one
	Xif test "$NFSLIBDIR" = ""
	Xthen
	Xif test ! -f $LIBDIR/distributions
	Xthen
	X	cat >$LIBDIR/distributions <<EOF
	Xlocal		Local to this site
	Xregional	Everywhere in this general area
	Xusa		Everywhere in the USA
	Xna		Everywhere in North America
	Xworld		Everywhere on Usenet in the world
	XEOF
	Xecho
	Xecho You may want to add distributions to $LIBDIR/distributions if your
	Xecho site particpates in a regional distribution such as '"ba"' or '"dc"'.
	Xfi
	Xelse
	X	rm -f $LIBDIR/distributions
	X	ln -s $NFSLIBDIR/distributions $LIBDIR/distributions
	Xfi
	X
	Xchown $NEWSUSR $LIBDIR/[a-z]*
	Xchgrp $NEWSGRP $LIBDIR/[a-z]*
	X
	Xecho
	Xecho Reminder: uux must permit rnews if running over uucp.
	Xrm -f /tmp/$$*
SHAR_EOF
if test 5409 -ne "`wc -c < 'install.sh'`"
then
	echo shar: error transmitting "'install.sh'" '(should have been 5409 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'iparams.h'" '(661 characters)'
if test -f 'iparams.h'
then
	echo shar: will not over-write existing file "'iparams.h'"
else
sed 's/^	X//' << \SHAR_EOF > 'iparams.h'
	X/*
	X * iparams - parameters for inews.
	X */
	X
	X/*	@(#)iparams.h	2.18	11/19/87	*/
	X
	X#include "params.h"
	X#include <errno.h>
	Xextern int errno;
	X
	X/* external declarations specific to inews */
	Xextern	char	nbuf[LBUFLEN], *ARTICLE, *INFILE, *ALIASES, *PARTIAL;
	X#ifndef ROOTID
	Xextern	int	ROOTID;
	X#endif
	X
	X#ifdef NOTIFY
	Xextern	char	*TELLME;
	X#endif /* NOTIFY */
	X
	X#ifdef NFSCLIENT
	Xextern	char	*NFSSYSNAME;
	X#endif /* NFSCLIENT */
	X
	Xstruct msgtype {
	X	char *m_name;
	X	char *m_who_to;
	X	int (*m_func)();
	X};
	X
	Xextern struct msgtype msgtype[];
	X
	Xextern	FILE	*infp, *actfp;
	Xextern	int	tty, is_ctl, is_mod_file_okay;
	Xextern	char	filename[BUFLEN], is_mod[NAMELEN], not_here[SBUFLEN], *DFLTNG;
SHAR_EOF
if test 661 -ne "`wc -c < 'iparams.h'`"
then
	echo shar: error transmitting "'iparams.h'" '(should have been 661 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'localize.4.3'" '(604 characters)'
if test -f 'localize.4.3'
then
	echo shar: will not over-write existing file "'localize.4.3'"
else
sed 's/^	X//' << \SHAR_EOF > 'localize.4.3'
	Xrm -f Makefile
	Xcp Makefile.dst Makefile
	Xchmod u+w Makefile
	Xed - Makefile  <<'EOF'
	Xg/^#V7 /s///
	Xg/^#BSD4_3 /s///
	Xg/^#USG /d
	Xg/^#VMS /d
	Xg/^#BSD4_1 /d
	Xg/#NOTVMS/s/#NOTVMS.*//
	X/^UUXFLAGS/s/-r -z/-r -z -n -gd/
	X/^LIBDIR/s;/usr/lib/news;/usr/new/lib/news;
	X/^BINDIR/s;/usr/bin;/usr/new;
	Xw
	Xq
	XEOF
	Xrm -f defs.h
	Xcp defs.dist defs.h
	Xchmod u+w defs.h
	Xed - defs.h <<'EOF'
	X/N_UMASK/s/000/002/
	X/DFTXMIT/s/-z/-z -gd/
	X/UXMIT/s/-z/-z -gd/
	X/INTERNET/s;/\* ;;
	X/GHNAME/s;/\* ;;
	X/DOXREFS/s;/\* ;;
	X/BSD4_2/s;/\* ;;
	X/SENDMAIL/s;/\* ;;
	Xw
	Xq
	XEOF
	Xecho "Make sure that /usr/new is in PATH in /usr/lib/uucp/L.cmds; read ../misc/L.cmds"
SHAR_EOF
if test 604 -ne "`wc -c < 'localize.4.3'`"
then
	echo shar: error transmitting "'localize.4.3'" '(should have been 604 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'localize.7300'" '(1512 characters)'
if test -f 'localize.7300'
then
	echo shar: will not over-write existing file "'localize.7300'"
else
sed 's/^	X//' << \SHAR_EOF > 'localize.7300'
	X#localize.7300 - for AT&T UNIX PC 7300 and 3b1 system, to use the shared
	X# library.
	X#From philabs!hhb!kosman!kevin Sun Nov 9 12:00:17 1986
	Xrm -f Makefile
	Xcp Makefile.dst Makefile
	Xchmod u+w Makefile
	X
	Xed - Makefile  <<'EOF'
	Xg/^#USG /s///
	Xg/^#V7 /d
	Xg/^#VMS /d
	Xg/^#BSD4_[123] /d
	Xg/#NOTVMS/s/#NOTVMS.*//
	X/CFLAGS[	 ]*=/t.
	X.s/CFLAGS/MFLAGS/p
	X.s/-Dindex.*strrchr//p
	X/-o compress compress.c/s//compress.c -o compress/p
	Xg/Makefile.dst/s//Makefile/p
	X/-o postnews/s/$(CFLAGS) //
	Xg/$(CFLAGS) $(LFLAGS)/t.\
	X.-1s/$(LFLAGS)/-c/\
	Xs/ -o .*//p\
	X.+1s/ $(CFLAGS)//\
	Xs/\.c/.o/p
	X/-c compress.c/s/CFLAGS/MFLAGS/p
	Xg/$(LFLAGS)/s;$(LFLAGS);& /lib/crt0s.o shlib.ifile;\
	Xs/$(CC)/$(LD)/
	Xg/-ltermlib/s/-ltermlib//
	Xg/chmod 755.*inews/s/755/6755/p
	X/UUXFLAGS =/s/ -z//p
	Xw
	Xq
	XEOF
	X
	Xrm -f defs.h
	Xcp defs.dist defs.h
	Xchmod u+w defs.h
	X
	Xed - defs.h <<'EOF'
	X/DFLTSUB/s/".*"/"all"/p
	X/ROOTID/s/10/101/p
	X/TMAIL/s;^;/*;p
	X/PAGE/s;/usr/ucb/more;/usr/bin/more;p
	X/DFTXMIT/s/ -z//p
	X/UXMIT/s/ -z//p
	X/UNAME/s;/\* ;;p
	X/DOXREF/s;/\* ;;p
	X/MYORG/s;".*";"/etc/MYORG";p
	Xw
	Xq
	XEOF
	X
	X#  specific stuff to tailor the shared-libarary ifile.  The news software
	X#  duplicates some code in the shared library and its easiest just to avoid
	X#  the error messages.  Also, the ifile for some reason does not define
	X#  daylight (from ctime(3c)) -- as near as I can tell, this is where it goes.
	X
	Xrm -f shlib.ifile
	Xcat /lib/shlib.ifile >shlib.ifile
	Xchmod u+w shlib.ifile
	X
	Xed - shlib.ifile <<'EOF'
	X/^PC /d
	X/^BC /d
	X/^UP /d
	X/^ospeed /d
	X/^COLS /d
	X/^_sibuf /i
	X
	Xdaylight = 0x303658;
	X
	X.
	Xw
	Xq
	XEOF
SHAR_EOF
if test 1512 -ne "`wc -c < 'localize.7300'`"
then
	echo shar: error transmitting "'localize.7300'" '(should have been 1512 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'localize.sample'" '(754 characters)'
if test -f 'localize.sample'
then
	echo shar: will not over-write existing file "'localize.sample'"
else
sed 's/^	X//' << \SHAR_EOF > 'localize.sample'
	Xrm -f Makefile
	Xcp Makefile.dst Makefile
	Xchmod u+w Makefile
	Xed Makefile  <<'EOF'
	X/^UUXFLAGS/s/-r -z/-r -z -n -gd/
	Xg/^#V7 /s///
	Xg/^#BSD4_3 /s///
	Xg/^#BSD4_1 /d
	Xg/^#USG /d
	Xg/#NOTVMS/s/#NOTVMS.*//
	X/^LIBDIR/s;/usr/lib/news;/usr/new/lib/news;
	X/^BINDIR/s;/usr/bin;/usr/new;
	Xw
	Xq
	XEOF
	Xrm -f defs.h
	Xcp defs.dist defs.h
	Xchmod u+w defs.h
	Xed - defs.h <<'EOF'
	X/ROOTID/s/10/352/
	X/N_UMASK/s/000/002/
	X/DFTXMIT/s/-z/-z -gd/
	X/UXMIT/s/-z/-z -gd/
	X/NONEWGROUPS/s;/\* ;;
	X/INTERNET/s;/\* ;;
	X/MYDOMAIN/s;.UUCP;.CSS.GOV;
	X/GHNAME/s;/\* ;;
	X/DOXREFS/s;/\* ;;
	X/BSD4_2/s;/\* ;;
	X/ALWAYSALIAS/s;/\* ;;
	X/SENDMAIL/s;/\* ;;
	X/HIDDENNET/s;frooz;seismo;
	Xs;/\* ;;
	X/MYORG/s/Frobozz Inc., St. Louis/Center for Seismic Studies, Arlington, VA/
	X/ORGDISTRIB/s;/\* ;;
	X/ORGDISTRIB/s;froozum;css;
	Xw
	Xq
	XEOF
SHAR_EOF
if test 754 -ne "`wc -c < 'localize.sample'`"
then
	echo shar: error transmitting "'localize.sample'" '(should have been 754 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'localize.usg'" '(274 characters)'
if test -f 'localize.usg'
then
	echo shar: will not over-write existing file "'localize.usg'"
else
sed 's/^	X//' << \SHAR_EOF > 'localize.usg'
	Xrm -f Makefile
	Xcp Makefile.dst Makefile
	Xchmod u+w Makefile
	Xed - Makefile  <<'EOF'
	Xg/^#USG /s///
	Xg/^#V7 /d
	Xg/^#VMS /d
	Xg/^#BSD4_[123] /d
	Xg/#NOTVMS/s/#NOTVMS.*//
	Xg/termlib/s//curses/
	Xw
	Xq
	XEOF
	Xrm -f defs.h
	Xcp defs.dist defs.h
	Xchmod u+w defs.h
	X# ed - defs.h <<'EOF'
	X# w
	X# q
	X# EOF
SHAR_EOF
if test 274 -ne "`wc -c < 'localize.usg'`"
then
	echo shar: error transmitting "'localize.usg'" '(should have been 274 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'localize.v7'" '(253 characters)'
if test -f 'localize.v7'
then
	echo shar: will not over-write existing file "'localize.v7'"
else
sed 's/^	X//' << \SHAR_EOF > 'localize.v7'
	Xrm -f Makefile
	Xcp Makefile.dst Makefile
	Xchmod u+w Makefile
	Xed - Makefile  <<'EOF'
	Xg/^#V7 /s///
	Xg/^#USG /d
	Xg/^#VMS /d
	Xg/^#BSD4_[123] /d
	Xg/#NOTVMS/s/#NOTVMS.*//
	Xw
	Xq
	XEOF
	Xrm -f defs.h
	Xcp defs.dist defs.h
	Xchmod u+w defs.h
	X# ed - defs.h <<'EOF'
	X# w
	X# q
	X# EOF
SHAR_EOF
if test 253 -ne "`wc -c < 'localize.v7'`"
then
	echo shar: error transmitting "'localize.v7'" '(should have been 253 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'localize.vms'" '(252 characters)'
if test -f 'localize.vms'
then
	echo shar: will not over-write existing file "'localize.vms'"
else
sed 's/^	X//' << \SHAR_EOF > 'localize.vms'
	Xrm -f Makefile
	Xcp Makefile.dst Makefile
	Xchmod u+w Makefile
	Xed - Makefile  <<'EOF'
	Xg/^#V7 /d
	Xg/^#USG /d
	Xg/^#VMS /s///
	Xg/#NOTVMS/d
	Xg/^#BSD4_[123] /d
	Xg/chgrp /d
	Xw
	Xq
	XEOF
	Xrm -f defs.h
	Xcp defs.dist defs.h
	Xchmod u+w defs.h
	X# ed - defs.h <<'EOF'
	X# w
	X# q
	X# EOF
SHAR_EOF
if test 252 -ne "`wc -c < 'localize.vms'`"
then
	echo shar: error transmitting "'localize.vms'" '(should have been 252 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'makeactive.sh'" '(15718 characters)'
if test -f 'makeactive.sh'
then
	echo shar: will not over-write existing file "'makeactive.sh'"
else
sed 's/^	X//' << \SHAR_EOF > 'makeactive.sh'
	X: "Create active file and newsgroup hierarchy for new machine"
	X: "Usage: sh makeactive.sh LIBDIR SPOOLDIR NEWSUSR NEWSGRP"
	X: '@(#)makeactive	1.24	9/24/87'
	XLIBDIR=$1
	XSPOOLDIR=$2
	XNEWSUSR=$3
	XNEWSGRP=$4
	Xcat <<"E_O_F" | sort > /tmp/$$groups
	Xgeneral	Articles that should be read by everyone on your local system
	Xcomp.ai			Artificial intelligence discussions.
	Xcomp.ai.digest		Artificial Intelligence discussions. (Moderated)
	Xcomp.arch		Computer architecture.
	Xcomp.binaries.amiga	Encoded public domain programs in binary. (Moderated)
	Xcomp.binaries.atari.st	Binary-only postings for the Atari ST. (Moderated)
	Xcomp.binaries.ibm.pc	Binary-only postings for IBM PC/MS-DOS. (Moderated)
	Xcomp.binaries.mac	Encoded Macintosh programs in binary. (Moderated)
	Xcomp.bugs.2bsd		Reports of UNIX* version 2BSD related bugs.
	Xcomp.bugs.4bsd		Reports of UNIX version 4BSD related bugs.
	Xcomp.bugs.4bsd.ucb-fixes	Bug reports/fixes for BSD Unix. (Moderated)
	Xcomp.bugs.misc		General UNIX bug reports and fixes (incl V7, uucp)
	Xcomp.bugs.sys5		Reports of USG (System III, V, etc.) bugs.
	Xcomp.cog-eng		Cognitive engineering.
	Xcomp.compilers		Compiler construction, theory, etc. (Moderated)
	Xcomp.databases		Database and data management issues and theory.
	Xcomp.dcom.lans		Local area network hardware and software.
	Xcomp.dcom.modems	Data communications hardware and software.
	Xcomp.dcom.telecom	Telecommunications digest. (Moderated)
	Xcomp.doc		Archived public-domain documentation. (Moderated)
	Xcomp.doc.techreports	Lists of technical reports. (Moderated)
	Xcomp.edu		Computer science education.
	Xcomp.emacs		EMACS editors of different flavors.
	Xcomp.graphics		Computer graphics, art, animation, image processing.
	Xcomp.graphics.digest	Graphics software, hardware, theory, etc. (Moderated)
	Xcomp.hypercube		Massively parallel systems: hardware & software. (Moderated)
	Xcomp.lang.ada		Discussion about Ada*.
	Xcomp.lang.apl		Discussion about APL.
	Xcomp.lang.c		Discussion about C.
	Xcomp.lang.c++		The object-oriented C++ language.
	Xcomp.lang.forth		Discussion about Forth.
	Xcomp.lang.fortran	Discussion about FORTRAN.
	Xcomp.lang.lisp		Discussion about LISP.
	Xcomp.lang.misc		Different computer languages not specifically listed.
	Xcomp.lang.modula2	Discussion about Modula-2.
	Xcomp.lang.pascal	Discussion about Pascal.
	Xcomp.lang.prolog	Discussion about PROLOG.
	Xcomp.lang.smalltalk	Discussion about Smalltalk 80.
	Xcomp.laser-printers	Laser printers, hardware & software. (Moderated)
	Xcomp.lsi		Large scale integrated circuits.
	Xcomp.mail.elm		Discussion and fixes for ELM mail system.
	Xcomp.mail.headers	Gatewayed from the ARPA header-people list.
	Xcomp.mail.maps		Various maps, including UUCP maps. (Moderated)
	Xcomp.mail.misc		General discussions about computer mail.
	Xcomp.mail.uucp		Mail in the uucp network environment.
	Xcomp.misc		General topics about computers not covered elsewhere.
	Xcomp.newprod		Announcements of new products of interest. (Moderated)
	Xcomp.org.decus		DEC* Users' Society newsgroup.
	Xcomp.org.fidonet	FidoNews digest, official news of FidoNet Assoc. (Moderated)
	Xcomp.org.usenix		USENIX Association events and announcements.
	Xcomp.os.cpm		Discussion about the CP/M operating system.
	Xcomp.os.eunice		The SRI Eunice system.
	Xcomp.os.minix		Discussion of Tanenbaum's MINIX system.
	Xcomp.os.misc		General OS-oriented discussion not carried elsewhere.
	Xcomp.os.os9		Discussions about the os9 operating system. (Moderated)
	Xcomp.os.research	Operating systems and related areas. (Moderated)
	Xcomp.os.vms		DEC's VAX* line of computers & VMS.
	Xcomp.periphs		Peripheral devices.
	Xcomp.protocols.appletalk	Applebus hardware & software.
	Xcomp.protocols.kermit	Info about the Kermit package. (Moderated)
	Xcomp.protocols.misc	Various forms and types of FTP protocol.
	Xcomp.protocols.tcp-ip	TCP and IP network protocols.
	Xcomp.risks		Risks to the public from computers & users. (Moderated)
	Xcomp.society		The impact of technology on society. (Moderated)
	Xcomp.sources.amiga	Source code-only postings for the Amiga. (Moderated)
	Xcomp.sources.atari.st	Source code-only postings for the Atari ST. (Moderated)
	Xcomp.sources.bugs	Bug reports, fixes, discussion for posted sources
	Xcomp.sources.d		For any discussion of source postings.
	Xcomp.sources.games	Postings of recreational software. (Moderated)
	Xcomp.sources.mac	Software for the Apple Macintosh. (Moderated)
	Xcomp.sources.misc	Posting of software . (Moderated)
	Xcomp.sources.unix	Postings of public-domain sources. (Moderated)
	Xcomp.sources.wanted	Requests for software and fixes.
	Xcomp.std.c		Discussion about C language standards. (Moderated)
	Xcomp.std.internat	Discussion about international standards.
	Xcomp.std.misc		Discussion about various standards. (Moderated)
	Xcomp.std.mumps		Discussion for the X11.1 committee on Mumps. (Moderated)
	Xcomp.std.unix		Discussion for the P1003 committee on UNIX. (Moderated)
	Xcomp.sys.amiga		Commodore Amiga: info&uses, but no programs.
	Xcomp.sys.apollo		Apollo computer systems.
	Xcomp.sys.apple		Discussion about Apple micros.
	Xcomp.sys.atari.8bit	Discussion about 8 bit Atari micros.
	Xcomp.sys.atari.st	Discussion about 16 bit Atari micros.
	Xcomp.sys.att		Discussions about AT&T microcomputers.
	Xcomp.sys.cbm		Discussion about Commodore micros.
	Xcomp.sys.dec		Discussions about DEC computer systems.
	Xcomp.sys.hp		Discussion about Hewlett-Packard equipment.
	Xcomp.sys.ibm.pc		Discussion about IBM personal computers.
	Xcomp.sys.ibm.pc.digest	The IBM PC, PC-XT, and PC-AT. (Moderated)
	Xcomp.sys.intel		Disucussions about Intel systems and parts.
	Xcomp.sys.m6809		Discussion about 6809's.
	Xcomp.sys.m68k		Discussion about 68k's.
	Xcomp.sys.m68k.pc	Discussion about 68k-based PCs. (Moderated)
	Xcomp.sys.mac		Discussions about the Apple Macintosh & Lisa.
	Xcomp.sys.mac.digest	Apple Macintosh: info&uses, but no programs. (Moderated)
	Xcomp.sys.masscomp	The Masscomp line of computers. (Moderated)
	Xcomp.sys.misc		Discussion about computers of all kinds.
	Xcomp.sys.nsc.32k	National Semiconductor 32000 series chips.
	Xcomp.sys.pyramid	Pyramid 90x computers.
	Xcomp.sys.ridge		Ridge 32 computers and ROS. 
	Xcomp.sys.sequent	Sequent systems, (esp. Balance 8000). (Moderated)
	Xcomp.sys.sun		Sun "workstation" computers. (Moderated)
	Xcomp.sys.tandy		Discussion about TRS-80's.
	Xcomp.sys.ti		Discussion about Texas Instruments.
	Xcomp.sys.workstations	Various workstation-type computers. (Moderated)
	Xcomp.terminals		All sorts of terminals.
	Xcomp.text		Text processing issues and methods.
	Xcomp.text.desktop	Technolgy & techniques of desktop publishing. (Moderated)
	Xcomp.unix		Discussion of UNIX* features and bugs. (Moderated)
	Xcomp.unix.questions	UNIX neophytes group.
	Xcomp.unix.wizards	Discussions, bug reports, and fixes on and for UNIX.
	Xcomp.unix.xenix		Discussion about the Xenix OS.
	Xcomp.windows.misc	Various issues about windowing systems.
	Xcomp.windows.news	Sun Microsystems' NewS window system.
	Xcomp.windows.x		Discussion about the X Window System.
	Xmisc.consumers		Consumer interests, product reviews, etc.
	Xmisc.consumers.house	Discussion about owning and maintaining a house.
	Xmisc.forsale		Short, tasteful postings about items for sale.
	Xmisc.handicap		Items of interest for/about the handicapped. (Moderated)
	Xmisc.headlines		Current interest: drug testing, terrorism, etc.
	Xmisc.invest		Investments and the handling of money.
	Xmisc.jobs.misc		Discussion about employment, workplaces, careers.
	Xmisc.jobs.offered	Announcements of positions available.
	Xmisc.jobs.resumes	Postings of resumes and "situation wanted" articles.
	Xmisc.kids		Children, their behavior and activities.
	Xmisc.legal		Legalities and the ethics of law.
	Xmisc.misc		Various discussions not fitting in any other group.
	Xmisc.psi		Paranormal abilities and experiences. (Moderated)
	Xmisc.taxes		Tax laws and advice.
	Xmisc.test		For testing of network software.  Very boring.
	Xmisc.wanted		Requests for things that are needed (NOT software).
	Xnews.admin		Comments directed to news administrators.
	Xnews.announce.conferences	Calls for papers and conference announcements. (Moderated)
	Xnews.announce.important	General announcements of interest to all. (Moderated)
	Xnews.announce.newusers	Explanatory postings for new users. (Moderated)
	Xnews.config		Postings of system down times and interruptions.
	Xnews.groups		Discussions and lists of newsgroups.
	Xnews.lists		News-related statistics and lists. (Moderated)
	Xnews.misc		Discussions of USENET itself.
	Xnews.newsites		Postings of new site announcements.
	Xnews.software.b		Discussion about B news software.
	Xnews.software.notes	Notesfile software from the Univ. of Illinois.
	Xnews.stargate		Discussion about satellite transmission of news.
	Xnews.sysadmin		Comments directed to system administrators.
	Xrec.arts.books		Books of all genres, shapes, and sizes.
	Xrec.arts.comics		The funnies, old and new.
	Xrec.arts.drwho		Discussion about Dr. Who.
	Xrec.arts.movies		Discussions of movies and movie making.
	Xrec.arts.movies.reviews	Reviews of movies. (Moderated)
	Xrec.arts.poems		For the posting of poems.
	Xrec.arts.sf-lovers	Science fiction lovers' newsgroup.
	Xrec.arts.startrek	Star Trek, the TV show and the movies.
	Xrec.arts.tv		The boob tube, its history, and past and current shows.
	Xrec.arts.tv.soaps	Postings about soap operas.
	Xrec.arts.wobegon	"A Prairie Home Companion" radio show discussion.
	Xrec.audio		High fidelity audio.
	Xrec.autos		Automobiles, automotive products and laws.
	Xrec.autos.tech		Technical aspects of automobiles, et. al.
	Xrec.aviation		Aviation rules, means, and methods.
	Xrec.bicycles		Bicycles, related products and laws.
	Xrec.birds		Hobbyists interested in bird watching.
	Xrec.boats		Hobbyists interested in boating.
	Xrec.food.cooking	Food, cooking, cookbooks, and recipes.
	Xrec.food.drink		Wines and spirits.
	Xrec.food.recipes	Recipes from the USENET Cookbook (troff & text). (Moderated)
	Xrec.food.veg		Vegetarians.
	Xrec.games.board		Discussion and hints on board games.
	Xrec.games.bridge	Hobbyists interested in bridge.
	Xrec.games.chess		Chess & computer chess.
	Xrec.games.empire	Discussion and hints about Empire.
	Xrec.games.frp		Discussion about Fantasy Role Playing games.
	Xrec.games.go		Discussion about Go.
	Xrec.games.hack		Discussion, hints, etc. about the Hack game.
	Xrec.games.misc		Games and computer games.
	Xrec.games.pbm		Discussion about Play by Mail games.
	Xrec.games.rogue		Discussion and hints about Rogue.
	Xrec.games.trivia	Discussion about trivia.
	Xrec.games.video		Discussion about video games.
	Xrec.gardens		Gardening, methods and results.
	Xrec.guns		Discussions about firearms. (Moderated)
	Xrec.ham-radio		Amateur Radio practices, contests, events, rules, etc.
	Xrec.ham-radio.packet	Discussion about packet radio setups.
	Xrec.humor		Jokes and the like.  May be somewhat offensive.
	Xrec.humor.d		Discussions on the content of rec.humor articles.
	Xrec.humor.spc		The Stupid People's Court! (Moderated)
	Xrec.mag			Magazine summaries, tables of contents, etc.
	Xrec.mag.otherrealms	Edited science fiction & fantasy "magazine". (Moderated)
	Xrec.misc		General topics about recreational/participant sports.
	Xrec.motorcycles		Motorcycles and related products and laws.
	Xrec.music.classical	Discussion about classical music.
	Xrec.music.folk		Folks discussing folk music of various sorts.
	Xrec.music.gaffa		Progressive music (e.g., Kate Bush). (Moderated)
	Xrec.music.gdead		A group for (Grateful) Dead-heads.
	Xrec.music.makers	For performers and their discussions.
	Xrec.music.misc		Music lovers' group.
	Xrec.music.synth		Synthesizers and computer music.
	Xrec.nude		Hobbyists interested in naturist/nudist activities.
	Xrec.pets		Pets, pet care, and household animals in general.
	Xrec.photo		Hobbyists interested in photography.
	Xrec.puzzles		Puzzles, problems, and quizzes.
	Xrec.railroad		Real and model train fans' newsgroup.
	Xrec.scuba		Hobbyists interested in SCUBA diving.
	Xrec.skiing		Hobbyists interested in skiing.
	Xrec.skydiving		Hobbyists interested in skydiving.
	Xrec.sport.baseball	Discussion about baseball.
	Xrec.sport.basketball	Discussion about basketball.
	Xrec.sport.football	Discussion about football.
	Xrec.sport.hockey	Discussion about hockey.
	Xrec.sport.misc		Spectator sports.
	Xrec.travel		Traveling all over the world.
	Xrec.video		Video and video components.
	Xrec.woodworking		Hobbyists interested in woodworking.
	Xsci.astro		Astronomy discussions and information.
	Xsci.bio			Biology and related sciences.
	Xsci.crypt		Different methods of data en/decryption.
	Xsci.electronics		Circuits, theory, electrons and discussions.
	Xsci.lang		Natural languages, communication, etc.
	Xsci.math		Mathematical discussions and pursuits.
	Xsci.math.stat		Statistics discussion.
	Xsci.math.symbolic	Symbolic algebra discussion.
	Xsci.med			Medicine and its related products and regulations.
	Xsci.med.aids		AIDS -- treatment, consequences, etc. (Moderated)
	Xsci.misc		Short-lived discussions on subjects in the sciences.
	Xsci.philosophy.tech	Technical philosophy: math, science, logic, etc. 
	Xsci.physics		Physical laws, properties, etc.
	Xsci.research		Research methods, funding, ethics, and whatever.
	Xsci.space		Space, space programs, space related research, etc.
	Xsci.space.shuttle	The space shuttle and the STS program.
	Xsoc.college		College, college activities, campus life, etc.
	Xsoc.culture.african	Discussions about Africa & things African.
	Xsoc.culture.celtic	Group about Celtics (*not* basketball!).
	Xsoc.culture.greek	Group about Greeks.
	Xsoc.culture.indian	Group for discussion about India & things Indian.
	Xsoc.culture.jewish	Group for discussion about Jewish culture & religion.
	Xsoc.culture.misc	Group for discussion about other cultures.
	Xsoc.human-nets		Computer aided communications digest. (Moderated)
	Xsoc.men			Issues related to men, their problems & relationships.
	Xsoc.misc		Socially-oriented topics not in other groups.
	Xsoc.motss		Issues pertaining to homosexuality.
	Xsoc.net-people		Announcements, requests, etc. about people on the net.
	Xsoc.politics		Political problems, systems, solutions. (Moderated)
	Xsoc.politics.arms-d	Arms discussion digest. (Moderated)
	Xsoc.religion.christian	Christianity and related topics. (Moderated)
	Xsoc.roots		Genealogical matters.
	Xsoc.singles		Newsgroup for single people, their activities, etc.
	Xsoc.women		Women's rights, discrimination, etc.
	Xtalk.abortion		All sorts of discussions and arguments on abortion.
	Xtalk.bizarre		The unusual, bizarre, curious, and often stupid.
	Xtalk.origins		Evolution versus creationism (sometimes hot!).
	Xtalk.philosophy.misc	Philosophical musings on all topics.
	Xtalk.politics.misc	Political discussions and ravings of all kinds.
	Xtalk.politics.theory	Theory of politics and political systems.
	Xtalk.religion.misc	Religious, ethical, & moral implications.
	Xtalk.religion.newage	Esoteric and minority religions & philosophies.
	Xtalk.rumors		For the posting of rumors.
	XE_O_F
	X: if active file is empty, create it
	Xif test ! -s $LIBDIR/active
	Xthen
	X	sed 's/[ 	].*/ 00000 00001/' /tmp/$$groups > $LIBDIR/active
	X	cat <<'E_O_F' >>$LIBDIR/active
	Xcontrol 00000 00001
	Xjunk 00000 00001
	XE_O_F
	X	set - group 0 1
	Xelse
	X: make sure it is in the new format
	X	set - `sed 1q $LIBDIR/active`
	X	case $# in
	X	4)	ed - $LIBDIR/active << 'EOF'
	Xg/^mod\./s/y$/m/
	Xw
	Xq
	XEOF
	X		;;
	X	3)	;;
	X	2)	ed - $LIBDIR/active << 'EOF'
	X1,$s/$/ 00001/
	Xw
	Xq
	XEOF
	X		echo
	X		echo Active file updated to new format.
	X		echo You must run expire immediately after this install
	X		echo is done to properly update the tables.;;
	X	*) echo Active file is in unrecognized format. Not upgraded.;;
	X	esac
	Xfi
	Xif test $# -eq 3 -o $# -eq 2
	Xthen
	X	(sed '/^!net/!d
	Xs/^!//
	Xs!^!/!
	Xs!$! /s/$/ n/!
	X' $LIBDIR/ngfile
	X	echo '/ n$/!s/$/ y/') >/tmp/$$sed
	X	mv $LIBDIR/active $LIBDIR/oactive
	X	sed -f /tmp/$$sed $LIBDIR/oactive >$LIBDIR/active
	X	chown $NEWSUSR $LIBDIR/active
	X	chgrp $NEWSGRP $LIBDIR/active
	X	chmod 644 $LIBDIR/active
	Xfi
	Xcat << EOF | cat - /tmp/$$groups | $LIBDIR/checkgroups | tee /tmp/checkgroups.out
	XFrom: make update
	X
	XEOF
	Xecho the output of checkgroups has been copied into /tmp/checkgroups.out
	Xrm -f /tmp/$$*
SHAR_EOF
if test 15718 -ne "`wc -c < 'makeactive.sh'`"
then
	echo shar: error transmitting "'makeactive.sh'" '(should have been 15718 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'ndir.h'" '(1278 characters)'
if test -f 'ndir.h'
then
	echo shar: will not over-write existing file "'ndir.h'"
else
sed 's/^	X//' << \SHAR_EOF > 'ndir.h'
	X/*	@(#)ndir.h	1.7	10/7/87	*/
	X#if defined(HP9K5)
	X/* He should have included it instead of this, but prevent confusion */
	X#include <ndir.h>
	X#else /* other */
	X#ifndef DEV_BSIZE
	X#define	DEV_BSIZE	512
	X#endif
	X#define DIRBLKSIZ	DEV_BSIZE
	X#define	MAXNAMLEN	255
	X
	Xstruct	direct {
	X	long	d_ino;			/* inode number of entry */
	X	short	d_reclen;		/* length of this record */
	X	short	d_namlen;		/* length of string in d_name */
	X	char	d_name[MAXNAMLEN + 1];	/* name must be no longer than this */
	X};
	X
	X/*
	X * The DIRSIZ macro gives the minimum record length which will hold
	X * the directory entry.  This requires the amount of space in struct direct
	X * without the d_name field, plus enough space for the name with a terminating
	X * null byte (dp->d_namlen+1), rounded up to a 4 byte boundary.
	X */
	X
	X#ifdef DIRSIZ
	X#undef DIRSIZ
	X#endif /* DIRSIZ */
	X#define DIRSIZ(dp) \
	X    ((sizeof (struct direct) - (MAXNAMLEN+1)) + (((dp)->d_namlen+1 + 3) &~ 3))
	X
	X/*
	X * Definitions for library routines operating on directories.
	X */
	Xtypedef struct _dirdesc {
	X	int	dd_fd;
	X	long	dd_loc;
	X	long	dd_size;
	X	char	dd_buf[DIRBLKSIZ];
	X} DIR;
	X#ifndef NULL
	X#define NULL 0
	X#endif
	Xextern	DIR *opendir();
	Xextern	struct direct *readdir();
	Xextern	void closedir();
	X
	X#define rewinddir(dirp)	seekdir((dirp), (long)0)
	X#endif /* other */
SHAR_EOF
if test 1278 -ne "`wc -c < 'ndir.h'`"
then
	echo shar: error transmitting "'ndir.h'" '(should have been 1278 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'params.h'" '(4363 characters)'
if test -f 'params.h'
then
	echo shar: will not over-write existing file "'params.h'"
else
sed 's/^	X//' << \SHAR_EOF > 'params.h'
	X/*
	X * params.h - parameters for everyone.
	X */
	X
	X/*	@(#)params.h	2.28	11/30/87	*/
	X
	X#include <stdio.h>
	X#include <signal.h>
	X#include <sys/types.h>
	X#include <grp.h>
	X#include <pwd.h>
	X#include <sys/stat.h>
	X#include <ctype.h>
	X
	X#include "defs.h"
	X
	X#ifdef BSD4_2
	X#include <sys/time.h>
	X#else /* sane */
	X#include <time.h>
	X#endif /* sane */
	X
	X#ifndef UNAME
	X/*
	X * 9 bytes is for compatibility with USG, in case you forget to define UNAME.
	X * 33 bytes in nodename because many sites have names longer than 8 chars.
	X */
	X
	Xstruct utsname {
	X	char	sysname[9];
	X	char	nodename[33];
	X	char	release[9];
	X	char	version[9];
	X};
	X#else
	X#include <sys/utsname.h>
	X#endif
	X
	X#ifndef USG
	X#include <sys/timeb.h>
	X#else
	Xstruct timeb
	X{
	X	time_t	time;
	X	unsigned short millitm;
	X	short	timezone;
	X	short	dstflag;
	X};
	X#endif
	X
	X#include "header.h"
	X
	X/* line from SUBFILE */
	Xstruct	srec {
	X	char	s_name[2*BUFLEN];	/* system name		*/
	X	char	*s_nosend;		/* systems that inhibit sending */
	X	char	s_nbuf[LBUFLEN];	/* system subscriptions */
	X	char	s_flags[BUFLEN];	/* system flags		*/
	X	char	s_xmit[LBUFLEN];	/* system xmit routine	*/
	X};
	X
	Xextern	int	uid, gid, duid, dgid;
	Xextern	int	savmask, SigTrap, mode, lockcount;
	Xextern	struct	hbuf header;
	Xextern	char	bfr[LBUFLEN], *username, *userhome;
	X
	Xextern	char	*SPOOL, *LIB, *BIN, *SUBFILE, *ACTIVE;
	Xextern	char	*LOCKFILE, *SEQFILE, *ARTFILE, *BUGFILE;
	Xextern	char	*news_version, *Progname;
	X
	X#ifdef NOTIFY
	Xextern	char	*TELLME;
	X#endif /* NOTIFY */
	X
	Xextern	char	*LOCALSYSNAME, *LOCALPATHSYSNAME, *FROMSYSNAME, *PATHSYSNAME;
	X
	X#ifndef SHELL
	Xextern	char	*SHELL;
	X#endif /* !SHELL */
	X
	X/* external function declarations */
	Xextern	FILE	*xfopen(), *hread();
	Xextern	char	*strcpy(), *strncpy(), *strcat(), *index(), *rindex();
	Xextern	char	*ctime(), *mktemp(), *malloc(), *realloc(), *getenv();
	Xextern	char	*arpadate(), *dirname(), *AllocCpy(), *strpbrk();
	Xextern	char	*errmsg();
	Xextern	struct	passwd *getpwnam(), *getpwuid(), *getpwent();
	Xextern	struct	group *getgrnam(), *getgrent();
	Xextern	void	setgrent();
	Xextern	time_t	time(), getdate(), cgtdate();
	Xextern	int	broadcast(), save(), newssave(), ushell(), onsig();
	Xextern	long	atol();
	Xextern	struct	tm *localtime();
	X
	X#ifdef lint
	X/* This horrible gross kludge is the only way I know to
	X * convince lint that signal(SIGINT,SIG_IGN) is legal. It hates SIG_IGN.
	X */
	X#ifdef SIG_IGN
	X#undef SIG_IGN
	X#endif /* SIG_IGN */
	X#define SIG_IGN	main
	Xextern int main();
	X#endif /* lint */
	X
	X#ifdef VMS
	X#define LINK(a,b)	vmslink(a,b)
	X#define UNLINK(a)	vmsdelete(a)
	XFILE *art_open(), *xart_open();
	X#else	
	X#define LINK(a,b)	link(a,b)
	X#define UNLINK(a)	unlink(a)
	X#define art_open fopen
	X#define xart_open xfopen
	X#endif /* !VMS */
	X
	X/* Check for old naming scheme using HIDDENNET */
	X#ifdef HIDDENNET
	X#  ifndef GENERICFROM		/* Ugly fix, only for use in pathinit.c */
	X#    define GENERICFROM "%s%0.0s%s", HIDDENNET
	X#    define HIDDENNET_IN_LOCALSYSNAME
	X#  endif
	X#  ifndef GENERICPATH
	X#    define GENERICPATH HIDDENNET
	X#  endif
	X#endif
	X
	X#ifdef M_XENIX
	X#define LOCKING
	X#endif M_XENIX
	X
	X#ifdef LOCKING
	X# ifndef LOCKF
	X# define LOCKF
	X# endif  /* LOCKF */
	X/* fake SVID adivsory locking with xenix routines */
	X#define lockf	locking
	X#define F_ULOCK	0
	X#define F_LOCK	3
	X#define F_TLOCK	4
	X#endif /* LOCKING */
	X
	X#ifdef IHCC
	X#define DOGETUSER
	X#define LOGDIR
	X#endif /* IHCC */
	X
	X#ifdef BSD4_2
	X#define MKDIRSUB
	X#define READDIR
	X#define RENAMESUB
	X#endif /* BSD4_2 */
	X
	X#ifdef READDIR
	X#include <sys/dir.h>
	X#else /* !READDIR */
	X#include "ndir.h"
	X#endif /* !READDIR */
	X
	X#if defined(DBM) && !defined(M_XENIX)
	Xtypedef struct {
	X	char *dptr;
	X	int dsize;
	X} datum;
	X#endif /* DBM &! XENIX */
	X
	X#define STRCMP(a,b)  ((*(a) != *(b)) ? (*(a)-*(b)) : strcmp((a)+1, (b)+1))
	X#define STRNCMP(a,b,n)  ((*(a) != *(b)) ? (*(a)-*(b)) : strncmp(a, b, n))
	Xextern char charmap[];
	X#define PREFIX(a,b)  ((charmap[*(a)] != charmap[*(b)]) ? FALSE : prefix((a)+1, (b)+1))
	X#define MKTEMP(a)	{if (mktemp(a) == 0) xerror("mktemp(%s): ", a);}
	X
	X#ifdef SERVER
	X/* from clientlib.c */
	Xextern	char	*getserverbyfile();
	Xextern	int	server_init();
	Xextern  void	put_server();
	Xextern	int	get_server();
	Xextern	void	close_server();
	X/* from nntp.c */
	Xextern	FILE	*open_active();
	Xextern	int	open_server();
	Xextern	char	*set_group();
	Xextern	char	*active_name();
	Xextern	char	*group_name();
	Xextern	FILE	*getarticle();
	Xextern	FILE	*getartbyid();
	Xextern	char	*article_name();
	Xextern	void	sync_server();
	Xextern	int	strindex();
	X#endif /* SERVER */
SHAR_EOF
if test 4363 -ne "`wc -c < 'params.h'`"
then
	echo shar: error transmitting "'params.h'" '(should have been 4363 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'patchlevel.h'" '(63 characters)'
if test -f 'patchlevel.h'
then
	echo shar: will not over-write existing file "'patchlevel.h'"
else
sed 's/^	X//' << \SHAR_EOF > 'patchlevel.h'
	X#define	PATCHLEVEL	14
	X
	X#define NEWS_VERSION   "B 2.11 12/1/87"
SHAR_EOF
if test 63 -ne "`wc -c < 'patchlevel.h'`"
then
	echo shar: error transmitting "'patchlevel.h'" '(should have been 63 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'rmgroup.sh'" '(832 characters)'
if test -f 'rmgroup.sh'
then
	echo shar: will not over-write existing file "'rmgroup.sh'"
else
sed 's/^	X//' << \SHAR_EOF > 'rmgroup.sh'
	X: '@(#)rmgroup.sh	1.8	12/16/86'
	Xfor group
	Xdo
	X	qgrp="`echo $group | sed 's/\./\\\./g'`"
	X	if
	X		grep -s "^$qgrp " LIBDIR/active
	X	then
	X		echo "Removing newsgroup $group"
	X		echo "/^$qgrp[ 	]/d" >>/tmp/,edit$$
	X		dir=SPOOLDIR/"`echo $group | sed 's/\./\//g'`"
	X		if test  -d $dir
	X		then
	X			rm $dir/* >/dev/null 2>&1
	X			echo "rmdir $dir >/dev/null 2>&1" >>/tmp/,rmdir$$
	X		else
	X			echo "$0: $dir: no spool directory" 2>&1
	X		fi
	X	else
	X		echo "$0: $group: no such newsgroup" 2>&1
	X	fi
	Xdone
	Xecho w >>/tmp/,edit$$
	Xecho q >>/tmp/,edit$$
	Xecho "Editing LIBDIR/active..."
	Xed - LIBDIR/active < /tmp/,edit$$
	XFIXACTIVE
	Xecho "Editing LIBDIR/newsgroups..."
	Xed - LIBDIR/newsgroups < /tmp/,edit$$
	Xecho "Removing directories..."
	Xif test -s /tmp/,rmdir$$
	Xthen
	X	sort +1r -o /tmp/,rmdir$$ /tmp/,rmdir$$
	X	. /tmp/,rmdir$$
	Xfi
	Xrm -f /tmp/,edit$$ /tmp/,rmdir$$
	Xexit 0
SHAR_EOF
if test 832 -ne "`wc -c < 'rmgroup.sh'`"
then
	echo shar: error transmitting "'rmgroup.sh'" '(should have been 832 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'rparams.h'" '(2146 characters)'
if test -f 'rparams.h'
then
	echo shar: will not over-write existing file "'rparams.h'"
else
sed 's/^	X//' << \SHAR_EOF > 'rparams.h'
	X/*
	X * rparams.h - parameters for readnews, rfuncs, and readr.
	X */
	X
	X/*	@(#)rparams.h	2.23	10/23/86	*/
	X
	X#include "params.h"
	X
	X/* flags for readnews */
	X#define pflag	options[0].flag
	X#define tflag	options[1].flag
	X#define aflag	options[2].flag
	X#define nflag	options[3].flag
	X#define cflag	options[4].flag
	X#define lflag	options[5].flag
	X#define rflag	options[6].flag
	X#define sflag	options[7].flag
	X#define xflag	options[8].flag
	X#define hflag	options[9].flag
	X#define Mflag	options[10].flag
	X#define fflag	options[11].flag
	X#define uflag	options[12].flag
	X#define eflag	options[13].flag
	X#define Kflag	options[14].flag
	X
	X#define	NEXT	0
	X#define SPEC	1
	X
	X#define	FORWARD	0
	X#define BACKWARD 1
	X
	X#define UNKNOWN 0001	/* possible modes for news program */
	X#define MAIL	0004
	X#define ANY	0007
	X
	Xstruct optable {			/* options table. */
	X	char	optlet;		/* option character. */
	X	char	filchar;	/* if to pickup string, fill character. */
	X	int	flag;		/* TRUE if have seen this opt. */
	X	int	newstate;	/* STRING if takes arg, else OPTION */
	X	int	oldmode;	/* OR of legal input modes. */
	X	int	newmode;	/* output mode. */
	X	char	*buf;		/* string buffer */
	X};
	X
	X/* external declarations specific to readnews */
	Xextern	char	*infile, *outfile, *PAGER, *ALIASES;
	Xextern	char	*bitmap, *MAILER, *MAILPARSER;
	X
	X#ifndef ROOTID
	Xextern	int	ROOTID;
	X#endif
	X
	X#ifdef NOTIFY
	Xextern	char	*TELLME;
	X#endif
	X
	Xextern char	filename[],coptbuf[],datebuf[],afline[];
	Xextern char	newsrc[],groupdir[],rcbuf[],*rcline[],*argvrc[];
	Xextern int	mode, ngrp, line, newrc(), readmode, news;
	Xextern long	bit, obit, last, ngsize, minartno;
	Xextern FILE	*rcfp,*actfp;
	Xextern time_t	atime;
	Xextern struct optable *optpt, options[];
	Xextern int	actdirect, rcreadok, zapng;
	X
	X#ifndef lint
	X/* lint gets very mad about i-minartno, this is one way of shutting it up */
	X/* macros */
	X#define get(i)	((i<minartno)? 0 : (bitmap[(i-minartno) >> 3] & (1 << (i-minartno) % 8)))
	X#define set(i)	if (i>=minartno) bitmap[(i-minartno) >> 3] |= (1 << (i-minartno) % 8);else
	X#define clear(i) if (i>=minartno) bitmap[(i-minartno) >> 3] &= ~(1 << (i-minartno) % 8);else
	X#endif /* !lint */
	X
	X#define FCLOSE(fp)	{if (fp != NULL) {fclose(fp);fp = NULL;}}
SHAR_EOF
if test 2146 -ne "`wc -c < 'rparams.h'`"
then
	echo shar: error transmitting "'rparams.h'" '(should have been 2146 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'sendbatch.sh'" '(1945 characters)'
if test -f 'sendbatch.sh'
then
	echo shar: will not over-write existing file "'sendbatch.sh'"
else
sed 's/^	X//' << \SHAR_EOF > 'sendbatch.sh'
	X: '@(#)sendbatch.sh	1.16	12/1/87'
	X
	Xcflags=
	XLIM=50000
	XMINDF=MINDISKFREE
	XMAXBATCH=MAXPERBATCH
	XSPOOLDISK=SPOOL_DISK
	XCMD='LIBDIR/batch BATCHDIR/$rmt $BLIM'
	XECHO=
	XCOMP=
	XC7=
	XDOIHAVE=
	XRNEWS=rnews
	X
	Xfor rmt in $*
	Xdo
	X	case $rmt in
	X	-[bBC]*)	cflags="$cflags $rmt"; continue;;
	X	-s*)	LIM=`expr "$rmt" : '-s\(.*\)'`
	X		continue;;
	X	-c7) 	COMP='| LIBDIR/compress $cflags'
	X		C7='| LIBDIR/encode'
	X		ECHO='echo "#! c7unbatch"'
	X		continue;;
	X	-c)	COMP='| LIBDIR/compress $cflags'
	X		ECHO='echo "#! cunbatch"'
	X		continue;;
	X	-o*)	ECHO=`expr "$rmt" : '-o\(.*\)'`
	X		RNEWS='cunbatch'
	X		continue;;
	X	-i*)	DOIHAVE=`expr "$rmt" : '-i\(.*\)'`
	X		if test -z "$DOIHAVE"
	X		then
	X			DOIHAVE=`uuname -l`
	X		fi
	X		continue;;
	X	-m*)	MAXBATCH=`expr "$rmt" : '-m\(.*\)'`
	X		continue;;
	X	esac
	X
	X	df=`df $SPOOLDISK | awk "\\$6 == \\"$SPOOLDISK\" {print \\$4}
	X		\\$1 == \\"$SPOOLDISK\\" {print \\$3}"`
	X	if test ! -z "$df" -a \( "$df" -lt $MINDF \)
	X	then
	X		echo not enough space on $SPOOLDISK: $df
	X		continue
	X	fi
	X
	X	if test -s /tmp/uuq.output
	X	then
	X		q=`echo "$rmt" | sed 's/\(.......\).*/\1/'`
	X		q=`awk "\\$1 == \\"$q:\\" { print \\$4;exit}" </tmp/uuq.output`
	X		if test ! -z "$q" -a \( "$q" -gt $MAXBATCH \)
	X		then 
	X			echo $rmt already has $q bytes queued
	X			continue
	X		fi
	X	fi
	X
	X	if test -n "$COMP"
	X	then
	X		BLIM=`expr $LIM \* 2`
	X	else
	X		BLIM=$LIM
	X	fi
	X
	X	: make sure $? is zero
	X	sentbytes=0
	X	while test $? -eq 0 -a $sentbytes -le $MAXBATCH -a \
	X		\( \( $sentbytes -eq 0 -a -s BATCHDIR/$rmt \) -o \
	X		 -s BATCHDIR/$rmt.work -o  \
	X		\( -n "$DOIHAVE" -a -s BATCHDIR/$rmt.ihave \) \)
	X	do
	X		if test -n "$DOIHAVE" -a -s BATCHDIR/$rmt.ihave
	X		then
	X			mv BATCHDIR/$rmt.ihave BATCHDIR/$rmt.$$
	X			LIBDIR/inews -t "cmsg ihave $DOIHAVE" -n to.$rmt.ctl < \
	X				BATCHDIR/$rmt.$$
	X			rm BATCHDIR/$rmt.$$
	X					
	X		else
	X			(eval $ECHO; eval $CMD $COMP $C7) |
	X			if test -s BATCHDIR/$rmt.cmd
	X			then
	X				BATCHDIR/$rmt.cmd
	X			else
	X				uux - UUXFLAGS $rmt!$RNEWS
	X			fi
	X			sentbytes=`expr $sentbytes + $LIM`
	X		fi
	X	done
	Xdone
SHAR_EOF
if test 1945 -ne "`wc -c < 'sendbatch.sh'`"
then
	echo shar: error transmitting "'sendbatch.sh'" '(should have been 1945 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'vnews.help'" '(1364 characters)'
if test -f 'vnews.help'
then
	echo shar: will not over-write existing file "'vnews.help'"
else
sed 's/^	X//' << \SHAR_EOF > 'vnews.help'
	XVnews commands:    (each may be preceded by a non-negative count)
	X
	XCR  Next page or article                D   Decrypt a rot 13 joke
	Xn   Go to next article                  A   Go to article numbered count
	Xe   Mark current article as unread      <   Go to article with given ID
	X+   Go forwards count articles          p   Go to parent article
	X-   Go to previous article              ug  Unsubscribe to this group
	X^B  Go backwards count pages            ^L  Redraw screen
	X^N  Go forward count lines              v   Print netnews version
	X^P  Go backwards count lines            q   Quit
	X^D  Go forward half a page              x   Quit without updating .newsrc
	X^U  Go backwards half a page            c   Cancel the current article
	Xh   Display article header              H   Display all article headers
	X!   Escape to shell                     ?   Display this message
	Xr   Reply to article using editor       K   Mark rest of newsgroup read
	XR   Reply--put current article in reply b   Go back 1 article in same group
	XESC-r  Reply directly using mailer      m   Move on to next item in a digest
	Xf   Post a followup article             s   Save article in file
	XN   Go to newsgroup (next is default)   w   Save without header
	Xl   List unread articles in group       L   List all articles in group
	X
	X[Press CR to see article, h to see header... (any command will work)]
SHAR_EOF
if test 1364 -ne "`wc -c < 'vnews.help'`"
then
	echo shar: error transmitting "'vnews.help'" '(should have been 1364 characters)'
fi
fi # end of overwriting check
#	End of shell archive
exit 0

