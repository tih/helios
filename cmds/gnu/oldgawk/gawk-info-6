Info file gawk-info, produced by Makeinfo, -*- Text -*- from input
file gawk.texinfo.

This file documents `awk', a program that you can use to select
particular records in a file and perform operations upon them.

Copyright (C) 1989 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.



File: gawk-info,  Node: Built-in Summary,  Next: Arrays Summary,  Prev: Fields Summary,  Up: Variables/Fields

Built-in Variables
------------------

`awk''s built-in variables are:

`ARGC'
     The number of command line arguments (not including options or
     the `awk' program itself).

`ARGV'
     The array of command line arguments.  The array is indexed from
     0 to `ARGC' - 1.  Dynamically changing the contents of `ARGV'
     can control the files used for data.

`ENVIRON'
     An array containing the values of the environment variables. 
     The array is indexed by variable name, each element being the
     value of that variable.  Thus, the environment variable `HOME'
     would be in `ENVIRON["HOME"]'.  Its value might be `/u/close'.

     Changing this array does not affect the environment seen by
     programs which `gawk' spawns via redirection or the `system'
     function.  (This may change in a future version of `gawk'.)

     Some operating systems do not have environment variables.  The
     array `ENVIRON' is empty when running on these systems.

`FILENAME'
     The name of the current input file.  If no files are specified
     on the command line, the value of `FILENAME' is `-'.

`FNR'
     The input record number in the current input file.

`FS'
     The input field separator, a blank by default.

`IGNORECASE'
     The case-sensitivity flag for regular expression operations.  If
     `IGNORECASE' has a nonzero value, then pattern matching in
     rules, field splitting with `FS', regular expression matching
     with `~' and `!~', and the `gsub', `index', `match', `split' and
     `sub' predefined functions all ignore case when doing regular
     expression operations.

`NF'
     The number of fields in the current input record.

`NR'
     The total number of input records seen so far.

`OFMT'
     The output format for numbers, `"%.6g"' by default.

`OFS'
     The output field separator, a blank by default.

`ORS'
     The output record separator, by default a newline.

`RS'
     The input record separator, by default a newline.  `RS' is
     exceptional in that only the first character of its string value
     is used for separating records.  If `RS' is set to the null
     string, then records are separated by blank lines.  When `RS' is
     set to the null string, then the newline character always acts
     as a field separator, in addition to whatever value `FS' may have.

`RSTART'
     The index of the first character matched by `match'; 0 if no
     match.

`RLENGTH'
     The length of the string matched by `match'; -1 if no match.

`SUBSEP'
     The string used to separate multiple subscripts in array
     elements, by default `"\034"'.

*Note Built-in Variables::.



File: gawk-info,  Node: Arrays Summary,  Next: Data Type Summary,  Prev: Built-in Summary,  Up: Variables/Fields

Arrays
------

Arrays are subscripted with an expression between square brackets
(`[' and `]').  The expression may be either a number or a string. 
Since arrays are associative, string indices are meaningful and are
not converted to numbers.

If you use multiple expressions separated by commas inside the square
brackets, then the array subscript is a string consisting of the
concatenation of the individual subscript values, converted to
strings, separated by the subscript separator (the value of `SUBSEP').

The special operator `in' may be used in an `if' or `while' statement
to see if an array has an index consisting of a particular value.

     if (val in array)
             print array[val]

If the array has multiple subscripts, use `(i, j, ...) in array' to
test for existence of an element.

The `in' construct may also be used in a `for' loop to iterate over
all the elements of an array.  *Note Scanning an Array::.

An element may be deleted from an array using the `delete' statement.

*Note Arrays::, for more detailed information.



File: gawk-info,  Node: Data Type Summary,  Prev: Arrays Summary,  Up: Variables/Fields

Data Types
----------

The value of an `awk' expression is always either a number or a string.

Certain contexts (such as arithmetic operators) require numeric
values.  They convert strings to numbers by interpreting the text of
the string as a numeral.  If the string does not look like a numeral,
it converts to 0.

Certain contexts (such as concatenation) require string values.  They
convert numbers to strings by effectively printing them.

To force conversion of a string value to a number, simply add 0 to
it.  If the value you start with is already a number, this does not
change it.

To force conversion of a numeric value to a string, concatenate it
with the null string.

The `awk' language defines comparisons as being done numerically if
possible, otherwise one or both operands are converted to strings and
a string comparison is performed.

Uninitialized variables have the string value `""' (the null, or
empty, string).  In contexts where a number is required, this is
equivalent to 0.

*Note Variables::, for more information on variable naming and
initialization; *note Conversion::., for more information on how
variable values are interpreted.



File: gawk-info,  Node: Rules Summary,  Next: Functions Summary,  Prev: Variables/Fields,  Up: Gawk Summary

Patterns and Actions
====================


* Menu:

* Pattern Summary::     Quick overview of patterns.
* Regexp Summary::      Quick overview of regular expressions.
* Actions Summary::     Quick overview of actions.

 An `awk' program is mostly composed of rules, each consisting of a
pattern followed by an action.  The action is enclosed in `{' and
`}'.  Either the pattern may be missing, or the action may be
missing, but, of course, not both.  If the pattern is missing, the
action is executed for every single line of input.  A missing action
is equivalent to this action,

     { print }

which prints the entire line.

Comments begin with the `#' character, and continue until the end of
the line.  Blank lines may be used to separate statements.  Normally,
a statement ends with a newline, however, this is not the case for
lines ending in a `,', `{', `?', `:', `&&', or `||'.  Lines ending in
`do' or `else' also have their statements automatically continued on
the following line.  In other cases, a line can be continued by
ending it with a `\', in which case the newline is ignored.

Multiple statements may be put on one line by separating them with a
`;'.  This applies to both the statements within the action part of a
rule (the usual case), and to the rule statements themselves.

*Note Comments::, for information on `awk''s commenting convention;
*note Statements/Lines::., for a description of the line continuation
mechanism in `awk'.



File: gawk-info,  Node: Pattern Summary,  Next: Regexp Summary,  Prev: Rules Summary,  Up: Rules Summary

Patterns
--------

`awk' patterns may be one of the following:

     /REGULAR EXPRESSION/
     RELATIONAL EXPRESSION
     PATTERN && PATTERN
     PATTERN || PATTERN
     PATTERN ? PATTERN : PATTERN
     (PATTERN)
     ! PATTERN
     PATTERN1, PATTERN2
     BEGIN
     END

`BEGIN' and `END' are two special kinds of patterns that are not
tested against the input.  The action parts of all `BEGIN' rules are
merged as if all the statements had been written in a single `BEGIN'
rule.  They are executed before any of the input is read.  Similarly,
all the `END' rules are merged, and executed when all the input is
exhausted (or when an `exit' statement is executed).  `BEGIN' and
`END' patterns cannot be combined with other patterns in pattern
expressions.  `BEGIN' and `END' rules cannot have missing action parts.

For `/REGULAR-EXPRESSION/' patterns, the associated statement is
executed for each input line that matches the regular expression. 
Regular expressions are the same as those in `egrep', and are
summarized below.

A RELATIONAL EXPRESSION may use any of the operators defined below in
the section on actions.  These generally test whether certain fields
match certain regular expressions.

The `&&', `||', and `!' operators are logical ``and'', logical
``or'', and logical ``not'', respectively, as in C.  They do
short-circuit evaluation, also as in C, and are used for combining
more primitive pattern expressions.  As in most languages,
parentheses may be used to change the order of evaluation.

The `?:' operator is like the same operator in C.  If the first
pattern matches, then the second pattern is matched against the input
record; otherwise, the third is matched.  Only one of the second and
third patterns is matched.

The `PATTERN1, PATTERN2' form of a pattern is called a range pattern.
It matches all input lines starting with a line that matches
PATTERN1, and continuing until a line that matches PATTERN2,
inclusive.  A range pattern cannot be used as an operand to any of
the pattern operators.

*Note Patterns::, for a full description of the pattern part of `awk'
rules.



File: gawk-info,  Node: Regexp Summary,  Next: Actions Summary,  Prev: Pattern Summary,  Up: Rules Summary

Regular Expressions
-------------------

Regular expressions are the extended kind found in `egrep'.  They are
composed of characters as follows:

`C'
     matches the character C (assuming C is a character with no
     special meaning in regexps).

`\C'
     matches the literal character C.

`.'
     matches any character except newline.

`^'
     matches the beginning of a line or a string.

`$'
     matches the end of a line or a string.

`[ABC...]'
     matches any of the characters ABC... (character class).

`[^ABC...]'
     matches any character except ABC... and newline (negated
     character class).

`R1|R2'
     matches either R1 or R2 (alternation).

`R1R2'
     matches R1, and then R2 (concatenation).

`R+'
     matches one or more R's.

`R*'
     matches zero or more R's.

`R?'
     matches zero or one R's.

`(R)'
     matches R (grouping).

*Note Regexp::, for a more detailed explanation of regular expressions.

The escape sequences allowed in string constants are also valid in
regular expressions (*note Constants::.).



File: gawk-info,  Node: Actions Summary,  Prev: Regexp Summary,  Up: Rules Summary

Actions
-------

Action statements are enclosed in braces, `{' and `}'.  Action
statements consist of the usual assignment, conditional, and looping
statements found in most languages.  The operators, control
statements, and input/output statements available are patterned after
those in C.


* Menu:

* Operator Summary::            `awk' operators.
* Control Flow Summary::        The control statements.
* I/O Summary::                 The I/O statements.
* Printf Summary::              A summary of `printf'.
* Special File Summary::        Special file names interpreted internally.
* Numeric Functions Summary::   Built-in numeric functions.
* String Functions Summary::    Built-in string functions.
* String Constants Summary::    Escape sequences in strings.

 

File: gawk-info,  Node: Operator Summary,  Next: Control Flow Summary,  Prev: Actions Summary,  Up: Actions Summary

Operators
.........

 The operators in `awk', in order of increasing precedence, are

`= += -= *= /= %= ^='
     Assignment.  Both absolute assignment (`VAR=VALUE') and operator
     assignment (the other forms) are supported.

`?:'
     A conditional expression, as in C.  This has the form `EXPR1 ? 
     EXPR2 : EXPR3'.  If EXPR1 is true, the value of the expression
     is EXPR2; otherwise it is EXPR3.  Only one of EXPR2 and EXPR3 is
     evaluated.

`||'
     Logical ``or''.

`&&'
     Logical ``and''.

`~ !~'
     Regular expression match, negated match.

`< <= > >= != =='
     The usual relational operators.

`BLANK'
     String concatenation.

`+ -'
     Addition and subtraction.

`* / %'
     Multiplication, division, and modulus.

`+ - !'
     Unary plus, unary minus, and logical negation.

`^'
     Exponentiation (`**' may also be used, and `**=' for the
     assignment operator).

`++ --'
     Increment and decrement, both prefix and postfix.

`$'
     Field reference.

*Note Expressions::, for a full description of all the operators
listed above.  *Note Fields::, for a description of the field
reference operator.



File: gawk-info,  Node: Control Flow Summary,  Next: I/O Summary,  Prev: Operator Summary,  Up: Actions Summary

Control Statements
..................

 The control statements are as follows:

     if (CONDITION) STATEMENT [ else STATEMENT ]
     while (CONDITION) STATEMENT
     do STATEMENT while (CONDITION)
     for (EXPR1; EXPR2; EXPR3) STATEMENT
     for (VAR in ARRAY) STATEMENT
     break
     continue
     delete ARRAY[INDEX]
     exit [ EXPRESSION ]
     { STATEMENTS }

*Note Statements::, for a full description of all the control
statements listed above.



File: gawk-info,  Node: I/O Summary,  Next: Printf Summary,  Prev: Control Flow Summary,  Up: Actions Summary

I/O Statements
..............

 The input/output statements are as follows:

`getline'
     Set `$0' from next input record; set `NF', `NR', `FNR'.

`getline <FILE'
     Set `$0' from next record of FILE; set `NF'.

`getline VAR'
     Set VAR from next input record; set `NF', `FNR'.

`getline VAR <FILE'
     Set VAR from next record of FILE.

`next'
     Stop processing the current input record.  The next input record
     is read and processing starts over with the first pattern in the
     `awk' program.  If the end of the input data is reached, the
     `END' rule(s), if any, are executed.

`print'
     Prints the current record.

`print EXPR-LIST'
     Prints expressions.

`print EXPR-LIST > FILE'
     Prints expressions on FILE.

`printf FMT, EXPR-LIST'
     Format and print.

`printf FMT, EXPR-LIST > file'
     Format and print on FILE.

Other input/output redirections are also allowed.  For `print' and
`printf', `>> FILE' appends output to the FILE, while `| COMMAND'
writes on a pipe.  In a similar fashion, `COMMAND | getline' pipes
input into `getline'.  `getline' returns 0 on end of file, and -1 on
an error.

*Note Getline::, for a full description of the `getline' statement. 
*Note Printing::, for a full description of `print' and `printf'. 
Finally, *note Next Statement::., for a description of how the `next'
statement works.



File: gawk-info,  Node: Printf Summary,  Next: Special File Summary,  Prev: I/O Summary,  Up: Actions Summary

`printf' Summary
................

 The `awk' `printf' statement and `sprintf' function accept the
following conversion specification formats:

`%c'
     An ASCII character.  If the argument used for `%c' is numeric,
     it is treated as a character and printed.  Otherwise, the
     argument is assumed to be a string, and the only first character
     of that string is printed.

`%d'
     A decimal number (the integer part).

`%i'
     Also a decimal integer.

`%e'
     A floating point number of the form `[-]d.ddddddE[+-]dd'.

`%f'
     A floating point number of the form [`-']`ddd.dddddd'.

`%g'
     Use `%e' or `%f' conversion, whichever is shorter, with
     nonsignificant zeros suppressed.

`%o'
     An unsigned octal number (again, an integer).

`%s'
     A character string.

`%x'
     An unsigned hexadecimal number (an integer).

`%X'
     Like `%x', except use `A' through `F' instead of `a' through `f'
     for decimal 10 through 15.

`%%'
     A single `%' character; no argument is converted.

There are optional, additional parameters that may lie between the
`%' and the control letter:

`-'
     The expression should be left-justified within its field.

`WIDTH'
     The field should be padded to this width.  If WIDTH has a
     leading zero, then the field is padded with zeros.  Otherwise it
     is padded with blanks.

`.PREC'
     A number indicating the maximum width of strings or digits to
     the right of the decimal point.

*Note Printf::, for examples and for a more detailed description.



File: gawk-info,  Node: Special File Summary,  Next: Numeric Functions Summary,  Prev: Printf Summary,  Up: Actions Summary

Special File Names
..................

 When doing I/O redirection from either `print' or `printf' into a
file, or via `getline' from a file, `gawk' recognizes certain special
file names internally.  These file names allow access to open file
descriptors inherited from `gawk''s parent process (usually the
shell).  The file names are:

`/dev/stdin'
     The standard input.

`/dev/stdout'
     The standard output.

`/dev/stderr'
     The standard error output.

`/dev/fd/N'
     The file denoted by the open file descriptor N.

These file names may also be used on the command line to name data
files.

*Note Special Files::, for a longer description that provides the
motivation for this feature.



File: gawk-info,  Node: Numeric Functions Summary,  Next: String Functions Summary,  Prev: Special File Summary,  Up: Actions Summary

Numeric Functions
.................

 `awk' has the following predefined arithmetic functions:

`atan2(Y, X)'
     returns the arctangent of Y/X in radians.

`cos(EXPR)'
     returns the cosine in radians.

`exp(EXPR)'
     the exponential function.

`int(EXPR)'
     truncates to integer.

`log(EXPR)'
     the natural logarithm function.

`rand()'
     returns a random number between 0 and 1.

`sin(EXPR)'
     returns the sine in radians.

`sqrt(EXPR)'
     the square root function.

`srand(EXPR)'
     use EXPR as a new seed for the random number generator.  If no
     EXPR is provided, the time of day is used.  The return value is
     the previous seed for the random number generator.



File: gawk-info,  Node: String Functions Summary,  Next: String Constants Summary,  Prev: Numeric Functions Summary,  Up: Actions Summary

String Functions
................

 `awk' has the following predefined string functions:

`gsub(R, S, T)'
     for each substring matching the regular expression R in the
     string T, substitute the string S, and return the number of
     substitutions.  If T is not supplied, use `$0'.

`index(S, T)'
     returns the index of the string T in the string S, or 0 if T is
     not present.

`length(S)'
     returns the length of the string S.

`match(S, R)'
     returns the position in S where the regular expression R occurs,
     or 0 if R is not present, and sets the values of `RSTART' and
     `RLENGTH'.

`split(S, A, R)'
     splits the string S into the array A on the regular expression
     R, and returns the number of fields.  If R is omitted, `FS' is
     used instead.

`sprintf(FMT, EXPR-LIST)'
     prints EXPR-LIST according to FMT, and returns the resulting
     string.

`sub(R, S, T)'
     this is just like `gsub', but only the first matching substring
     is replaced.

`substr(S, I, N)'
     returns the N-character substring of S starting at I.  If N is
     omitted, the rest of S is used.

`tolower(STR)'
     returns a copy of the string STR, with all the upper-case
     characters in STR translated to their corresponding lower-case
     counterparts.  Nonalphabetic characters are left unchanged.

`toupper(STR)'
     returns a copy of the string STR, with all the lower-case
     characters in STR translated to their corresponding upper-case
     counterparts.  Nonalphabetic characters are left unchanged.

`system(CMD-LINE)'
     Execute the command CMD-LINE, and return the exit status.

*Note Built-in::, for a description of all of `awk''s built-in
functions.



File: gawk-info,  Node: String Constants Summary,  Prev: String Functions Summary,  Up: Actions Summary

String Constants
................

 String constants in `awk' are sequences of characters enclosed
between double quotes (`"').  Within strings, certain "escape
sequences" are recognized, as in C.  These are:

`\\'
     A literal backslash.

`\a'
     The ``alert'' character; usually the ASCII BEL character.

`\b'
     Backspace.

`\f'
     Formfeed.

`\n'
     Newline.

`\r'
     Carriage return.

`\t'
     Horizontal tab.

`\v'
     Vertical tab.

`\xHEX DIGITS'
     The character represented by the string of hexadecimal digits
     following the `\x'.  As in ANSI C, all following hexadecimal
     digits are considered part of the escape sequence.  (This
     feature should tell us something about language design by
     committee.)  E.g., `"\x1B"' is a string containing the ASCII ESC
     (escape) character.

`\DDD'
     The character represented by the 1-, 2-, or 3-digit sequence of
     octal digits.  Thus, `"\033"' is also a string containing the
     ASCII ESC (escape) character.

`\C'
     The literal character C.

The escape sequences may also be used inside constant regular
expressions (e.g., the regexp `/[ \t\f\n\r\v]/' matches whitespace
characters).

*Note Constants::.



File: gawk-info,  Node: Functions Summary,  Prev: Rules Summary,  Up: Gawk Summary

Functions
=========

Functions in `awk' are defined as follows:

     function NAME(PARAMETER LIST) { STATEMENTS }

Actual parameters supplied in the function call are used to
instantiate the formal parameters declared in the function.  Arrays
are passed by reference, other variables are passed by value.

If there are fewer arguments passed than there are names in
PARAMETER-LIST, the extra names are given the null string as value. 
Extra names have the effect of local variables.

The open-parenthesis in a function call must immediately follow the
function name, without any intervening white space.  This is to avoid
a syntactic ambiguity with the concatenation operator.

The word `func' may be used in place of `function'.

*Note User-defined::, for a more complete description.



File: gawk-info,  Node: Sample Program,  Next: Notes,  Prev: Gawk Summary,  Up: Top

Sample Program
**************

The following example is a complete `awk' program, which prints the
number of occurrences of each word in its input.  It illustrates the
associative nature of `awk' arrays by using strings as subscripts. 
It also demonstrates the `for X in ARRAY' construction.  Finally, it
shows how `awk' can be used in conjunction with other utility
programs to do a useful task of some complexity with a minimum of
effort.  Some explanations follow the program listing.

     awk '
     # Print list of word frequencies
     {
         for (i = 1; i <= NF; i++)
             freq[$i]++
     }
     
     END {
         for (word in freq)
             printf "%s\t%d\n", word, freq[word]
     }'

The first thing to notice about this program is that it has two
rules.  The first rule, because it has an empty pattern, is executed
on every line of the input.  It uses `awk''s field-accessing
mechanism (*note Fields::.) to pick out the individual words from the
line, and the built-in variable `NF' (*note Built-in Variables::.) to
know how many fields are available.

For each input word, an element of the array `freq' is incremented to
reflect that the word has been seen an additional time.

The second rule, because it has the pattern `END', is not executed
until the input has been exhausted.  It prints out the contents of
the `freq' table that has been built up inside the first action.

Note that this program has several problems that would prevent it
from being useful by itself on real text files:

   * Words are detected using the `awk' convention that fields are
     separated by whitespace and that other characters in the input
     (except newlines) don't have any special meaning to `awk'.  This
     means that punctuation characters count as part of words.

   * The `awk' language considers upper and lower case characters to
     be distinct.  Therefore, `foo' and `Foo' are not treated by this
     program as the same word.  This is undesirable since in normal
     text, words are capitalized if they begin sentences, and a
     frequency analyzer should not be sensitive to that.

   * The output does not come out in any useful order.  You're more
     likely to be interested in which words occur most frequently, or
     having an alphabetized table of how frequently each word occurs.

The way to solve these problems is to use other system utilities to
process the input and output of the `awk' script.  Suppose the script
shown above is saved in the file `frequency.awk'.  Then the shell
command:

     tr A-Z a-z < file1 | tr -cd 'a-z\012' \
       | awk -f frequency.awk \
       | sort +1 -nr

produces a table of the words appearing in `file1' in order of
decreasing frequency.

The first `tr' command in this pipeline translates all the upper case
characters in `file1' to lower case.  The second `tr' command deletes
all the characters in the input except lower case characters and
newlines.  The second argument to the second `tr' is quoted to
protect the backslash in it from being interpreted by the shell.  The
`awk' program reads this suitably massaged data and produces a word
frequency table, which is not ordered.

The `awk' script's output is now sorted by the `sort' command and
printed on the terminal.  The options given to `sort' in this example
specify to sort by the second field of each input line (skipping one
field), that the sort keys should be treated as numeric quantities
(otherwise `15' would come before `5'), and that the sorting should
be done in descending (reverse) order.

See the general operating system documentation for more information
on how to use the `tr' and `sort' commands.



File: gawk-info,  Node: Notes,  Next: Glossary,  Prev: Sample Program,  Up: Top

Implementation Notes
********************

This appendix contains information mainly of interest to implementors
and maintainers of `gawk'.  Everything in it applies specifically to
`gawk', and not to other implementations.


* Menu:

* Compatibility Mode::   How to disable certain `gawk' extensions.

* Future Extensions::    New features we may implement soon.

* Improvements::         Suggestions for improvements by volunteers.

 

File: gawk-info,  Node: Compatibility Mode,  Next: Future Extensions,  Prev: Notes,  Up: Notes

Downwards Compatibility and Debugging
=====================================

*Note S5R4/GNU::, for a summary of the GNU extensions to the `awk'
language and program.  All of these features can be turned off either
by compiling `gawk' with `-DSTRICT' (not recommended), or by invoking
`gawk' with the `-c' option.

If `gawk' is compiled for debugging with `-DDEBUG', then there are
two more options available on the command line.

`-d'
     Print out debugging information during execution.

`-D'
     Print out the parse stack information as the program is being
     parsed.

Both of these options are intended only for serious `gawk'
developers, and not for the casual user.  They probably have not even
been compiled into your version of `gawk', since they slow down
execution.

The code for recognizing special file names such as `/dev/stdin' can
be disabled at compile time with `-DNO_DEV_FD', or with `-DSTRICT'.



File: gawk-info,  Node: Future Extensions,  Next: Improvements,  Prev: Compatibility Mode,  Up: Notes

Probable Future Extensions
==========================

This section briefly lists extensions that indicate the directions we
are currently considering for `gawk'.

ANSI C compatible `printf'
     The `printf' and `sprintf' functions may be enhanced to be fully
     compatible with the specification for the `printf' family of
     functions in ANSI C.

`RS' as a regexp
     The meaning of `RS' may be generalized along the lines of `FS'.

Control of subprocess environment
     Changes made in `gawk' to the array `ENVIRON' may be propagated
     to subprocesses run by `gawk'.

Data bases
     It may be possible to map an NDBM/GDBM file into an `awk' array.

Single-character fields
     The null string, `""', as a field separator, will cause field
     splitting and the split function to separate individual
     characters.  Thus, `split(a, "abcd", "")' would yield `a[1] ==
     "a"', `a[2] == "b"', and so on.

Fixed-length fields and records
     A mechanism may be provided to allow the specification of fixed
     length fields and records.

Regexp syntax
     The `egrep' syntax for regular expressions, now specified with
     the `-e' option, may become the default, since the POSIX
     standard may specify this.



File: gawk-info,  Node: Improvements,  Prev: Future Extensions,  Up: Notes

Suggestions for Improvements
============================

Here are some projects that would-be `gawk' hackers might like to
take on.  They vary in size from a few days to a few weeks of
programming, depending on which one you choose and how fast a
programmer you are.  Please send any improvements you write to the
maintainers at the GNU project.

  1. State machine regexp matcher: At present, `gawk' uses the
     backtracking regular expression matcher from the GNU subroutine
     library.  If a regexp is really going to be used a lot of times,
     it is faster to convert it once to a description of a finite
     state machine, then run a routine simulating that machine every
     time you want to match the regexp.  You might be able to use the
     matching routines used by GNU `egrep'.

  2. Compilation of `awk' programs: `gawk' uses a Bison (YACC-like)
     parser to convert the script given it into a syntax tree; the
     syntax tree is then executed by a simple recursive evaluator. 
     Both of these steps incur a lot of overhead, since parsing can
     be slow (especially if you also do the previous project and
     convert regular expressions to finite state machines at compile
     time) and the recursive evaluator performs many procedure calls
     to do even the simplest things.

     It should be possible for `gawk' to convert the script's parse
     tree into a C program which the user would then compile, using
     the normal C compiler and a special `gawk' library to provide
     all the needed functions (regexps, fields, associative arrays,
     type coercion, and so on).

     An easier possibility might be for an intermediate phase of
     `awk' to convert the parse tree into a linear byte code form
     like the one used in GNU Emacs Lisp.  The recursive evaluator
     would then be replaced by a straight line byte code interpreter
     that would be intermediate in speed between running a compiled
     program and doing what `gawk' does now.

  3. An error message section has not been included in this version
     of the manual.  Perhaps some nice beta testers will document
     some of the messages for the future.



File: gawk-info,  Node: Glossary,  Next: Index,  Prev: Notes,  Up: Top

Glossary
********

Action
     A series of `awk' statements attached to a rule.  If the rule's
     pattern matches an input record, the `awk' language executes the
     rule's action.  Actions are always enclosed in curly braces. 
     *Note Actions::.

Amazing `awk' Assembler
     Henry Spencer at the University of Toronto wrote a retargetable
     assembler completely as `awk' scripts.  It is thousands of lines
     long, including machine descriptions for several 8-bit
     microcomputers.  It is distributed with `gawk' and is a good
     example of a program that would have been better written in
     another language.

Assignment
     An `awk' expression that changes the value of some `awk'
     variable or data object.  An object that you can assign to is
     called an "lvalue".  *Note Assignment Ops::.

`awk' Language
     The language in which `awk' programs are written.

`awk' Program
     An `awk' program consists of a series of "patterns" and
     "actions", collectively known as "rules".  For each input record
     given to the program, the program's rules are all processed in
     turn.  `awk' programs may also contain function definitions.

`awk' Script
     Another name for an `awk' program.

Built-in Function
     The `awk' language provides built-in functions that perform
     various numerical and string computations.  Examples are `sqrt'
     (for the square root of a number) and `substr' (for a substring
     of a string).  *Note Built-in::.

Built-in Variable
     The variables `ARGC', `ARGV', `ENVIRON',  `FILENAME', `FNR',
     `FS', `NF', `IGNORECASE', `NR', `OFMT', `OFS', `ORS', `RLENGTH',
     `RSTART', `RS', and `SUBSEP', have special meaning to `awk'. 
     Changing some of them affects `awk''s running environment. 
     *Note Built-in Variables::.

C
     The system programming language that most GNU software is
     written in.  The `awk' programming language has C-like syntax,
     and this manual points out similarities between `awk' and C when
     appropriate.

Compound Statement
     A series of `awk' statements, enclosed in curly braces. 
     Compound statements may be nested.  *Note Statements::.

Concatenation
     Concatenating two strings means sticking them together, one
     after another, giving a new string.  For example, the string
     `foo' concatenated with the string `bar' gives the string
     `foobar'.  *Note Concatenation::.

Conditional Expression
     An expression using the `?:' ternary operator, such as `EXPR1 ?
     EXPR2 : EXPR3'.  The expression EXPR1 is evaluated; if the
     result is true, the value of the whole expression is the value
     of EXPR2 otherwise the value is EXPR3.  In either case, only one
     of EXPR2 and EXPR3 is evaluated.  *Note Conditional Exp::.

Constant Regular Expression
     A constant regular expression is a regular expression written
     within slashes, such as `/foo/'.  This regular expression is
     chosen when you write the `awk' program, and cannot be changed
     doing its execution.  *Note Regexp Usage::.

Comparison Expression
     A relation that is either true or false, such as `(a < b)'. 
     Comparison expressions are used in `if' and `while' statements,
     and in patterns to select which input records to process.  *Note
     Comparison Ops::.

Curly Braces
     The characters `{' and `}'.  Curly braces are used in `awk' for
     delimiting actions, compound statements, and function bodies.

Data Objects
     These are numbers and strings of characters.  Numbers are
     converted into strings and vice versa, as needed.  *Note
     Conversion::.

Dynamic Regular Expression
     A dynamic regular expression is a regular expression written as
     an ordinary expression.  It could be a string constant, such as
     `"foo"', but it may also be an expression whose value may vary. 
     *Note Regexp Usage::.

Escape Sequences
     A special sequence of characters used for describing nonprinting
     characters, such as `\n' for newline, or `\033' for the ASCII
     ESC (escape) character.  *Note Constants::.

Field
     When `awk' reads an input record, it splits the record into
     pieces separated by whitespace (or by a separator regexp which
     you can change by setting the built-in variable `FS').  Such
     pieces are called fields.  *Note Records::.

Format
     Format strings are used to control the appearance of output in
     the `printf' statement.  Also, data conversions from numbers to
     strings are controlled by the format string contained in the
     built-in variable `OFMT'.  *Note Control Letters::; also *note
     Output Separators::..

Function
     A specialized group of statements often used to encapsulate
     general or program-specific tasks.  `awk' has a number of
     built-in functions, and also allows you to define your own. 
     *Note Built-in::; also *note User-defined::..

`gawk'
     The GNU implementation of `awk'.

Input Record
     A single chunk of data read in by `awk'.  Usually, an `awk'
     input record consists of one line of text.  *Note Records::.

Keyword
     In the `awk' language, a keyword is a word that has special
     meaning.  Keywords are reserved and may not be used as variable
     names.

     The keywords of `awk' are: `if', `else', `while', `do...while',
     `for', `for...in', `break', `continue', `delete', `next',
     `function', `func', and `exit'.

Lvalue
     An expression that can appear on the left side of an assignment
     operator.  In most languages, lvalues can be variables or array
     elements.  In `awk', a field designator can also be used as an
     lvalue.

Number
     A numeric valued data object.  The `gawk' implementation uses
     double precision floating point to represent numbers.

Pattern
     Patterns tell `awk' which input records are interesting to which
     rules.

     A pattern is an arbitrary conditional expression against which
     input is tested.  If the condition is satisfied, the pattern is
     said to "match" the input record.  A typical pattern might
     compare the input record against a regular expression.  *Note
     Patterns::.

Range (of input lines)
     A sequence of consecutive lines from the input file.  A pattern
     can specify ranges of input lines for `awk' to process, or it
     can specify single lines.  *Note Patterns::.

Recursion
     When a function calls itself, either directly or indirectly.  If
     this isn't clear, refer to the entry for ``recursion''.

Redirection
     Redirection means performing input from other than the standard
     input stream, or output to other than the standard output stream.

     You can redirect the output of the `print' and `printf'
     statements to a file or a system command, using the `>', `>>',
     and `|' operators.  You can redirect input to the `getline'
     statement using the `<' and `|' operators.  *Note Redirection::.

Regular Expression
     See ``regexp''.

Regexp
     Short for "regular expression".  A regexp is a pattern that
     denotes a set of strings, possibly an infinite set.  For
     example, the regexp `R.*xp' matches any string starting with the
     letter `R' and ending with the letters `xp'.  In `awk', regexps
     are used in patterns and in conditional expressions.  Regexps
     may contain escape sequences.  *Note Regexp::.

Rule
     A segment of an `awk' program, that specifies how to process
     single input records.  A rule consists of a "pattern" and an
     "action".  `awk' reads an input record; then, for each rule, if
     the input record satisfies the rule's pattern, `awk' executes
     the rule's action.  Otherwise, the rule does nothing for that
     input record.

Side Effect
     A side effect occurs when an expression has an effect aside from
     merely producing a value.  Assignment expressions, increment
     expressions and function calls have side effects.  *Note
     Assignment Ops::.

Special File
     A file name interpreted internally by `gawk', instead of being
     handed directly to the underlying operating system.  For
     example, `/dev/stdin'.  *Note Special Files::.

Stream Editor
     A program that reads records from an input stream and processes
     them one or more at a time.  This is in contrast with batch
     programs, which may expect to read their input files in entirety
     before starting to do anything, and with interactive programs,
     which require input from the user.

String
     A datum consisting of a sequence of characters, such as `I am a
     string'.  Constant strings are written with double-quotes in the
     `awk' language, and may contain "escape sequences".  *Note
     Constants::.

Whitespace
     A sequence of blank or tab characters occurring inside an input
     record or a string.



File: gawk-info,  Node: Index,  Prev: Glossary,  Up: Top

Index
*****


* Menu:

* `$' (field operator): Fields.
* `AWKPATH' environment variable: AWKPATH Variable.
* `BEGIN' special pattern: BEGIN/END.
* `END' special pattern: BEGIN/END.
* `awk' language: This Manual.
* `awk' program: This Manual.
* `break' statement: Break Statement.
* `continue' statement: Continue Statement.
* `delete' statement: Delete.
* `exit' statement: Exit Statement.
* `for (x in ...)': Scanning an Array.
* `for' statement: For Statement.
* `if' statement: If Statement.
* `next' statement: Next Statement.
* `printf' statement, syntax of: Basic Printf.
* `printf', format-control characters: Control Letters.
* `printf', modifiers: Format Modifiers.
* `print' statement: Print.
* `return' statement: Return Statement.
* `while' statement: While Statement.
* `/dev/fd/': Special Files.
* `/dev/stderr': Special Files.
* `/dev/stdin': Special Files.
* `/dev/stdout': Special Files.
* `BBS-list' file: Sample Data Files.
* `inventory-shipped' file: Sample Data Files.
* `#!': Executable Scripts.
* `-C' option: Options.
* `-F' option: Field Separators.
* `-V' option: Options.
* `-c' option: Options.
* `-f' option: Long.
* `-v' option: Options.
* `print $0': Very Simple.
* ARGV: Other Arguments.
* ENVIRON: Auto-set.
* FILENAME: Reading Files.
* FNR: Records.
* FS: Field Separators.
* NF: Fields.
* NR: Records.
* OFMT: Conversion.
* OFS: Output Separators.
* ORS: Output Separators.
* RLENGTH: String Functions.
* RS: Records.
* RSTART: String Functions.
* SUBSEP: Multi-dimensional.
* accessing fields: Fields.
* acronym: History.
* action, curly braces: Actions.
* action, default: Very Simple.
* action, definition of: Actions.
* action, separating statements: Actions.
* addition: Arithmetic Ops.
* and operator: Boolean Ops.
* applications of `awk': When.
* arguments in function call: Function Calls.
* arguments, command line: Command Line.
* arithmetic operators: Arithmetic Ops.
* array assignment: Assigning Elements.
* array reference: Reference to Elements.
* arrays: Array Intro.
* arrays, definition of: Array Intro.
* arrays, deleting an element: Delete.
* arrays, determining presence of elements: Reference to Elements.
* arrays, multi-dimensional subscripts: Multi-dimensional.
* arrays, special `for' statement: Scanning an Array.
* assignment operators: Assignment Ops.
* assignment to fields: Changing Fields.
* associative arrays: Array Intro.
* backslash continuation: Statements/Lines.
* basic function of `gawk': Getting Started.
* body of a loop: While Statement.
* boolean expressions: Boolean Ops.
* boolean operators: Boolean Ops.
* boolean patterns: Boolean Patterns.
* built-in functions: Built-in.
* built-in variables: Built-in Variables.
* built-in variables, user modifiable: User-modified.
* call by reference: Function Caveats.
* call by value: Function Caveats.
* calling a function: Function Calls.
* case sensitivity: Read Terminal.
* changing contents of a field: Changing Fields.
* close: Close Input.
* close: Close Output.
* closing input files and pipes: Close Input.
* closing output files and pipes: Close Output.
* command line: Command Line.
* command line formats: Running gawk.
* command line, setting `FS' on: Field Separators.
* comments: Comments.
* comparison expressions: Comparison Ops.
* comparison expressions as patterns: Comparison Patterns.
* computed regular expressions: Regexp Usage.
* concatenation: Concatenation.
* conditional expression: Conditional Exp.
* constants, types of: Constants.
* continuation of lines: Statements/Lines.
* control statement: Statements.
* conversion of strings and numbers: Conversion.
* curly braces: Actions.
* default action: Very Simple.
* default pattern: Very Simple.
* defining functions: Definition Syntax.
* deleting elements of arrays: Delete.
* directory search: AWKPATH Variable.
* division: Arithmetic Ops.
* documenting `awk' programs: Comments.
* dynamic regular expressions: Regexp Usage.
* element assignment: Assigning Elements.
* element of array: Reference to Elements.
* empty pattern: Empty.
* escape sequence notation: Constants.
* examining fields: Fields.
* executable scripts: Executable Scripts.
* explicit input: Getline.
* exponentiation: Arithmetic Ops.
* expression: Expressions.
* expression, conditional: Conditional Exp.
* expressions, assignment: Assignment Ops.
* expressions, boolean: Boolean Ops.
* expressions, comparison: Comparison Ops.
* field separator, `FS': Field Separators.
* field separator, choice of: Field Separators.
* field separator, setting on command line: Field Separators.
* field, changing contents of: Changing Fields.
* fields: Fields.
* fields, separating: Field Separators.
* file descriptors: Special Files.
* file, `awk' program: Long.
* format specifier: Control Letters.
* format string: Basic Printf.
* formatted output: Printf.
* function call: Function Calls.
* function definition: Definition Syntax.
* functions, user-defined: User-defined.
* getline: Getline.
* gsub: String Functions.
* history of `awk': History.
* how `awk' works: Two Rules.
* increment operators: Increment Ops.
* input: Reading Files.
* input file, sample: Sample Data Files.
* input redirection: Getline.
* input, `getline' command: Getline.
* input, explicit: Getline.
* input, multiple line records: Multiple Line.
* input, standard: Read Terminal.
* interaction of `awk' with other programs: I/O Functions.
* invocation of `gawk': Command Line.
* language, `awk': This Manual.
* length: String Functions.
* logical operations: Boolean Ops.
* loop: While Statement.
* loops, exiting: Break Statement.
* lvalue: Assignment Ops.
* manual, using this: This Manual.
* match: String Functions.
* match: String Functions.
* metacharacters: Regexp Operators.
* modifiers (in format specifiers): Format Modifiers.
* multi-dimensional subscripts: Multi-dimensional.
* multiple line records: Multiple Line.
* multiple passes over data: Other Arguments.
* multiple statements on one line: Statements/Lines.
* multiplication: Arithmetic Ops.
* not operator: Boolean Ops.
* number of fields, `NF': Fields.
* number of records, `NR' or `FNR': Records.
* numeric constant: Constants.
* numeric value: Constants.
* one-liners: One-liners.
* operator precedence: Precedence.
* operators, `$': Fields.
* operators, arithmetic: Arithmetic Ops.
* operators, assignment: Assignment Ops.
* operators, boolean: Boolean Ops.
* operators, increment: Increment Ops.
* operators, regular expression matching: Regexp Usage.
* operators, relational: Comparison Patterns.
* operators, relational: Comparison Ops.
* operators, string: Concatenation.
* operators, string-matching: Regexp Usage.
* options, command line: Command Line.
* or operator: Boolean Ops.
* output: Printing.
* output field separator, `OFS': Output Separators.
* output record separator, `ORS': Output Separators.
* output redirection: Redirection.
* output, formatted: Printf.
* output, piping: File/Pipe Redirection.
* passes, multiple: Other Arguments.
* path, search: AWKPATH Variable.
* pattern, case sensitive: Read Terminal.
* pattern, comparison expressions: Comparison Patterns.
* pattern, default: Very Simple.
* pattern, definition of: Patterns.
* pattern, empty: Empty.
* pattern, regular expressions: Regexp.
* patterns, `BEGIN': BEGIN/END.
* patterns, `END': BEGIN/END.
* patterns, boolean: Boolean Patterns.
* patterns, range: Ranges.
* patterns, types of: Kinds of Patterns.
* pipes for output: File/Pipe Redirection.
* precedence: Precedence.
* printing: Printing.
* program file: Long.
* program, `awk': This Manual.
* program, definition of: Getting Started.
* program, self contained: Executable Scripts.
* programs, documenting: Comments.
* quotient: Arithmetic Ops.
* range pattern: Ranges.
* reading files: Reading Files.
* reading files, `getline' command: Getline.
* reading files, multiple line records: Multiple Line.
* record separator: Records.
* records, multiple line: Multiple Line.
* redirection of input: Getline.
* redirection of output: Redirection.
* reference to array: Reference to Elements.
* regexp: Regexp.
* regexp as expression: Comparison Ops.
* regexp operators: Comparison Ops.
* regexp search operators: Regexp Usage.
* regular expression matching operators: Regexp Usage.
* regular expression metacharacters: Regexp Operators.
* regular expressions as field separators: Field Separators.
* regular expressions as patterns: Regexp.
* regular expressions, computed: Regexp Usage.
* relational operators: Comparison Ops.
* relational operators: Comparison Patterns.
* remainder: Arithmetic Ops.
* removing elements of arrays: Delete.
* rule, definition of: Getting Started.
* running `awk' programs: Running gawk.
* running long programs: Long.
* sample input file: Sample Data Files.
* scanning an array: Scanning an Array.
* script, definition of: Getting Started.
* scripts, executable: Executable Scripts.
* scripts, shell: Executable Scripts.
* search path: AWKPATH Variable.
* self contained programs: Executable Scripts.
* shell scripts: Executable Scripts.
* side effect: Assignment Ops.
* single quotes, why needed: One-shot.
* split: String Functions.
* sprintf: String Functions.
* standard error output: Special Files.
* standard input: Reading Files.
* standard input: Special Files.
* standard input: Read Terminal.
* standard output: Special Files.
* string constants: Constants.
* string operators: Concatenation.
* string-matching operators: Regexp Usage.
* sub: String Functions.
* subscripts, multi-dimensional in arrays: Multi-dimensional.
* substr: String Functions.
* subtraction: Arithmetic Ops.
* system: I/O Functions.
* tolower: String Functions.
* toupper: String Functions.
* use of comments: Comments.
* user-defined functions: User-defined.
* user-defined variables: Variables.
* uses of `awk': Preface.
* using this manual: This Manual.
* variables, user-defined: Variables.
* when to use `awk': When.


 
Tag Table:
Node: Top918
Node: Preface3103
Node: History4539
Node: Copying6164
Node: This Manual19485
Node: Sample Data Files20845
Node: Getting Started23652
Node: Very Simple25194
Node: Two Rules27141
Node: More Complex29187
Node: Running gawk32037
Node: One-shot32916
Node: Read Terminal34049
Node: Long35075
Node: Executable Scripts36206
Node: Comments37781
Node: Statements/Lines38866
Node: When41248
Node: Reading Files43149
Node: Records44741
Node: Fields47701
Node: Non-Constant Fields50259
Node: Changing Fields52072
Node: Field Separators54944
Node: Multiple Line60688
Node: Getline62956
Node: Close Input72375
Node: Printing73625
Node: Print74424
Node: Print Examples76396
Node: Output Separators78641
Node: Printf80303
Node: Basic Printf81183
Node: Control Letters82552
Node: Format Modifiers84331
Node: Printf Examples86241
Node: Redirection88842
Node: File/Pipe Redirection89581
Node: Close Output92650
Node: Special Files94918
Node: One-liners97717
Node: Patterns99646
Node: Kinds of Patterns100544
Node: Empty101490
Node: Regexp101787
Node: Regexp Usage102713
Node: Regexp Operators104721
Node: Case-sensitivity110272
Node: Comparison Patterns112505
Node: Boolean Patterns114511
Node: Expression Patterns115973
Node: Ranges117368
Node: BEGIN/END118802
Node: Actions121247
Node: Expressions123414
Node: Constants125042
Node: Variables128454
Node: Assignment Options130044
Node: Arithmetic Ops131554
Node: Concatenation133073
Node: Comparison Ops134411
Node: Boolean Ops136659
Node: Assignment Ops139080
Node: Increment Ops143022
Node: Conversion145301
Node: Conditional Exp147323
Node: Function Calls148632
Node: Precedence151319
Node: Statements154582
Node: If Statement156091
Node: While Statement157608
Node: Do Statement159585
Node: For Statement160663
Node: Break Statement163742
Node: Continue Statement165324
Node: Next Statement167337
Node: Exit Statement168933
Node: Arrays170489
Node: Array Intro171530
Node: Reference to Elements174952
Node: Assigning Elements176854
Node: Array Example177354
Node: Scanning an Array179069
Node: Delete181370
Node: Multi-dimensional182241
Node: Multi-scanning185392
Node: Built-in186934
Node: Calling Built-in187744
Node: Numeric Functions188997
Node: String Functions192300
Node: I/O Functions200286
Node: User-defined201806
Node: Definition Syntax202459
Node: Function Example205647
Node: Function Caveats206726
Node: Return Statement209683
Node: Built-in Variables211916
Node: User-modified212846
Node: Auto-set215602
Node: Command Line219779
Node: Options220544
Node: Other Arguments224316
Node: AWKPATH Variable226392
Node: Language History228177
Node: V7/S5R3.1228904
Node: S5R4230935
Node: S5R4/GNU232024
Node: Gawk Summary232841
Node: Command Line Summary233470
Node: Language Summary235565
Node: Variables/Fields237499
Node: Fields Summary238192
Node: Built-in Summary239603
Node: Arrays Summary242354
Node: Data Type Summary243525
Node: Rules Summary244783
Node: Pattern Summary246356
Node: Regexp Summary248572
Node: Actions Summary249733
Node: Operator Summary250590
Node: Control Flow Summary251854
Node: I/O Summary252427
Node: Printf Summary253901
Node: Special File Summary255548
Node: Numeric Functions Summary256377
Node: String Functions Summary257212
Node: String Constants Summary259056
Node: Functions Summary260366
Node: Sample Program261241
Node: Notes265001
Node: Compatibility Mode265520
Node: Future Extensions266540
Node: Improvements267878
Node: Glossary270132
Node: Index279019
