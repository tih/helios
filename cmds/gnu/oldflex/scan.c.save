/* A lexical scanner generated by flex */

/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <osfcn.h>

/* use prototypes in function declarations */
#define YY_USE_PROTOS

/* the "const" storage-class-modifier is valid */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
#else
#include <stdlib.h>
#endif	/* __GNUC__ */

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#define const
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
/* we can't get here if it's an ANSI C compiler, or a C++ compiler,
 * so it's got to be a K&R compiler, and therefore there's no standard
 * place from which to include these definitions
 */
char *malloc();
int free();
int read();
#endif


/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* returned upon end-of-file */
#define YY_END_TOK 0

/* copy whatever the last rule matched to the standard output */

/* cast to (char *) is because for 8-bit chars, yytext is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yytext, yyleng, 1, yyout )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0

/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 * 	if ( something_happens )
 *		YY_FATAL_ERROR( "oops, the something happened" );
 *	else
 *		everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1

/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* special action meaning "start processing a new file" */
#define YY_NEW_FILE \
	do \
		{ \
		yy_init_buffer( yy_current_buffer, yyin ); \
		yy_load_buffer_state(); \
		} \
	while ( 0 )

/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 

/* code executed at the end of each rule */
#define YY_BREAK break;

#define YY_END_OF_BUFFER_CHAR 0

#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of default input buffer */
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#define YY_CHAR char
# line 1 "scan.l"
#define INITIAL 0
# line 2 "scan.l"

/* scan.l - scanner for flex input */

/*
 * Copyright (c) 1987, the University of California
 * 
 * The United States Government has rights in this work pursuant to
 * contract no. DE-AC03-76SF00098 between the United States Department of
 * Energy and the University of California.
 * 
 * This program may be redistributed.  Enhancements and derivative works
 * may be created provided the new works, if made available to the general
 * public, are made available for use by anyone.
 */

#include "flexdef.h"
#include "parse.h"

#define ACTION_ECHO fprintf( temp_action_file, "%s", yytext )
#define MARK_END_OF_PROLOG fprintf( temp_action_file, "%%%% end of prolog\n" );

#undef YY_DECL
#define YY_DECL \
   int flexscan()

#define RETURNCHAR \
   yylval = yytext[0]; \
   return ( CHAR );

#define RETURNNAME \
   (void) strcpy( nmstr, yytext ); \
   return ( NAME );

#define PUT_BACK_STRING(str, start) \
   for ( i = strlen( str ) - 1; i >= start; --i ) \
       unput(str[i])
#define SECT2 1
#define SECT2PROLOG 2
#define SECT3 3
#define CODEBLOCK 4
#define PICKUPDEF 5
#define SC 6
#define CARETISBOL 7
#define NUM 8
#define QUOTE 9
#define FIRSTCCL 10
#define CCL 11
#define ACTION 12
#define RECOVER 13
#define BRACEERROR 14
#define C_COMMENT 15
#define C_COMMENT_2 16
#define ACTION_COMMENT 17
#define ACTION_STRING 18
#define PERCENT_BRACE_ACTION 19
# line 54 "scan.l"

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yytext */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext )


struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_CHAR *yy_ch_buf;		/* input buffer */
    YY_CHAR *yy_buf_pos;	/* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters*/
    int yy_buf_size;	

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;		/* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

static YY_BUFFER_STATE yy_current_buffer;

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed */
static YY_CHAR yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */



#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

extern YY_CHAR *yytext;
extern int yyleng;
extern FILE *yyin, *yyout;

YY_CHAR *yytext;
int yyleng;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

#define YY_END_OF_BUFFER 101
typedef int yy_state_type;
static const short int yy_accept[241] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   72,   72,
      101,   14,    7,   13,   11,    7,   12,   14,   14,   14,
       10,   46,   39,   40,   32,   46,   45,   30,   46,   46,
       46,   39,   28,   46,   45,   31,  100,   27,   99,  100,
       21,  100,   23,   22,   24,   52,  100,   48,   49,   51,
       53,   67,   68,   65,   64,   66,   54,   56,   55,   54,
       60,   59,   60,   60,   62,   62,   62,   63,   76,   80,

       79,   81,   81,   74,   75,  100,   25,   70,   69,   17,
       19,   18,   89,   91,   90,   83,   85,   84,   92,   94,
       95,   96,   72,   72,   73,   72,    7,   11,    0,    7,
        1,    0,    2,    0,    8,    4,    5,    0,    3,   10,
       39,   40,    0,    0,   35,    0,    0,   97,   97,    0,
       34,   33,   34,    0,   39,   28,    0,    0,    0,   42,
       38,    0,   27,   26,    0,   21,    0,   23,   22,   50,
       51,   64,   98,   98,    0,   57,   58,   61,   76,    0,
       78,    0,   77,    0,   25,   17,   15,   89,   87,   83,
       82,   92,   93,   72,   72,   72,   71,    1,    0,    9,

        8,    0,    0,    6,   36,    0,   37,   43,    0,    0,
       97,   34,   34,   44,   29,    0,   36,    0,   29,    0,
       42,    0,   20,   98,    0,   16,    0,   88,   71,    0,
        0,   97,   98,    0,    0,   97,   98,    4,    0,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    8,    9,
        9,   10,    9,   11,   12,    9,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,    1,   16,
        1,   17,    9,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       18,   19,   20,   21,   22,    1,   23,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   24,   25,   26,   22,   22,   22,   27,
       22,   22,   28,   29,   30,    1,    1
    } ;

static const YY_CHAR yy_meta[31] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    5,    1,    6,
        1,    1,    5,    7,    7,    1,    1,    1,    8,    9,
        1,    7,    7,    7,    7,    7,    7,    5,    1,   10
    } ;

static const short int yy_base[297] =
    {   0,
        0,   26,   52,   80,  292,  291,    0,    0,  290,    1,
        3,    7,  107,  132,  271,  269,  157,  185,   11,   13,
       54,   57,   85,  100,  213,  241,  286,  285,    4,    8,
        9,   10,   32,   33,   34,   37,   60,   88,  114,  120,
      279,  887,  276,  887,    0,   43,  887,  274,  119,  266,
        0,  887,  134,  887,  887,   92,  887,  887,  256,   53,
      258,  284,  887,  267,  260,  887,  265,    0,  887,  264,
      887,  108,    0,  264,  887,  887,  887,  887,  244,    0,
      887,  887,  887,  887,   99,  887,  887,  887,  887,  131,
      887,  887,  148,  252,  887,    0,  152,  887,    0,  887,

      887,  120,  253,  887,  887,  259,  887,  887,  887,    0,
      887,  248,    0,  887,  247,    0,  887,  246,    0,  887,
      887,    0,    0,   70,  887,  228,  255,    0,  253,  148,
      887,  252,  887,  250,    0,  226,  887,  248,  887,    0,
      172,  887,  222,  245,  887,  145,  156,  887,  166,    0,
        0,  887,  300,  112,  329,  887,  179,  175,  180,    0,
      887,  244,    0,  887,  243,  887,  239,    0,  236,  887,
        0,  175,  887,  180,    0,  887,  887,  887,    0,  134,
      887,    0,  887,  222,  887,    0,  219,    0,  211,    0,
      887,    0,  887,    0,  184,  182,    0,  887,  181,  887,

        0,  144,  158,  887,  887,  145,  887,  887,  183,  120,
      190,    0,    0,  887,  887,  203,  205,  206,  887,  217,
        0,  103,  887,  196,   99,  887,   97,  887,    0,   61,
      209,  216,  218,   33,  220,  887,  887,  887,  217,  887,
      358,  368,  378,  388,  398,  408,  418,  428,  438,  448,
      458,  468,  478,  488,  498,  508,  518,  528,  538,   34,
      548,  558,  568,   14,  578,  588,  598,  608,  618,  628,
      638,  648,   11,  658,  668,  678,  688,  697,  707,  717,
      727,  737,  747,  757,  767,  777,  787,  797,  807,  817,
      826,  836,  846,  856,  866,  876

    } ;

static const short int yy_def[297] =
    {   0,
      241,  241,  242,  242,  243,  243,  244,  244,  245,  245,
      246,  246,  247,  247,  248,  248,  249,  249,  250,  250,
      251,  251,  252,  252,  253,  253,  254,  254,  248,  248,
      255,  255,  256,  256,  257,  257,  258,  258,  259,  259,
      240,  240,  240,  240,  260,  261,  240,  262,  263,  240,
      264,  240,  240,  240,  240,  240,  240,  240,  265,  266,
      267,  268,  240,  240,  240,  240,  269,  270,  240,  271,
      240,  271,  272,  240,  240,  240,  240,  240,  240,  273,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  266,
      240,  240,  274,  275,  240,  276,  266,  240,  277,  240,

      240,  278,  240,  240,  240,  279,  240,  240,  240,  280,
      240,  240,  281,  240,  240,  282,  240,  240,  283,  240,
      240,  284,  285,  285,  240,  285,  240,  260,  261,  261,
      240,  262,  240,  286,  287,  240,  240,  288,  240,  264,
      240,  240,  240,  289,  240,  265,  265,  240,  240,  266,
      290,  240,  290,  268,  268,  240,  268,  268,  291,  292,
      240,  269,  270,  240,  271,  240,  293,  272,  240,  240,
      273,  240,  240,  240,  274,  240,  240,  240,  277,  278,
      240,  278,  240,  279,  240,  280,  294,  281,  295,  282,
      240,  283,  240,  285,  285,  285,  296,  240,  286,  240,

      287,  240,  288,  240,  240,  289,  240,  240,  265,  265,
      240,  290,  153,  240,  240,  268,  268,  291,  240,  291,
      292,  293,  240,  240,  294,  240,  295,  240,  296,  240,
      265,  240,  240,  240,  265,  240,  240,  240,  265,    0,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240

    } ;

static const short int yy_nxt[918] =
    {   0,
      240,   43,   44,   71,   74,   75,  108,   72,   74,   75,
      108,  111,  111,   88,   89,   88,   89,  171,  112,  112,
      140,   45,   45,   45,   45,   45,   45,   46,   47,   90,
       48,   90,   49,  109,  114,  114,  117,  109,   50,  117,
      128,  115,  115,  118,  130,  131,  118,   51,   51,   51,
       51,   51,   51,   53,   54,   55,   77,   56,  238,   77,
       57,   57,  120,  121,   57,   92,  149,   58,   92,   59,
       60,  195,   93,  150,   94,   93,  196,   94,  122,   61,
       57,   62,   63,   55,  234,   56,   64,   77,   57,   57,
      120,  121,   65,  145,  145,   58,   96,   59,   60,  228,

       66,  226,   77,   97,   98,  223,  122,   61,   57,   77,
      166,   96,  172,  172,  215,  124,  125,   78,   97,   98,
      126,  124,  125,   79,  216,  135,  126,  181,   80,   80,
       80,   80,   80,   80,   77,  141,  142,  167,  182,  146,
      143,  181,   78,  136,  149,  137,  138,  207,   79,  130,
      131,  150,  182,   80,   80,   80,   80,   80,   80,   83,
      204,  174,  144,  147,  208,  149,  230,   84,  175,  209,
       85,   85,  150,  141,  142,  146,  210,  215,  143,  211,
      211,  215,  219,  200,  161,  195,   86,   83,  172,  172,
      196,  216,  220,  224,  224,   84,  231,  231,   85,   85,

      144,  147,  208,  232,  232,  215,  217,  215,  219,  233,
      233,  197,  240,  228,   86,  100,  101,  216,  220,  219,
      102,  226,  235,  235,  185,  103,  206,  147,  208,  236,
      236,  237,  237,  239,  239,  147,  208,  169,  147,  208,
      104,  223,  105,  100,  101,  166,  163,  207,  102,  205,
      204,  202,  200,  103,  133,  198,  127,  197,  191,  189,
      187,  185,  183,  177,  170,  169,  166,  163,  104,  161,
      105,  152,  152,  160,  147,  139,  133,  127,  240,  153,
      153,  153,  153,  153,  153,  155,  156,  107,  107,   81,
      157,   81,   71,   68,   68,  240,  158,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  159,  213,  213,  240,  240,  240,  240,  240,
      240,  213,  213,  213,  213,  213,  213,  240,  240,  214,
      155,  156,  240,  240,  240,  157,  240,  240,  240,  240,
      240,  158,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  159,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  146,  146,
      240,  146,  146,  146,  146,  146,  240,  146,  148,  148,
      240,  148,  148,  148,  148,  148,  148,  148,  151,  151,

      240,  151,  151,  151,  151,  151,  151,  151,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  164,  240,
      240,  164,  164,  164,  164,  164,  164,  164,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  168,  168,
      240,  168,  168,  168,  168,  168,  168,  168,  173,  173,
      240,  173,  173,  173,  173,  173,  173,  173,  176,  176,
      240,  176,  176,  176,  176,  176,  176,  176,  178,  178,
      240,  178,  178,  178,  178,  178,  240,  178,  179,  179,
      240,  240,  240,  179,  179,  179,  179,  180,  180,  240,

      180,  180,  180,  180,  180,  180,  180,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  186,  186,  240,
      186,  186,  240,  186,  186,  186,  186,  188,  188,  240,
      188,  188,  240,  188,  188,  188,  188,  190,  190,  240,
      190,  190,  240,  190,  190,  190,  190,  192,  192,  240,
      240,  192,  192,  192,  240,  192,  192,  193,  193,  240,
      193,  193,  193,  193,  193,  193,  193,  194,  194,  240,
      194,  194,  194,  194,  194,  194,  194,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  201,  201,  240,
      201,  201,  201,  201,  201,  201,  201,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  212,  212,  240,
      212,  212,  212,  212,  212,  212,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  221,  221,  240,  221,
      221,  221,  221,  221,  221,  221,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  229,  229,  240,  229,
      229,  229,  229,  229,  229,  229,   41,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240
    } ;

static const short int yy_chk[918] =
    {   0,
        0,    1,    1,   10,   11,   11,   29,   10,   12,   12,
       30,   31,   32,   19,   19,   20,   20,  273,   31,   32,
      264,    1,    1,    1,    1,    1,    1,    2,    2,   19,
        2,   20,    2,   29,   33,   34,   35,   30,    2,   36,
      260,   33,   34,   35,   46,   46,   36,    2,    2,    2,
        2,    2,    2,    3,    3,    3,   21,    3,  234,   22,
        3,    3,   37,   37,    3,   21,   60,    3,   22,    3,
        3,  124,   21,   60,   21,   22,  124,   22,   37,    3,
        3,    4,    4,    4,  230,    4,    4,   23,    4,    4,
       38,   38,    4,   56,   56,    4,   23,    4,    4,  227,

        4,  225,   24,   23,   23,  222,   38,    4,    4,   13,
       72,   24,   85,   85,  154,   39,   39,   13,   24,   24,
       39,   40,   40,   13,  154,   49,   40,  102,   13,   13,
       13,   13,   13,   13,   14,   53,   53,   72,  102,  210,
       53,  180,   14,   49,   90,   49,   49,  206,   14,  130,
      130,   90,  180,   14,   14,   14,   14,   14,   14,   17,
      203,   93,   53,  146,  146,   97,  202,   17,   93,  147,
       17,   17,   97,  141,  141,  147,  147,  158,  141,  149,
      149,  157,  159,  199,  158,  195,   17,   18,  172,  172,
      195,  157,  159,  174,  174,   18,  209,  209,   18,   18,

      141,  209,  209,  211,  211,  216,  157,  217,  218,  224,
      224,  196,  216,  189,   18,   25,   25,  217,  218,  220,
       25,  187,  231,  231,  184,   25,  220,  231,  231,  232,
      232,  233,  233,  235,  235,  239,  239,  169,  235,  235,
       25,  167,   25,   26,   26,  165,  162,  144,   26,  143,
      138,  136,  134,   26,  132,  129,  127,  126,  118,  115,
      112,  106,  103,   94,   79,   74,   70,   67,   26,   65,
       26,   61,   61,   64,   59,   50,   48,   43,   41,   61,
       61,   61,   61,   61,   61,   62,   62,   28,   27,   16,
       62,   15,    9,    6,    5,    0,   62,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   62,  153,  153,    0,    0,    0,    0,    0,
        0,  153,  153,  153,  153,  153,  153,    0,    0,  153,
      155,  155,    0,    0,    0,  155,    0,    0,    0,    0,
        0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  155,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  265,  265,
        0,  265,  265,  265,  265,  265,    0,  265,  266,  266,
        0,  266,  266,  266,  266,  266,  266,  266,  267,  267,

        0,  267,  267,  267,  267,  267,  267,  267,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  270,    0,
        0,  270,  270,  270,  270,  270,  270,  270,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  272,  272,
        0,  272,  272,  272,  272,  272,  272,  272,  274,  274,
        0,  274,  274,  274,  274,  274,  274,  274,  275,  275,
        0,  275,  275,  275,  275,  275,  275,  275,  276,  276,
        0,  276,  276,  276,  276,  276,    0,  276,  277,  277,
        0,    0,    0,  277,  277,  277,  277,  278,  278,    0,

      278,  278,  278,  278,  278,  278,  278,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  280,  280,    0,
      280,  280,    0,  280,  280,  280,  280,  281,  281,    0,
      281,  281,    0,  281,  281,  281,  281,  282,  282,    0,
      282,  282,    0,  282,  282,  282,  282,  283,  283,    0,
        0,  283,  283,  283,    0,  283,  283,  284,  284,    0,
      284,  284,  284,  284,  284,  284,  284,  285,  285,    0,
      285,  285,  285,  285,  285,  285,  285,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  287,  287,    0,
      287,  287,  287,  287,  287,  287,  287,  288,  288,  288,

      288,  288,  288,  288,  288,  288,  288,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  290,  290,    0,
      290,  290,  290,  290,  290,  290,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  292,  292,    0,  292,
      292,  292,  292,  292,  292,  292,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  296,  296,    0,  296,
      296,  296,  296,  296,  296,  296,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0

/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CHAR *yy_c_buf_p = (YY_CHAR *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CHAR c, YY_CHAR *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#define yy_new_buffer yy_create_buffer

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

YY_DECL
    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp, *yy_bp;
    register int yy_act;


    static int bracelevel, didadef;
    int i, cclval;
    char nmdef[MAXLINE], myesc();


    if ( yy_init )
	{
	YY_USER_INIT;

	if ( ! yy_start )
	    yy_start = 1;	/* first start state */

	if ( ! yyin )
	    yyin = stdin;

	if ( ! yyout )
	    yyout = stdout;

	if ( yy_current_buffer )
	    yy_init_buffer( yy_current_buffer, yyin );
	else
	    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_load_buffer_state();

	yy_init = 0;
	}

    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;

	/* support of yytext */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 241 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 240 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;

yy_find_action:
	yy_act = yy_accept[yy_current_state];

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:	/* this label is used only to access EOF actions */


	switch ( yy_act )
	    {
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
# line 59 "scan.l"
++linenum; ECHO; /* indented code */
	YY_BREAK
case 2:
# line 60 "scan.l"
++linenum; ECHO; /* treat as a comment */
	YY_BREAK
case 3:
# line 61 "scan.l"
ECHO; BEGIN(C_COMMENT);
	YY_BREAK
case 4:
# line 62 "scan.l"
return ( SCDECL );
	YY_BREAK
case 5:
# line 63 "scan.l"
return ( XSCDECL );
	YY_BREAK
case 6:
# line 64 "scan.l"
++linenum; line_directive_out( stdout ); BEGIN(CODEBLOCK);
	YY_BREAK
case 7:
# line 65 "scan.l"
return ( WHITESPACE );
	YY_BREAK
case 8:
# line 67 "scan.l"
{
         sectnum = 2;
         line_directive_out( stdout );
         BEGIN(SECT2PROLOG);
         return ( SECTEND );
         }
	YY_BREAK
case 9:
# line 74 "scan.l"
{
         fprintf( stderr,
              "old-style lex command at line %d ignored:\n\t%s",
             linenum, yytext );
         ++linenum;
         }
	YY_BREAK
case 10:
# line 81 "scan.l"
{
         (void) strcpy( nmstr, yytext );
         didadef = false;
         BEGIN(PICKUPDEF);
         }
	YY_BREAK
case 11:
# line 87 "scan.l"
RETURNNAME;
	YY_BREAK
case 12:
# line 88 "scan.l"
++linenum; /* allows blank lines in section 1 */
	YY_BREAK
case 13:
# line 89 "scan.l"
++linenum; return ( '\n' );
	YY_BREAK
case 14:
# line 90 "scan.l"
synerr( "illegal character" ); BEGIN(RECOVER);
	YY_BREAK
case 15:
# line 93 "scan.l"
ECHO; BEGIN(0);
	YY_BREAK
case 16:
# line 94 "scan.l"
++linenum; ECHO; BEGIN(0);
	YY_BREAK
case 17:
# line 95 "scan.l"
ECHO;
	YY_BREAK
case 18:
# line 96 "scan.l"
ECHO;
	YY_BREAK
case 19:
# line 97 "scan.l"
++linenum; ECHO;
	YY_BREAK
case 20:
# line 99 "scan.l"
++linenum; BEGIN(0);
	YY_BREAK
case 21:
# line 100 "scan.l"
++linenum; ECHO;
	YY_BREAK
case 22:
# line 102 "scan.l"
/* separates name and definition */
	YY_BREAK
case 23:
# line 104 "scan.l"
{
         (void) strcpy( nmdef, yytext );

         for ( i = strlen( nmdef ) - 1;
               i >= 0 &&
               nmdef[i] == ' ' || nmdef[i] == '\t';
               --i )
             ;

         nmdef[i + 1] = '\0';

                        ndinstal( nmstr, nmdef );
         didadef = true;
         }
	YY_BREAK
case 24:
# line 119 "scan.l"
{
         if ( ! didadef )
             synerr( "incomplete name definition" );
         BEGIN(0);
         ++linenum;
         }
	YY_BREAK
case 25:
# line 126 "scan.l"
++linenum; BEGIN(0); RETURNNAME;
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 129 "scan.l"
{
         ++linenum;
         ACTION_ECHO;
         MARK_END_OF_PROLOG;
         BEGIN(SECT2);
         }
	YY_BREAK
case 27:
# line 136 "scan.l"
++linenum; ACTION_ECHO;
	YY_BREAK
case 28:
# line 138 "scan.l"
++linenum; /* allow blank lines in section 2 */
	YY_BREAK
   /* this horrible mess of a rule matches indented lines which
    * do not contain "/*".  We need to make the distinction because
    * otherwise this rule will be taken instead of the rule which
    * matches the beginning of comments like this one
    */
case 29:
# line 145 "scan.l"
{
         synerr( "indented code found outside of action" );
         ++linenum;
         }
	YY_BREAK
case 30:
# line 150 "scan.l"
BEGIN(SC); return ( '<' );
	YY_BREAK
case 31:
# line 151 "scan.l"
return ( '^' );
	YY_BREAK
case 32:
# line 152 "scan.l"
BEGIN(QUOTE); return ( '"' );
	YY_BREAK
case 33:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 153 "scan.l"
BEGIN(NUM); return ( '{' );
	YY_BREAK
case 34:
# line 154 "scan.l"
BEGIN(BRACEERROR);
	YY_BREAK
case 35:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 155 "scan.l"
return ( '$' );
	YY_BREAK
case 36:
# line 157 "scan.l"
{
         bracelevel = 1;
         BEGIN(PERCENT_BRACE_ACTION);
         return ( '\n' );
         }
	YY_BREAK
case 37:
# line 162 "scan.l"
++linenum; return ( '\n' );
	YY_BREAK
case 38:
# line 164 "scan.l"
ACTION_ECHO; BEGIN(C_COMMENT_2);
	YY_BREAK
case 39:
# line 166 "scan.l"
{ /* needs to be separate from following rule due to
            * bug with trailing context
            */
         bracelevel = 0;
         BEGIN(ACTION);
         return ( '\n' );
         }
	YY_BREAK
case 40:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 174 "scan.l"
{
         bracelevel = 0;
         BEGIN(ACTION);
         return ( '\n' );
         }
	YY_BREAK
case 41:
# line 180 "scan.l"
++linenum; return ( '\n' );
	YY_BREAK
case 42:
# line 182 "scan.l"
{
         /* guarantee that the SECT3 rule will have something
          * to match
          */
         yyless(1);
         sectnum = 3;
         BEGIN(SECT3);
         return ( EOF ); /* to stop the parser */
         }
	YY_BREAK
case 43:
# line 192 "scan.l"
{
         (void) strcpy( nmstr, yytext );

         /* check to see if we've already encountered this ccl */
         if ( (cclval = ccllookup( nmstr )) )
             {
             yylval = cclval;
             ++cclreuse;
             return ( PREVCCL );
             }
         else
             {
             /* we fudge a bit.  We know that this ccl will
              * soon be numbered as lastccl + 1 by cclinit
              */
             cclinstal( nmstr, lastccl + 1 );

             /* push back everything but the leading bracket
              * so the ccl can be rescanned
              */
             PUT_BACK_STRING(nmstr, 1);

             BEGIN(FIRSTCCL);
             return ( '[' );
             }
         }
	YY_BREAK
case 44:
# line 219 "scan.l"
{
         register char *nmdefptr;
         char *ndlookup();

         (void) strcpy( nmstr, yytext );
         nmstr[yyleng - 1] = '\0';  /* chop trailing brace */

         /* lookup from "nmstr + 1" to chop leading brace */
         if ( ! (nmdefptr = ndlookup( nmstr + 1 )) )
             synerr( "undefined {name}" );

         else
             { /* push back name surrounded by ()'s */
             unput(')');
             PUT_BACK_STRING(nmdefptr, 0);
             unput('(');
             }
         }
	YY_BREAK
case 45:
# line 238 "scan.l"
return ( yytext[0] );
	YY_BREAK
case 46:
# line 239 "scan.l"
RETURNCHAR;
	YY_BREAK
case 47:
# line 240 "scan.l"
++linenum; return ( '\n' );
	YY_BREAK
case 48:
# line 243 "scan.l"
return ( ',' );
	YY_BREAK
case 49:
# line 244 "scan.l"
BEGIN(SECT2); return ( '>' );
	YY_BREAK
case 50:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 245 "scan.l"
BEGIN(CARETISBOL); return ( '>' );
	YY_BREAK
case 51:
# line 246 "scan.l"
RETURNNAME;
	YY_BREAK
case 52:
# line 247 "scan.l"
synerr( "bad start condition name" );
	YY_BREAK
case 53:
# line 249 "scan.l"
BEGIN(SECT2); return ( '^' );
	YY_BREAK
case 54:
# line 252 "scan.l"
RETURNCHAR;
	YY_BREAK
case 55:
# line 253 "scan.l"
BEGIN(SECT2); return ( '"' );
	YY_BREAK
case 56:
# line 255 "scan.l"
{
         synerr( "missing quote" );
         BEGIN(SECT2);
         ++linenum;
         return ( '"' );
         }
	YY_BREAK
case 57:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 263 "scan.l"
BEGIN(CCL); return ( '^' );
	YY_BREAK
case 58:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 264 "scan.l"
return ( '^' );
	YY_BREAK
case 59:
# line 265 "scan.l"
BEGIN(CCL); yylval = '-'; return ( CHAR );
	YY_BREAK
case 60:
# line 266 "scan.l"
BEGIN(CCL); RETURNCHAR;
	YY_BREAK
case 61:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 268 "scan.l"
return ( '-' );
	YY_BREAK
case 62:
# line 269 "scan.l"
RETURNCHAR;
	YY_BREAK
case 63:
# line 270 "scan.l"
BEGIN(SECT2); return ( ']' );
	YY_BREAK
case 64:
# line 273 "scan.l"
{
         yylval = myctoi( yytext );
         return ( NUMBER );
         }
	YY_BREAK
case 65:
# line 278 "scan.l"
return ( ',' );
	YY_BREAK
case 66:
# line 279 "scan.l"
BEGIN(SECT2); return ( '}' );
	YY_BREAK
case 67:
# line 281 "scan.l"
{
         synerr( "bad character inside {}'s" );
         BEGIN(SECT2);
         return ( '}' );
         }
	YY_BREAK
case 68:
# line 287 "scan.l"
{
         synerr( "missing }" );
         BEGIN(SECT2);
         ++linenum;
         return ( '}' );
         }
	YY_BREAK
case 69:
# line 295 "scan.l"
synerr( "bad name in {}'s" ); BEGIN(SECT2);
	YY_BREAK
case 70:
# line 296 "scan.l"
synerr( "missing }" ); ++linenum; BEGIN(SECT2);
	YY_BREAK
case 71:
# line 299 "scan.l"
bracelevel = 0;
	YY_BREAK
case 72:
# line 300 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 73:
# line 301 "scan.l"
{
         ++linenum;
         ACTION_ECHO;
         if ( bracelevel == 0 )
             {
             fputs( "\tYY_BREAK\n", temp_action_file );
             BEGIN(SECT2);
             }
         }
	YY_BREAK
case 74:
# line 311 "scan.l"
ACTION_ECHO; ++bracelevel;
	YY_BREAK
case 75:
# line 312 "scan.l"
ACTION_ECHO; --bracelevel;
	YY_BREAK
case 76:
# line 313 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 77:
# line 314 "scan.l"
ACTION_ECHO; BEGIN(ACTION_COMMENT);
	YY_BREAK
case 78:
# line 315 "scan.l"
ACTION_ECHO; /* character constant */
	YY_BREAK
case 79:
# line 316 "scan.l"
ACTION_ECHO; BEGIN(ACTION_STRING);
	YY_BREAK
case 80:
# line 317 "scan.l"
{
         ++linenum;
         ACTION_ECHO;
         if ( bracelevel == 0 )
             {
             fputs( "\tYY_BREAK\n", temp_action_file );
             BEGIN(SECT2);
             }
         }
	YY_BREAK
case 81:
# line 326 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 82:
# line 328 "scan.l"
ACTION_ECHO; BEGIN(ACTION);
	YY_BREAK
case 83:
# line 329 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 84:
# line 330 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 85:
# line 331 "scan.l"
++linenum; ACTION_ECHO;
	YY_BREAK
case 86:
# line 332 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 87:
# line 334 "scan.l"
ACTION_ECHO; BEGIN(SECT2);
	YY_BREAK
case 88:
# line 335 "scan.l"
++linenum; ACTION_ECHO; BEGIN(SECT2);
	YY_BREAK
case 89:
# line 336 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 90:
# line 337 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 91:
# line 338 "scan.l"
++linenum; ACTION_ECHO;
	YY_BREAK
case 92:
# line 340 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 93:
# line 341 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 94:
# line 342 "scan.l"
++linenum; ACTION_ECHO;
	YY_BREAK
case 95:
# line 343 "scan.l"
ACTION_ECHO; BEGIN(ACTION);
	YY_BREAK
case 96:
# line 344 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 97:
# line 347 "scan.l"
{
         yylval = myesc( yytext );
         return ( CHAR );
         }
	YY_BREAK
case 98:
# line 352 "scan.l"
{
         yylval = myesc( yytext );
         BEGIN(CCL);
         return ( CHAR );
         }
	YY_BREAK
case 99:
# line 359 "scan.l"
{
         register int numchars;

         /* black magic - we know the names of a flex scanner's
          * internal variables.  We cap the input buffer with
          * an end-of-string and dump it to the output.
          */
#ifdef NON_TONY_FIX
         YY_DO_BEFORE_SCAN; /* recover from setting up yytext */
#else
	/*
	 * There is no such thing as YY_DO_BEFORE_SCAN, but there is
	 * something called YY_DO_BEFORE_ACTION.  Is this what they
	 * meant ?
	 * Having (briefly) looked at it, it does seem to do what the
	 * comment above suggests, so we'll give it a try
	 */
	YY_DO_BEFORE_ACTION;
#endif

#ifdef FLEX_FAST_SKEL
         fputs( yy_c_buf_p + 1, stdout );
#else
         yy_ch_buf[yy_e_buf_p + 1] = '\0';

         /* ignore the first character; it's the second '%'
          * put back by the yyless(1) above
          */
         fputs( yy_ch_buf + yy_c_buf_p + 1, stdout );
#endif

         /* if we don't do this, the data written by write()
          * can get overwritten when stdout is finally flushed
          */
         (void) fflush( stdout );

#ifdef __STDC__
         while ( (numchars = fread( yy_ch_buf, 1, YY_BUF_MAX, yyin )) > 0 )
             (void) fwrite( yy_ch_buf, 1, numchars, stdout );
#else
         while ( (numchars = read( fileno(yyin), yy_ch_buf,
                    YY_BUF_MAX )) > 0 )
             (void) write( fileno(stdout), yy_ch_buf, numchars );
#endif
         if ( numchars < 0 )
             flexerror( "fatal read error in section 3" );

         return ( EOF );
         }
	YY_BREAK
case 100:
# line 408 "scan.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SECT2):
case YY_STATE_EOF(SECT2PROLOG):
case YY_STATE_EOF(SECT3):
case YY_STATE_EOF(CODEBLOCK):
case YY_STATE_EOF(PICKUPDEF):
case YY_STATE_EOF(SC):
case YY_STATE_EOF(CARETISBOL):
case YY_STATE_EOF(NUM):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(FIRSTCCL):
case YY_STATE_EOF(CCL):
case YY_STATE_EOF(ACTION):
case YY_STATE_EOF(RECOVER):
case YY_STATE_EOF(BRACEERROR):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(C_COMMENT_2):
case YY_STATE_EOF(ACTION_COMMENT):
case YY_STATE_EOF(ACTION_STRING):
case YY_STATE_EOF(PERCENT_BRACE_ACTION):
    yyterminate();

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yytext - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yytext + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yytext + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yytext,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yytext + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yytext + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#ifdef FLEX_DEBUG
		printf( "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()

    {
    register YY_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_CHAR *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yytext = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

static yy_state_type yy_get_previous_state()

    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp;

    register YY_CHAR *yy_bp = yytext;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;

    for ( yy_cp = yytext + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 241 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

    return ( yy_current_state );
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif

    {
    register int yy_is_jam;
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 241 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 240);

    return ( yy_is_jam ? 0 : yy_current_state );
    }


#ifdef YY_USE_PROTOS
static void yyunput( YY_CHAR c, register YY_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CHAR c;
register YY_CHAR *yy_bp;
#endif

    {
    register YY_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif

    {
    int c;
    YY_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yytext = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yytext + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;

#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yytext + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif

    {
    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    yy_init_buffer( b, file );

    return ( b );
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
# line 408 "scan.l"

