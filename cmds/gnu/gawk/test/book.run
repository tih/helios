#! /bin/sh

DIR=`pwd`
OUT=${OUT-$DIR/book.out}
AWK=${AWK-$DIR/../gawk}

rm -rf $OUT
if mkdir $OUT
then
	:
else
	echo could not mkdir $OUT 1>&2
	exit 1
fi

export AWK OUT DIR

cd book

$AWK -f 05.awk emp.data >$OUT/05.awk
$AWK -f 06.awk emp.data >$OUT/06.awk
$AWK -f 07.awk emp.data >$OUT/07.awk

sed "s:awk:$AWK:" < 08.sh > 08.run
sh ./08.run >$OUT/08.sh
rm -f 08.run

$AWK -f 10.awk emp.data >$OUT/10.awk
$AWK -f 11.awk emp.data >$OUT/11.awk
$AWK -f 11a.awk emp.data >$OUT/11a.awk
$AWK -f 12.awk emp.data >$OUT/12.awk
$AWK -f 13.awk emp.data >$OUT/13.awk
$AWK -f 14.awk emp.data >$OUT/14.awk
$AWK -f 15.awk emp.data >$OUT/15.awk
$AWK -f 20.awk emp.data >$OUT/20.awk
$AWK -f 21.awk emp.data >$OUT/21.awk
$AWK -f 22.awk emp.data >$OUT/22.awk
$AWK -f 26.awk emp.data >$OUT/26.awk
$AWK -f 28.awk emp.data >$OUT/28.awk
$AWK -f 30.awk emp.data >$OUT/30.awk
$AWK -f 31.awk emp.data >$OUT/31.awk
$AWK -f 31a.awk emp.data >$OUT/31a.awk
$AWK -f 32.awk emp.data >$OUT/32.awk
$AWK -f 33.awk emp.data >$OUT/33.awk
$AWK -f 33a.awk emp.data >$OUT/33a.awk
$AWK -f 34.awk emp.data >$OUT/34.awk
$AWK -f 40.awk emp.data >$OUT/40.awk
$AWK -f 40a.awk emp.data >$OUT/40a.awk
$AWK -f 41.awk emp.data >$OUT/41.awk
$AWK -f 50.awk emp.data >$OUT/50.awk
$AWK -f 51.awk emp.data >$OUT/51.awk
$AWK -f 61.awk emp.data >$OUT/61.awk
$AWK -f 62.awk emp.data >$OUT/62.awk
$AWK -f 63.awk emp.data >$OUT/63.awk
$AWK -f 64.awk emp.data >$OUT/64.awk
$AWK -f 65.awk emp.data >$OUT/65.awk
$AWK -f 66.awk emp.data >$OUT/66.awk
$AWK -f 67.awk emp.data >$OUT/67.awk
$AWK -f 68.awk emp.data >$OUT/68.awk
$AWK -f 69.awk emp.data >$OUT/69.awk
$AWK -f 70.awk emp.data >$OUT/70.awk
$AWK -f 71.awk emp.data >$OUT/71.awk
$AWK -f 72.awk emp.data >$OUT/72.awk
$AWK -f 73.awk emp.data >$OUT/73.awk
$AWK -f 74.awk emp.data >$OUT/74.awk
$AWK -f 75.awk emp.data >$OUT/75.awk
$AWK -f 76.awk emp.data >$OUT/76.awk
$AWK -f 77.awk emp.data >$OUT/77.awk
$AWK -f 78.awk emp.data >$OUT/78.awk
$AWK -f 79.awk emp.data >$OUT/79.awk
$AWK -f 80.awk emp.data >$OUT/80.awk

echo "1000 .06 5
1000 .12 5" | $AWK -f interest1.awk >$OUT/interest1.awk

echo "1000 .06 5
1000 .12 5" | $AWK -f forint.awk >$OUT/forint.awk

# chapter 2

$AWK -f p11.awk countries > $OUT/p11
$AWK -f p12.awk countries > $OUT/p12
$AWK -f p13.awk countries > $OUT/p13
$AWK -f p13a.awk countries > $OUT/p13a

echo "9876
abcd" | $AWK -f re1.awk > $OUT/re1

echo "1
12
123
1234
aaa" | $AWK -f re2.awk > $OUT/re2

echo "12
+12
-12
aaa
12.3
.3
+12.4
-12.4" | $AWK -f re3.awk > $OUT/re3

echo "12
+12
-12
aaa
12.3
.3
+12.4
-12.4" | $AWK -f re4.awk > $OUT/re4

echo "12
+12
-12
aaa
12.3
.3
+12.4
-12.4
12D45
+1.5e-9
-1.5Q+9
45e87
45E87" | $AWK -f re5.awk > $OUT/re5

echo "Abou
987
aa98" | $AWK -f re6.awk > $OUT/re6

echo "a
A
d9
d7
abc
987" | $AWK -f re7.awk > $OUT/re7
echo "a
A
d9
d7
abc
987" | $AWK -f re8.awk > $OUT/re8

$AWK -f p18.awk countries > $OUT/p18
$AWK -f p19.awk countries > $OUT/p19
$AWK -f p20.awk countries > $OUT/p20
$AWK -f p20a.awk countries > $OUT/p20a
$AWK -f p20b.awk countries > $OUT/p20b
$AWK -f p21.awk countries > $OUT/p21

cat << EOF > TDATA1
line one
line two
line three
line four
line five
line six
line seven
EOF
$AWK -f p22.awk TDATA1 > $OUT/p22
$AWK -f p22a.awk TDATA1 > $OUT/p22a

$AWK -f p23.awk countries > $OUT/p23
$AWK -f p24.awk countries > $OUT/p24
$AWK -f p41.awk countries > $OUT/p41
$AWK -f p42.awk countries > $OUT/p42
$AWK -f p43.awk countries > $OUT/p43

echo "1
0
3
4
0" | $AWK -f p43a.awk > $OUT/p43a

$AWK -f p32.awk countries > $OUT/p32
$AWK -f p34.awk countries > $OUT/p34

tee TDATA1 << EOF > TDATA2
line 1
line 2
line 3
EOF
$AWK -f p35.awk TDATA1 TDATA2 > $OUT/p35

cat << EOF > TDATA1
line1	1234
line2	abcd
EOF
$AWK -f p16.awk countries TDATA1 > $OUT/p16
$AWK -f p17.awk countries TDATA1 > $OUT/p17

echo "12
+12
-12
aaa
12.3
.3
+12.4
-12.4
12D45
+1.5e-9
-1.5Q+9
45e87
45E87" | $AWK -f builtup.awk > $OUT/builtup
$AWK -f p36.awk countries > $OUT/p36
$AWK -f p39.awk countries > $OUT/p39
$AWK -f p40.awk countries > $OUT/p40
$AWK -f p40a.awk > $OUT/p40a
$AWK -f p40b.awk > $OUT/p40b

$AWK -f p44.awk 4 > $OUT/p44
$AWK -f p44.awk 3 8 >> $OUT/p44
$AWK -f p44.awk 4 16 2 >> $OUT/p44

$AWK -f p45.awk countries > $OUT/p45
$AWK -f p46.awk countries > $OUT/p46
cat << EOF > TDATA1
	f2	f3	f4	f5
f1		f3	f4	f5
f1	f2		f4	f5
f1	f2	f3		f5
f1	f2	f3	f4	
f1	f2	f3	f4	f5
f1		f3		f5
EOF
$AWK -f empty.awk TDATA1 > $OUT/empty
$AWK -f revline.awk countries > $OUT/revline
$AWK -f p47.awk countries > $OUT/p47
$AWK -f p48.awk countries | sort > $OUT/p48
$AWK -f p51.awk countries > $OUT/p51	# should do nothing

echo "1 2 3
9 10 8
6 4 5
1 1 1
1 1 2" | $AWK -f p51a.awk > $OUT/p51a

$AWK -f p52.awk countries > $OUT/p52

(cd $OUT; $AWK -f $DIR/book/p53.awk $DIR/book/countries; mv bigpop p53.bigpop
 mv smallpop p53.smallpop)

(cd $OUT; $AWK -f $DIR/book/p53a.awk $DIR/book/countries; mv bigpop p53a.bigpop
 mv smallpop p53a.smallpop)

cat <<EOF > TDATA1
p53b.a line1
p53b.a line2
p53b.b line1
p53b.b line2
EOF
(cd $OUT; $AWK -f $DIR/book/p53b.awk $DIR/book/TDATA1)

$AWK -f p54.awk countries > $OUT/p54

cat << EOF > TDATA1
file 1	line 1
file 1	line 2
#include "TDATA2"
file 1	line 4
file 1	line 5
EOF
cat << EOF > TDATA2
file 2 line 1
file 2 line 2
file 2 line 3
EOF
$AWK -f p60.awk TDATA1 > $OUT/p60
$AWK -f p61.awk arg1 arg2 arg3 arg4 > $OUT/p61
$AWK -f p62.awk TDATA1 > $OUT/p62	# reuse data from p60.awk

sed "s:^awk:$AWK:" < field.awk > field1
cat << EOF > TDATA1
a b c d e f
g h i j k l
m n o p q r
EOF
cat << EOF > TDATA2
s t u v w x
y z 1 2 3 4
EOF
sh ./field1 1 3 5 TDATA1 TDATA2 > $OUT/field
rm -f TDATA1 TDATA2 field1

# chapter 3

DATA=/tmp/data$$
cat >$DATA <<'!'
0	0	Computer
0	1	System
0	0	Bourne-again
1	1	The
2	5	System
5	19	USENET
5	19	USENET
11	11	Rogue
11	11	Rogue
30	300	Magnetic
40	100	nag
50	400	Mac
!

$AWK -f sum1 $DATA >$OUT/sum1
$AWK -f sum2 $DATA >$OUT/sum2
$AWK -f sum3 $DATA >$OUT/sum3

cat << EOF | $AWK -f 3-4.ans >$OUT/3-4.ans
gears 2
wheels 1
knobs 5
windows 3
knobs 6
gears 9
windows 2
wheels 4
EOF

$AWK -f percent $DATA >$OUT/percent
$AWK -f histogram $DATA >$OUT/histogram

sed "s:awk:$AWK:g" < hist.sh > HISTRUN
sh ./HISTRUN >$OUT/hist.sh

sed "s:awk:$AWK:g" < hist.sh | sed 's/histogram/histans1.awk/' > HISTRUN
sh ./HISTRUN >$OUT/histans1
rm -f ./HISTRUN

cat >$DATA <<'!'
22,464
1,117
22,711
26,000
1,720
1,200
27,920
2,400
5,000
300
320
8,020
500
700
1,600
1,000
3,800
-1,000
40,950
15,000
!
$AWK -f sumcomma $DATA >$OUT/sumcomma

$AWK -f addcomma.ans $DATA >$OUT/addcomma.ans
$AWK -f addcomma.ans2 $DATA >$OUT/addcomma.ans2

cat >$DATA <<'!'
0
-1
-12.34
12345
-1234567.89
-123.
-123456
!
$AWK -f addcomma $DATA >$OUT/addcomma
$AWK -f datecvt date.data >$OUT/datecvt

cat << EOF | $AWK -f daynum >$OUT/daynum
1959 12 15
1961  6  7
1969 10  6
1936 10 15
1929 11 28
EOF

$AWK -f nm.format nm.output >$OUT/nm.format
$AWK -F'	' '
/^check/ { check = $2 }
/^to/	{ to = $2 }
/^amount/ { amount = $2 }
/^$/	{
	if (check != "" && to != "" && amount != "")
		print check "	" amount "	" to
	check = ""
	to = ""
	amount = ""
}' checks.data >$DATA
$AWK -f prchecks $DATA >$OUT/prchecks

$AWK -f checkfix.ans $DATA >$OUT/checkfix.ans

cat >$DATA <<'!'
root::0:0:Computer Science SUN4,002C,6501,6543:/:/bin/csh
sysdiag://vP86iOX431A:0:1:System Diagnostics:/usr/diag/sysdiag:/usr/diag/sysdiag/sysdiag
toor:0:0:Bourne-again Superuser,,,:/:
daemon:*:1:1:The devil himself,,,:/:
operator:*:2:5:System operator,,,:/etc/dumpdir:/bin/csh
news:*:5:19:USENET News,,,:/usr/lib/news:/bin/csh
usenet:*:5:19:USENET News,,,:/usr/lib/news:
games:*:11:11:Rogue of the Games Cathedral,,,:/usr/games:/bin/csh
play:*:11:11:Rogue of the Games Cathedral,,,:/usr/games:/bin/csh
tapemgr:*:30:300:Magnetic Tape Manager,,,:/:/bin/csh
naghelp:*:40:100:nag online help,,,:/usr/fiction/naghelp:/bin/csh
mac:SY.prE93eAVNU:50:400:Mac Sources maintained by R. Holmes,,,:/usr/fiction/mac:/bin/csh
udalstat:ug/NiM/WlOnv6:66:1:dalstat UNIX-to-UNIX Copy,,,:/usr/spool/uucppublic:/usr/lib/uucp/uucico
!
$AWK -f passwd $DATA >$OUT/passwd
$AWK -F: -f colcheck $DATA >$OUT/colcheck
$AWK -f checkgen checkgen.data >$OUT/checkgen
$AWK -F: -f $OUT/checkgen $DATA >$OUT/checkgen.out

(cat checkgen.data
echo '=BEGIN	{ FS = ":" }') > /tmp/data2.$$
$AWK -f valid.ans /tmp/data2.$$ > $OUT/valid
$AWK -f $OUT/valid $DATA > $OUT/valid.out
rm /tmp/data2.$$

cat >$DATA <<!
.P1
.P2
.P1
.P2
.P1
.P1
.P2
!
$AWK -f p12check $DATA >$OUT/p12check

cat >$DATA <<!
aa
bb
cc
dd
ee
ff
aa
aa
bb
!
$AWK -f delim.ans $DATA >$OUT/delim.ans

$AWK -f compat compat >$OUT/compat

$AWK -f bundle s* |
	(cd $OUT; mkdir bundle.out; cd bundle.out; $AWK -f $DIR/book/unbundle)
$AWK -f ny1.awk addr.1 >$OUT/ny1
$AWK -f ny2.awk addr.1 >$OUT/ny2
$AWK -f smith.awk addr.1 >$OUT/smith

sed "s:awk:$AWK:g" < msort.sh > MSORT.RUN
sh ./MSORT.RUN <addr.1 >$OUT/msort
rm -f ./MSORT.RUN

$AWK -f doctors1.awk addr.2 >$OUT/doctors1
$AWK -f doctors2.awk addr.2 >$OUT/doctors2
$AWK -f check1 checks.data >$OUT/check1
$AWK -f check2 checks.data >$OUT/check2
$AWK -f check3 checks.data >$OUT/check3

# chapter 4

$AWK -f prep1 countries > $OUT/prep1
$AWK -f form1 < $OUT/prep1 > $OUT/form1
$AWK -f prep2 countries > $OUT/prep2
$AWK -f form2 < $OUT/prep1 > $OUT/form2	# < prep1 on purpose, see p. 92

$AWK -f prep3 pass=1 countries pass=2 countries > $OUT/prep3
$AWK -f form3 < $OUT/prep3 > $OUT/form3
$AWK -f form4 < $OUT/prep3 > $OUT/form4

$AWK -f table countries | sort > $OUT/table
$AWK '{ print $2 }' countries | $AWK -f table1 | sort > $OUT/table1

sed "s:awk:$AWK:" < info0 > INFO
sh ./INFO > $OUT/info0

sed "s:awk:$AWK:" < info > INFO
sh ./INFO 'Can|USA' > $OUT/info

sed "s:awk:$AWK:" < info.ans > INFO
sh ./INFO 'Can|USA' > $OUT/info.ans

sed "s:awk:$AWK:" < info1.ans > INFO
sh ./INFO 'Can|USA' > $OUT/info1.ans

rm -f ./INFO

echo "Canada:25:3.852:6.5:" | $AWK -f form.gen > $OUT/form.gen

sed "s:awk:$AWK:" < merge.awk > MERGE; chmod +x MERGE
sh ./MERGE > $OUT/merge

rm -f ./MERGE

sort capitals > T1
sort countries > T2
$AWK -f join.awk T1 T2 > $OUT/join
rm -f ./T1 ./T2

$AWK -f qawk avgarea.awk > $OUT/qawk
$AWK -f qawk1.ans avgarea.awk > $OUT/qawk1.ans

# chapter 5

$AWK -f randint > $OUT/randint	# should be empty
$AWK -f randlet > $OUT/randlet	# should be empty
$AWK -f choose > $OUT/choose	# should be empty

cat << EOF | $AWK -f comb.ans | sort > $OUT/comb.ans
24 9830
16 3682
21 533
11 26720
16 31319
19 1659
25 4656
10 2312
12 28482
EOF
$AWK -f bridge.ans > $OUT/bridge.ans
cat << EOF > CLICHE.DAT
A rolling stone:gathers no moss.
History:repeats itself.
He who lives by the sword:shall die by the sword.
A jack of all trades:is master of none.
Nature:abhors a vacuum.
Every man:has a price.
All's well:that ends well.
EOF
$AWK -f cliche CLICHE.DAT | sed 20q > $OUT/cliche
rm -f CLICHE.DAT

echo "Sentence
Nounphrase
Verbphrase
Verb
Modlist
Adverb
Junk" > SENT.DAT
$AWK -f sentgen < SENT.DAT > $OUT/sentgen
$AWK -f sentgen1 < SENT.DAT > $OUT/sentgen1
$AWK -f sentgen2 < SENT.DAT > $OUT/sentgen2
rm -f SENT.DAT

#### these next three programs really should be tested by hand...
echo "10
12
23
45
67
87
54
32
17
32" | $AWK -f arith > $OUT/arith
echo "10
12
23
45
67" | $AWK -f arith 5 > $OUT/arith.5

echo "H
O
Ne
S
Cl
Ar
V
Cr
Mn
Cu
Se
Nb
Eu
Re
Os
Fr
Ra
Pa
U
Np
Pu
No
Lw" | $AWK -f quiz quiz.elems name symbol > $OUT/quiz

$AWK -f wordfreq ../manpage > $OUT/wordfreq
$AWK -f fmt ../manpage > $OUT/fmt
$AWK -f fmt.just ../manpage >  $OUT/fmt.just

$AWK -f xref xref.data | tee xref.temp > $OUT/xref.temp
$AWK -f xref.temp xref.data > $OUT/xref.final

$AWK -f xref.ans xref.data | tee xref.temp > $OUT/xref.ans.temp
$AWK -f xref.temp xref.data > $OUT/xref.ans.final

$AWK -f xref1.ans xref.data > $OUT/xref1.ans

rm -f xref.temp

sed "s;awk;$AWK;" < kwic > T
sh T < say.in.kwic > $OUT/kwic

sed "s;awk;$AWK;" < kwic.ans > T
sh T < say.in.kwic > $OUT/kwic.ans

rm T

sh ix.sort1 < ix.raw | tee $OUT/ix.raw.out |
$AWK -f ix.collapse | tee $OUT/ix.collapse |
$AWK -f ix.rotate | tee $OUT/ix.rotate |
$AWK -f ix.genkey | tee $OUT/ix.genkey |
sh ix.sort2 | tee $OUT/ix.format.in |
$AWK -f ix.format > $OUT/ix.format

# chapter 6

cat >DATA <<!
12
34
56
78
23
45
67
89
0
!
$AWK -f asm sum.asm DATA >$OUT/asm 
rm -f asm.temp
cat >DATA <<'!'
label Testing Graph
range 1920 5000 1990 60000
left ticks 10000 30000 50000
bottom ticks 1930 1940 1950 1960 1970 1980
1925 21800
1930 31050
1935 36369
1940 32000
1945 29000
1950 30000
1955 36000
1960 40000
1965 45000
1970 55000
1975 48000
1980 50000
1985 47000
!
$AWK -f graph DATA >$OUT/graph
rm -f DATA
$AWK -f sortgen sortgen.in >$OUT/sortgen
$AWK -f awk.parser <parser.in >$OUT/awk.parser
$AWK -f calc1 >$OUT/calc1 <<'!'
1 2 + 3 4 - * 5 /
!
$AWK -f calc2 >$OUT/calc2 <<'!'
0 -1 atan2 pi=
pi
355 113 / x= x
x pi /
2 sqrt
!
$AWK -f calc3 >$OUT/calc3 <<'!'
1 + 2 * 3
( 1 + 2 ) * 3
4 / 7 + 12 * 1.2
2 + 3 * ( 23 / 4
!

# chapter 7

$AWK -f isort.awk countries >$OUT/isort
$AWK -f iisort.awk countries >$OUT/iisort
$AWK -f ptest.awk >$OUT/ptest
$AWK -f scaff.awk >$OUT/scaff <<!
10 random
isort
10 reverse
qsort
data now is the time for all good men
hsort
!
# gawk seems to loop forever on this, so we skip it if we're gawk
case "$AWK" in
#*gawk*)		;;
*)
$AWK -f frame.awk >$OUT/frame <<!
isort random 0 20 40 
qsort reverse 0 20 40 
hsort random 0 20 40 
!
;;
esac
$AWK -f makeprof hsort.awk >heapsort.p
$AWK -f heapsort.p countries >$OUT/heapsort.p
$AWK -f printprof hsort.awk >$OUT/printprof
cp heapsort.p $OUT/heapsort.p.awk
rm -f heapsort.p prof.cnts
$AWK -f tsort.awk >$OUT/tsort <<!
a h
b g
c f
c h
d i
e d
f b
h d
h e
i b
!
$AWK -f rtsort.awk >$OUT/rtsort <<!
a h
b g
c f
c h
d i
e d
f b
h d
h e
i b
!
cat >makefile <<!
prog:	a.o b.o c.o
	cc a.o b.o c.o -ly -o prog
a.o:	prog.h a.c
	cc -c prog.h a.c
b.o:	prog.h b.c
	cc -c prog.h b.c
c.o:	c.c
	cc -c c.c
c.c:	c.y
	yacc c.y
	mv y.tab.c c.c
print:
	pr prog.h a.c b.c c.y
!
sed 's/system/fakesystem/g' make.awk > fmake.awk
echo 'function fakesystem(s) { printf "system:%s", s }' >> fmake.awk
touch c.y prog.h a.c b.c
$AWK -f fmake.awk prog >$OUT/make
rm -f c.y prog.h a.c b.c c.c
rm -f makefile fmake.awk
