Archimedes Keyboard protocol
----------------------------
This information may be slightly out-of-date (since it is culled from a old
document). The following marked text is copied directly from some text by
JThackray of Acorn, 7th June 1987.

--- copied document start --------------------------------------------------

The ARM to keyboard connection is essentially a half duplex connection with
hand-shaking by the ARM, plus a small amount of command protocol by the ARM.
Overrun in the keyboard is avoided partly by the half duplex nature of the
connection and partly by a sufficiently low interrupt latency.
Overrun in the ARM is avoided by acknowledging precisely when a byte is
received, and at no other time. When the keyboard has sent a byte, in normal
operation, it will not respond further until it has received an Ack from the
ARM.
The only exception to this is during the reset protocol used to synchronise
the handshaking, where each side is expecting specific responses from the
other, and will not respond further until it has those. Unexpected responses
cause the reset sequence to be restarted. Timeout by the ARM should take
some appropriate action such as informing the user his keyboard isn't
plugged in, or is naff. Timeout by the keyboard doesn't exist, as there is
nothing it could usefully do. In addition to this simple handshaking system,
the keyboard will not send mouse data unless specifically allowed to, as
indicated by Ack Mouse, which allows the transmission of one set of
accumulated mouse coordinate changes, or the next move made by the mouse.
While it is not allowed to send mouse changes the keyboard will buffer mouse
changes, though if these become large they will become meaningless. A similar
handshake exists on key changes, transmitted as key up and key down, and
enabled by Ack Scan. At the end of a keyboard packet (two bytes) ARM should
always Ack Scan, there is no protocol for re-enabling later. With the mouse
the situation is different, the ARM may request mouse data some time later
by means of request mouse position.

--- copied document end ----------------------------------------------------

Protocol
========

Keyboard to ARM
---------------

      Reset           1xxxxxxx        1byte
      Key up          0011xxxx        2bytes (row nybble then column nybble)
      Key down        0010xxxx        2bytes (row nybble then column nybble)
      Mouse change    01xxxxxx        2bytes (X (6bits) then Y (6bits))
      SPD data        0000xxxx        1byte
      Keyboard ID     0001xxxx        2bytes (lo nybble then hi nybble)

ARM to keyboard
---------------

      LED on          0000xxxx        1byte
      LED off         0001xxxx        1byte
      Request         0010xxxx        1byte
      Ack             0011xxxx        1byte
      SPD data        0100xxxx        1byte (nybble to be converted)
      Reset           1xxxxxxx        1byte

Reset types
-----------

      Hard reset      11111111        1byte
      Reset ack 1     11111110        1byte
      Reset ack 2     11111101        1byte

Request types
-------------

      KbID            00100000        1byte
      SPDReset        00100001        1byte
      Mouse position  00100010        1byte

Ack types
---------

      Byte            00110000        1byte
      Scan            00110001        1byte (keyboard scanning may resume)
      Mouse           00110010        1byte (more changes may be queued)

Reset sequencing
----------------

              sends         expected reply    on bad reply    on timeout
    =======================================================================
    ARM->KB   Hard reset    Hard reset        Resend          Resend
    KB->ARM   Hard reset    Reset ack 1       Resend          Nothing
    ARM->KB   Reset ack 1   Reset ack 1       Hard reset      Hard reset
    KB->ARM   Reset ack 1   Reset ack 2       Nothing         Nothing
    ARM->KB   Reset ack 2   Reset ack 2       Hard reset      Hard reset
    KB->ARM   Reset ack 2   Ack Scan          Nothing         Nothing
    =======================================================================

The the received receives any of the above commands unexpectedly then it
should initiate a Hard reset sequence by replying with the Hard reset
command.

---------------------------------------------------------------------------

Archimedes keyboard key up/down events
======================================

Column 0
--------
        Escape          &00
        f1              &01
        f2              &02
        f3              &03
        f4              &04
        f5              &05
        f6              &06
        f7              &07
        f8              &08
        f9              &09
        f10             &0A
        f11             &0B
        f12             &0C
        Print           &0D          ; (f0)
        ScrollLock      &0E
        Break           &0F

Column 1
--------
        backtick        &10
        1               &11
        2               &12
        3               &13
        4               &14
        5               &15
        6               &16
        7               &17
        8               &18
        9               &19
        0               &1A
        minus           &1B
        equals          &1C
        pound           &1D
        backspace       &1E
        Insert          &1F          ; (f13)

Column 2
--------
        Home            &20
        PageUp          &21
        NumLock         &22
        pad_slash       &23
        pad_star        &24
        pad_hash        &25
        Tab             &26
        Q               &27
        W               &28
        E               &29
        R               &2A
        T               &2B
        Y               &2C
        U               &2D
        I               &2E
        O               &2F

Column 3
--------
        P               &30
        leftbracket     &31
        rightbracket    &32
        backslash       &33
        Delete          &34
        Copy            &35
        PageDown        &36
        pad_7           &37
        pad_8           &38
        pad_9           &39
        pad_minus       &3A
        LeftCtrl        &3B
        A               &3C
        S               &3D
        D               &3E
        F               &3F

Column 4
--------
        G               &40
        H               &41
        J               &42
        K               &43
        L               &44
        semicolon       &45
        apostrophe      &46
        Return          &47
        pad_4           &48
        pad_5           &49
        pad_6           &4A
        pad_plus        &4B
        LeftShift       &4C
        {not fitted}    &4D     ; international keyboard key
        Z               &4E
        X               &4F

Column 5
--------
        C               &50
        V               &51
        B               &52
        N               &53
        M               &54
        comma           &55
        dot             &56
        slash           &57
        RightShift      &58
        CursorUp        &59
        pad_1           &5A
        pad_2           &5B
        pad_3           &5C
        CapsLock        &5D
        LeftAlt         &5E
        Space           &5F

Column 6
--------
        RightAlt        &60
        RightCtrl       &61
        CursorLeft      &62
        CursorDown      &63
        CursorRight     &64
        pad_0           &65
        pad_dot         &66
        pad_Enter       &67

Column 7
--------
        MouseLeft       &70
        MouseCentre     &71
        MouseRight      &72

NOTE: The Column 7 keys are actually the mouse buttons. The {not fitted}
      keys should still be passed through, though the standard keyboard
      is not capable of generating this code.

----------------------------------------------------------------------------

The IOC controller is at physical address &03200000.

The IOC section in the ARM data-sheet book includes a description of the
keyboard serial Rx and Tx registers. It is worth reading everything about
the KART (especially the sections that refer to figures 5, 6 and 8
(pages 102 and 103)).

----------------------------------------------------------------------------
