-- File:	armextra.a
-- Subsystem:	ARM executive
-- Author:	P.A.Beskeen
-- Date:	Oct '92
--
-- Description: Helios-ARM specific kernel functions.
--
--
-- RcsId: $Id: armextra.a,v 1.1 1993/08/24 15:17:14 paul Exp $
--
-- (C) Copyright 1992 Perihelion Software Ltd.
--     All Rights Reserved
-- 
-- RcsLog: $Log: armextra.a,v $
-- Revision 1.1  1993/08/24  15:17:14  paul
-- Initial revision
--
--
--

include ../gexec.m	-- Executive manifests
include module.m
include ARM/trap.m

-- @@@ TMP DBG function
-- Return PC + PSR flags.

	Function _pcreg

	mov	a1, pc
	movs	pc, lr


-- void KernelEnterSVCMode(void);
--
-- Return in SVC mode to caller. Note that this currently this
-- returns with all interrupts enabled.
--
-- This function is provide for use within the kernel to enter SVC mode from
-- User mode. The normal EnterSVCMode() function cannot be called as it expects
-- to have been called via the trap handler. This function forces a SWI call
-- to EnterSVCMode as kernel functions don't normally go through the trap
-- handler.

	Function KernelEnterSVCMode

	_if _defp '__ARM6 [
		error "@@@ KernelEnterSVCMode not defined for ARM6"
	]

	swi	TRAP_EnterSVCMode
	mov	pc, lr		-- note mov, not movs


-- void EnterSVCMode(void);
--
-- Return in SVC mode to caller. Note that this currently this
-- returns with all interrupts enabled.

	Function EnterSVCMode

	_if _defp '__ARM6 [
		error "@@@ EnterSVCMode not defined for ARM6"
	]

	-- Thanks to SWI Trap_handler, we are now in SVC mode with User mode
	-- stack copied to the banked SVC stack pointer.
	orr	r14_svc, SVCMode	-- update link with SVCMode, maintaining
					-- the existing interrupt mask.
	mov	a1, r14_svc
					-- As we are about to swap modes,
	stmib	sp, {lr}^		-- get User mode link register
	ldr	lr, (sp, 4)		-- into SVC link reg.

	orr	lr, SVCMode		-- update link with SVCMode.
	movs	pc, a1			-- banch back to caller



-- void EnterUserMode(void);
--
-- Return in User mode to caller. Note that this currently this
-- returns with all interrupts enabled.

	Function EnterUserMode

	_if _defp '__ARM6 [
		error "@@@ EnterUserMode not defined for ARM6"
	]

	-- Swap back to User mode stack (the SVC mode SWI Trap_Handler
	-- doesn't alter the stack).
	str	sp, (sp, 4)
	ldmib	sp, {sp}^

	-- Note next instruction doesn't access banked regs
	-- (guard banked regs access against mode change ARM bug)
	nop

	-- Revert link register to User mode and return.
	_test _defp '__ARM6 [
		error "@@@ Need to set user mode for ARM6."
	][
		bic	r14_svc, ModeMask
		movs	pc, r14_svc
	]



-- void EnableIRQ(void);
--
-- Enable IRQ in processors interrupt mask.

	Function EnableIRQ

	_if _defp '__ARM6 [
		error "@@@ EnableIRQ not defined for ARM6"
	]

	-- Dont use teqp or we will not return using correct lr
	bic	r14_svc, IRQDisable
	movs	pc, r14_svc


-- void DisableIRQ(void);
--
-- Disable IRQ in processors interrupt mask.

	Function DisableIRQ

	_if _defp '__ARM6 [
		error "@@@ DisableIRQ not defined for ARM6"
	]

	-- Dont use teqp or we will not return using correct lr
	orr	r14_svc, IRQDisable
	movs	pc, r14_svc


-- void EnableFIQ(void);
--
-- Enable FIQ in processors interrupt mask.

	Function EnableFIQ

	_if _defp '__ARM6 [
		error "@@@ EnableFIQ not defined for ARM6"
	]

	-- Dont use teqp or we will not return using correct lr
	bic	r14_svc, FIQDisable
	movs	pc, r14_svc


-- void DisableFIQ(void);
--
-- Disable FIQ in processors interrupt mask.

	Function DisableFIQ

	_if _defp '__ARM6 [
		error "@@@ DisableFIQ not defined for ARM6"
	]

	-- Dont use teqp or we will not return using correct lr
	orr	r14_svc, FIQDisable
	movs	pc, r14_svc




-- end of armextra.a

