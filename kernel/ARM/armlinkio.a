-- File:	armlinkio.a
-- Subsystem:	ARM Helios executive
-- Author:	P.A.Beskeen
-- Date:	Sept '92
--
-- Description: *TEMPLATE FILE*
--		ARM specific low level link I/O functions
--
--		These functions implement the lowest level link I/O routines.
--		Both the blocking and non-blocking variants.
--
--
-- RcsId: $Id: armlinkio.a,v 1.2 1993/08/24 08:41:11 paul Exp $
--
-- (C) Copyright 1992 Perihelion Software Ltd.
-- 
-- RcsLog: $Log: armlinkio.a,v $
-- Revision 1.2  1993/08/24  08:41:11  paul
-- Integrated latest ARM world with Heliosv1.3.1 release.
-- (CheckPoint).
--
-- Revision 1.1  1992/09/25  15:49:45  paul
-- Initial revision
--
--

include ../gexec.m	-- Executive manifests
include link.m
include root.m
include module.m


-- void InitLink(word channel)
--
-- Sets up input and output interrupt handlers for given link channel. 
--
-- channel == channel number
--
-- Called from C so must be PCS conformant.

	Function InitLink

	movs	pc, lr

	
-- void ResetLinkHardware(void);
--
-- This is called if another processor requests this one to terminate.
-- It is only useful on multiprocessor systems.
--
-- Reset all on-chip links, AbortLinkTx/Rx has already been called to cancel
-- any outstanding transfers.
--
-- Called by C so must conform to PCS.
-- Assumes user mode.
--

	Function ResetLinkHardware

	movs	pc, lr


-- void _LinkTx(word size, Channel link, void *buf);
--
-- Simple blocking link reception function. This is used to send a bogus Info
-- message when debugging early versions of the kernel.
--
-- size: number of bytes to send
-- link: ptr the link control register
-- buf: ptr to buffer holding data
--
-- Called from C so must be PCS conformant

	Function _LinkTx

	movs	pc, lr


-- void _LinkRx(word size, Channel link, void *buf);
--
-- Simple blocking link reception function. This is used to get config vector
-- in kernel startup.
--
-- size: number of bytes to read
-- link: ptr to the link control register
-- buf: ptr to buffer to hold the data
--
-- Called from C so must be PCS conformant

	Function _LinkRx

	movs	pc, lr


-- void __LinkTx(LinkInfo *link, word linkId, word size, void *buf)
--
-- Sets up and starts a non-blocking transfer to a communications link
--
-- Called from C so must be PCS conformant

	Function __LinkTx


-- void __LinkRx(LinkInfo *link, word linkId, word size, void *buf)
--
-- Sets up and starts a non-blocking transfer from a communications link
--
-- Called from C so must be PCS conformant

	Function __LinkRx

	movs	pc, lr


-- void _AbortLinkTx(LinkInfo *link, word linkId)
--
-- Abort the current Tx on the communication link
--
-- Called from C so must be PCS complient

	Function _AbortLinkTx

	movs	pc, lr


-- void _AbortLinkRx(Linkinfo *link, word linkId)
--
-- Abort the current Rx on the communication link
--
-- Called from C so must be PCS complient

	Function _AbortLinkRx

	movs	pc, lr



-- end of armlinkio.a
