-- File:	c40boot.a
-- Subsystem:	'C40 Helios executive
-- Author:	P.A.Beskeen
-- Date:	Nov '91
--
-- Description: 'C40 specific initial boot code.
--
--		This code is downloaded using the on-chip 'C40 boot sequence.
--		It is booted into internal RAM, where upon it initialises the
--		'C40 and updates the ExecRoot with the contents of the ID-ROM.
--		The nucleus load position is calculated, the execroot updated
--		with this information and the nucleus is then downloaded.
--		Finally a C PCS conformant world is set up and we jump into
--		the kernel.
--
-- RcsId: $Id: c40boot.a,v 1.23 1993/09/17 16:03:19 paul Exp $
--
-- (C) Copyright 1991 Perihelion Software Ltd.
-- 
-- RcsLog: $Log: c40boot.a,v $
-- Revision 1.23  1993/09/17  16:03:19  paul
-- fixes for high memory access - now uses unsigned compares.
--
-- Revision 1.21  1993/09/06  12:02:44  paul
-- removed HUNTDBG option - no longer a bug and it was confusing.
--
-- Revision 1.20  1993/08/16  08:48:56  richardp
-- memory sizing even when noTCLK0Reset
--
-- Revision 1.19  1993/08/16  08:39:17  richardp
-- Automatic memory sizing
--
-- Revision 1.18  1993/07/02  09:57:31  nickc
-- removed fix for SANG board
--
-- Revision 1.17  1993/04/27  11:51:21  nickc
-- fixed for SANG board IDROM read
--
-- Revision 1.16  1993/04/21  08:52:34  nickc
-- Changed the way IR0 is calculated.
--
-- Revision 1.15  1993/04/16  12:25:26  nickc
-- Four bit IDrom bugs fixed.  (You got it wrong again Paul!)
--
-- Revision 1.14  1993/04/01  16:59:34  nick
-- If the local RAM is in the first 3Mwords of quadrant 2, the address base
-- is set to 0x002ff0000 to allow both it and the on-chip RAM to be addressed.
--
-- Revision 1.13  1993/02/05  13:25:09  paul
-- fixed HW_Disable cache bug
--
-- Revision 1.12  1993/01/21  09:56:30  paul
-- Bootstrap now records HWConfig word in the ExecRoot for the networking
-- software to use as the default when booting other processors. It gets
-- this info via the Fn GetHWConfig().
--
-- Revision 1.11  1992/11/20  15:46:23  paul
-- if the base+size of strobe used as data is within the first quadrant of
-- memory, then set IR0 address base as zero to keep ONCHIP RAM and periperals
-- in addressablity
--
-- Revision 1.10  1992/11/18  14:33:45  paul
-- big changes. Added support for HW_Config word to select the nucleus load
-- address, the C address base IR0 is setup correctly, and full C40Word/CAddress
-- macros are used. The nucleus load address is now passed as a word pointer,
-- and also saved in the ExecRoot as a WPTR.
--
-- Revision 1.9  1992/10/09  16:51:44  nickc
-- fixed test for contents of idrom's LBASE0 value
--
-- Revision 1.8  1992/09/25  09:35:13  paul
-- changed to use gexec.m and store the initial address of the system stack
--
-- Revision 1.7  1992/09/23  17:20:15  paul
-- added moveable execroot support (tvtp)
--
-- Revision 1.6  1992/07/08  16:11:01  paul
-- added booted acknowledge word
--
-- Revision 1.5  1992/06/26  17:56:51  paul
-- added config line assert/de-assert as per TIM-40 std
--
-- Revision 1.3  1992/06/15  13:39:51  paul
-- added IDROM support
--
-- Revision 1.2  1992/05/14  08:20:57  paul
-- removed unecessary software wait states from mem ctrl regs
--
-- Revision 1.1  1992/04/21  09:54:56  paul
-- Initial revision
--
--

include basic.m
include c40.m
include tim40.m
include c40mmap.m
include ../gexec.m
include module.m
include config.m


	-----------------------------------------------------------------------
	-- The linker will prefix this code with 3 words magic/flags and size.
	-- The booting program should ignore these three words and only download
	-- 'size' bytes, jumping to the first of these.

	-- This boot code is downloaded into the second bank of on-chip RAM.
startboot:
	-- Upon entry the 'C40 will be in its reset state with interrupts
	-- disabled and AR3 points to the cpcr of the link we were
	-- booted down. This register must NOT be corrupted.

	-- Write Boot Acknowledge word to booter.
	stik	0x1, *+ar3(2)

	-- Read Hardware Config word from booter.
	ldi	*+ar3(1), r9

	-- The cache is sometimes disabled to get around C40 bugs.
	-- On revision 1 (GFL) using two strobes of differing speeds on the
	-- same address bus can cause problems with the cache enabled.
	ldi	0, st
	tstb	HW_CacheOff, r9
	bnz	DontEnableCache
	or	ST_CE, st		-- enable cache for fast boot
DontEnableCache:

	-- If we are replacing existing IDROM, then we should still go through
	-- the motions of raising and lowering the module config line and
	-- swapping out the IDROM from local memory.
	tstb	HW_PseudoIDROM, r9
	bnz	DontRaiseConfig
	-- start of bootstrap so raise TIM-40 module config line
	ldi	IIF_TYPE3 | IIF_FLAG3, r0
	ldi	r0, iif

	-- Setup ar1 to control IDROM recall and mapping.
	ldaperi timer0_control ar1	-- control addr for TCLK0 pin.
DontRaiseConfig:

	-- If we are being sent a IDROM look-alike via the link,
	-- then get it in preference to loading a firmware version.
	tstb	HW_PseudoIDROM | HW_ReplaceIDROM, r9
	bz	ReadRealIDROM

	-----------------------------------------------------------------------
	-- Read pseudo/replacement IDROM
ReadPseudoIDROM:
	ldi	*+ar3(1), r1		-- read inclusive size of H/W Config
	subi	2, r1, r0		-- init for // rpts

	OnChipRAM ar4			-- Write to IDROM's std location

	-- Download pseudo IDROM from booter into on-chip RAM bank 0.
	-- Initial size read into r1 is saved immediately.
	rpts	r0			-- loops r0 + 1
		ldi	*+ar3(1), r1 || sti	r1, *ar4++
	sti	r1, *ar4++		-- store final value

	b	InitC40

	-----------------------------------------------------------------------
	-- Read Real IDROM
ReadRealIDROM:
	-- Copy ID-ROM contents to on chip RAM.

	ldhi	0x7000, ar2	-- start address to read IDROM contents from

	-- Remember what type of IDROM is being used in r0
	-- hi = 1bit, lo = 4bit serial IDROM's
	ldi	*ar1, r0

	-- Init sequence for IDROM load.
	-- Enables the use of EEPROMS as their recall can be activated with
	-- this sequence.
	stik	tcr_io, *ar1		-- TCLK0 = output + output 0
	ldi	2000, r1		-- 200uS delay on 50Mhz C40
delay0:
	subi	1, r1
	bnz	delay0

	stik	tcr_io|tcr_datout, *ar1	-- TCLK0 = output + output 1
	ldi	2000, r1		-- 200uS delay on 50Mhz C40
delay1:
	subi	1, r1
	bnz	delay1

	stik	tcr_io, *ar1		-- TCLK0 = output + output 0
	ldi	2000, r1		-- 200uS delay on 50Mhz C40
delay2:
	subi	1, r1
	bnz	delay2

	stik	tcr_io|tcr_datout, *ar1		-- TCLK0 = output + output 1

	-- Find out what type of IDROM is being used.
	and	tcr_datin, r0	-- Timer 0 DATAIN (TCLK0) bit
	bz	fourbitread	-- TCLK0 hi = 1 bit ID ROM
				--	 lo = 4 bit ID ROM

	-----------------------------------------------------------------------
	-- Read one bit IDROM
onebitread:
getidsize:
	ldi	31, rc		-- load 32 bits at a time
	rptb	endblock0
	ldi	*ar2++, r2	-- get a bit
	lsh	-1, r2		-- shift bit into carry
endblock0:
	rorc	r3		-- rotate r3 with input from carry

	ldi	r3, r0		-- amount of ID ROM data to read
	bz	InitC40		-- if size is zero end IDROM load sequence


getdest:
	ldi	31, rc		-- load 32 bits at a time
	rptb	endblock1
	ldi	*ar2++, r2	-- get a bit
	lsh	-1, r2		-- shift bit into carry
endblock1:
	rorc	r3		-- rotate r3 with input from carry

	ldi	r3, ar4		-- address to download data to


dataloop:
	ldi	31, rc		-- load 32 bits at a time
	rptb	endblock2
	ldi	*ar2++, r2	-- get a bit
	lsh	-1, r2		-- shift bit into carry
endblock2:
	rorc	r3		-- rotate r3 with input from carry

	sti	r3, *ar4++	-- store in internal memory

	subi	1, r0		-- read fixed ID-ROM block size
	bnz	dataloop

	b	onebitread

	-----------------------------------------------------------------------
	-- Read four bit IDROM
	-- @@@ Four bit IDROM code has never been tested as no H/W we have
	-- come across has implemented it yet.
fourbitread:
	
get4idsize:
	ldi	0, r1		-- initial shift position
        ldi     0, r3           -- initialise resultant word
	ldi	32/4-1, rc	-- load 8 four bit chunks per word
	rptb	end4block0
	ldi	*ar2++, r2	-- get 4 bits
	and	0xf, r2		-- might not actually have to do this, best safe
	lsh	r1, r2
	or	r2, r3		-- insert into correct pos in r3
end4block0:
	addi	4, r1

	ldi	r3, r0		-- amount of ID ROM data to read
	bz	InitC40		-- if size is zero end IDROM load sequence

get4dest:
	ldi	0, r1		-- initial shift position
        ldi     0, r3           -- initialise resultant word
	ldi	32/4-1, rc	-- load 8 four bit chunks per word
	rptb	end4block1
	ldi	*ar2++, r2	-- get 4 bits
	and	0xf, r2
	lsh	r1, r2
	or	r2, r3		-- insert into correct pos in r3
end4block1:
	addi	4, r1

	ldi	r3, ar4		-- address to download data to

data4loop:
	ldi	0, r1		-- initial shift position
        ldi     0, r3           -- initialise resultant word
	ldi	32/4-1, rc	-- load 8 four bit chunks per word
	rptb	end4block2
	ldi	*ar2++, r2	-- get 4 bits
	and	0xf, r2
	lsh	r1, r2
	or	r2, r3		-- insert into correct pos in r3
end4block2:
	addi	4, r1

	sti	r3, *ar4++	-- store in internal memory

	subi	1, r0		-- read fixed ID-ROM block size
	bnz	data4loop

	b	get4idsize


	-----------------------------------------------------------------------
	--  Check for zero memory sizes and calculate them
InitC40:

	ldperimap ar0

	OnChipRAM ar5		-- Std IDROM's always load first block here

	-- global mem reg
	ldi     *+ar5(IDROM.GBCR), r0
	sti     r0, *+ar0(gmem_control)

	-- local mem regB
	ldi	*+ar5(IDROM.LBCR), r0
	sti	r0, *+ar0(lmem_control)

	-- setup timer 0 for a 1mS period, but do not start it
	ldi	*+ar5(IDROM.TIMER0_PERIOD), r0
	sti	r0, *+ar0(timer0_period)

	-- setup timer 1 as this may be needed for DRAM refresh
	ldi	*+ar5(IDROM.TIMER1_PERIOD), r0
	sti	r0, *+ar0(timer1_period)

	ldi	*+ar5(IDROM.TIMER1_CTRL.w_offset), r0
	-- Timer1 actually in upper 16 bits of word
	lsh	-IDROM.TIMER1_CTRL.shift, r0
	-- set the timer to run on when a JTAG halt is in effect
	-- this ensures that DRAM refresh continues.
	ldhi	((tcr_dbgcont1 | tcr_dbgcont2) >> 16) & 0xffff, r1
	or	r1, r0
	sti	r0, *+ar0(timer1_control)

	tstb	HW_PseudoIDROM, r9
	bnz	NoTCLK0Reset
	-- Allow normal accesses to Local RAM, not ID ROM.
	stik	tcr_io, *ar1		-- TCLK0 = output + output 0
NoTCLK0Reset:

	ldi    *++ar5(IDROM.GBASE0),R0
	ldi    4,R7                 --  4 memory chunks to investigate
nextstrobe:
	LDI    *ar5,AR1             --  Move Address into address register
	LDI    *+ar5(1),R10         --  Set the artificial limit
	CMPI   1,R7                 --  usually next entry,  but last one
	BNE    notlast              --  is the first entry
	LDI    *-ar5(3),R10         --  so get that instead
notlast:
	LDI    *+ar5(4),R0          --  Get size as specified in IDROM
	Bne    dunstrobe            --  Check if size is zero
	LDI    -1,r0                --  Check if address is ffffffff
	CMPI   r0,AR1               --  by comparing to -1
	Beq    dunstrobe            --  and do nothing on strobe if it is
    --   Else we are going to size the memory ourselves
    --   Main problem is to set a limit to where we look
	LDI    0x1000,R1            --  set stride - 16384 bytes
	LDI    0xc40,R2             --  set an arbitrary constant to R2
	STI    R2,*AR1              --  and put that in the first word
	STI    R1,*+AR1(1)
	LDA    AR1,AR2              --  set pointer to current check area
	CMPI   R2,*AR1
        Bne    gotall
lookmore:
	ADDI   R1,AR2               --  point to one stride further up
	LDI    AR2,R3               --  get the address to compute
	ADDI   R2,R3                --  another arbitrary value from it
	STI    R3,*AR2              --  and put that into new location
	CMPI   R2,*AR1              --  check to see if first word still OK
	Bne    gotall               --  and if not,  that is the lot!
	CMPI   AR1,R10              --  have we got to limit value
	Beq    gotall               --  yes - that's the lot
	LDI    *AR2,R6              --  now re-get the current check value
	CMPI   R3,R6                --  and check that is what we stored
	Beq    lookmore             --  if equal,  look for more memory
gotall:
	SUBI3  AR1,AR2,R0           --  subtract original from failed
	sti    R0,*+ar5(4)          --  put size into position
dunstrobe:
	LDI    *++ar5(1),R0         --  increment strobe pointer
	SUBI   1,R7                 --  subtract 1 from the number to do
	Bne    nextstrobe           --  repeat for next strobe if need be


	OnChipRAM ar5		-- Std IDROM's always load first block here



-------------------------------------------------------------------------------
-- Setup basic memory map.
--
--
-- Global Bus:
--
--	Hi loaded Nucleus
--	------------------

-- Local Bus:
--	     Hi addr.
--
--	------------------
--	Trace Vector
--	------------------
--
--	Poss. strobe 1 mem
--
--	------------------
--	Poss. dummy block	Used to stitch together noncontigous strobe 0/1
--	------------------
--
--	Main Memory Pool
--
--	------------------
--	Config vector
--	------------------
--	Kernel Root
--	------------------
--
--	Low loaded Nucleus
--
--	------------------
--	Interrupt vectors       256 bytes (must be 2kb boundary aligned)
--	------------------
--	System Stack		1kb
--	------------------
--	ExecRoot		1kb
--	------------------	< Base of local bus strobe 0/1
--
--	     Lo addr.

	-- Find correct address for start of local bus.
	-- Local bus is currently always used to hold the ExecRoot
	-- system stack, interrupt vector table, kernel root, config
	-- structure and C addressable user RAM. The nucleus may be
	-- loaded on the global bus, or the local bus.

	-- Force use of local bus strobe 1 instead of strobe 0?
	tstb	HW_NucleusLocalS1, r9
	bnz	UseLStrobe1

	-- Default to using local bus strobe 0, but check its validity.
	-- Use local bus strobe 1 if strobe 0 is invalid.
	ldi	*+ar5(IDROM.LBASE0), ar1
	addi	*+ar5(IDROM.LSIZE0), ar1, ar6
	cmpi	-1, ar1
	bne	ValidL0Strobe
UseLStrobe1:
	ldi	*+ar5(IDROM.LBASE1), ar1
	addi	*+ar5(IDROM.LSIZE1), ar1, ar6
	b       ValidL1Strobe		  	-- not strictly true !

	-- OK, by default R_BASE (IR0) will start at 0x002ff000 (the start of
	-- on chip RAM).  This will allow C programs to access this resource.
	-- There are two cases where this is not done:
	--
	--  1.  Only Strobe 0 is being used, and all of strobe 0 is within
	--      the first quadrant (1 giga word) of the address space.
	--      In this case R_BASE is set to zero for backwards compatibilty
	--      with Beta test versions of Helios.
	--
	--  2.  The start or end of both strobes of memory lie outside the
	--      range 0x002ff000 -> 0x402ff000.  In this case it would not
	--      be possible to access all of the memory on at least one of
	--	the strobes, a highly undesirable situation.

	-- at this point:
	-- ar1  - holds base address of selected strobe
	-- ar6  - holds end  address of selected strobe
	-- ar5  - points to IDROM
	-- ar4  - is free

ValidL0Strobe:
	ldi	-1,     ar4
	cmpi	*+ar5(IDROM.LBASE1), ar4	-- check for valid strobe 1
	bne	BothStrobesValid		-- and skip test for case 1 if so
	ldhi	0x4000, ar4
	cmpi	ar4,    ar1			-- check for strobe 0 being outside of first giga word
	ldilo	0,      R_BASE			-- and if not, start base address at 0
	blt     SetAddressBase

BothStrobesValid:
ValidL1Strobe:
	ldhi	0x402f, ar4			-- load end of addressable RAM if base is at 0x002ff00
	or	0xf000, ar4
	cmpi	ar4,    ar6			-- check against end of selected strobe
	ldihi   ar1,    R_BASE
	bhi	SetAddressBase			-- If strobe extendes beyond end of block, then use strobe
	ldhi	0x002f, R_BASE
	or	0xf000, R_BASE			-- otherwise use block starting at 0x002ff00

	-- fall through

SetAddressBase:
	-- Setup address of ExecRoot.
	-- This is held in the tvtp expansion register.
	-- tvtp and ivtp must lie on a 512 word (2k) boundary.

	-- Use the base memory address as the execroot pointer.
	ldpe	ar1, tvtp	-- set trap vector table (execroot) position
				-- GetExecRoot will load this address from tvtp

	-- Save standard address base in nucleus.
	sti	R_BASE,	*+ar1(ExecRoot.CAddressBase)

	-- Save HW_Config sent to bootstrap in the ExecRoot.
	-- This is used as the default when booting other processors.
	sti	r9, *+ar1(ExecRoot.HWConfig)

	-- Position system stack pointer directly after execroot.
	-- Execroot and SSP are nominally 1kb in size each.
	-- (system stack builds upwards)
	-- .sizeof defined in terms of bytes.
	ldi	ar1, R_SSP
	addi	ExecRoot.sizeof / 4, R_SSP

	-- Align interrupt vectors to 0x200 word boundary after execroot
	-- and system stack.
	ldi	R_SSP, ar2
	addi	0x200-1, ar2
	andn	0x200-1, ar2
	ldpe	ar2, ivtp	-- set interrupt vector position

	addi	0x40, ar2	-- add size of interrupt vector table
				-- to give nucleus load position

	-- Depending on HW_Config word, choose nucleus load location and
	-- record it in ExecRoot.
TestGlobalS0:
	tstb	HW_NucleusGlobalS0, r9
	bz	TestGlobalS1
	ldi	*+ar5(IDROM.GBASE0), ar4
	b	UseHighNuc

TestGlobalS1:
	tstb	HW_NucleusGlobalS1, r9
	bz	LocalBusNucleus
	ldi	*+ar5(IDROM.GBASE1), ar4
UseHighNuc:
	-- Load nucleus at base of global strobe 0/1.
	-- ar2 = end of IVTP
	-- ar4 = base address of chosen strobe.
	-- ar1 = ExecRoot
	-- Kernel root struct is therefore located directly after the
	-- interrupt vector table.
	ldi	ar2, r0
	C40CAddress r0				-- Convert to BPTR.
	sti	r0, *+ar1(ExecRoot.KernelRoot)	-- Save in execroot.

	ldi	ar4, ar2			-- set nuc pos to base of strobe

	b	SetNucAddress

LocalBusNucleus:
	-- ar2 = end of IVTP (base of low loaded nucleus).
	-- ar1 = ExecRoot

	-- Note that kernel root address still has to be set.
	-- It will be located directly after the downloaded nucleus.
	stik	0,  *+ar1(ExecRoot.KernelRoot)

SetNucAddress:
	-- Save computed address of nucleus into execroot.
	-- Nucleus location is held as a word pointer on C40
	-- ar2 = Nucleus load position
	sti	ar2, *+ar1(ExecRoot.Nucleus)


	-----------------------------------------------------------------------
	-- Download Nucleus.
	--
	-- Expects simple boot protocol of SIZE in words,
	-- followed by SIZE words of data.
	-- @@@ extend protocol to add peek / poke / exec / boot / worm on cmd?

	-- Download nucleus to RAM address pointed at by ar2
	ldi	*+ar3(1), r0		-- read # bytes of image to download
	ldi	ar2, ar4		-- ar2 points to nucleus load area

	sti	r0, *ar4++		-- save size as part of image
	lsh	-2, r0			-- / sizeof(word) - convert to # words
	subi	3, r0			-- initialise for rpts
					-- -1 size, -2 rpts and || correction

	-- Download image
	ldi	*+ar3(1), r1		-- initialise r1 for parallel loop
	rpts	r0			-- loops r0 + 1
		ldi	*+ar3(1), r1 || sti	r1, *ar4++
	sti	r1, *ar4++		-- store final value


	-----------------------------------------------------------------------
	-- Copy IDROM into ExecRoot structure
	-- ar5 points to base of IDROM in internal ram
	-- ar1 points to ExecRoot base.

	addi	ExecRoot.ID_ROM, ar1, ar4
	ldi	*ar5, r0
IDROM_save:
	ldi	*ar5++, r1
	sti	r1, *ar4++
	subi	1, r0
	bnz	IDROM_save


	-----------------------------------------------------------------------
	-- If ExecRoot->KernelRoot has not been set, then locate it directly
	-- after the nucleus.

	ldi	*+ar1(ExecRoot.KernelRoot), r0
	cmpi	0, r0
	bnz	CallKStart

	-- In the case of a Low loaded nucleus, the kernel root address will not
	-- yet have been set. The nucleus includes its own size at start, so
	-- add this to its start address to get the next free address.
	-- Place the kernel root there.
	ldi	ar2, r0
	C40CAddress r0
	addi	*ar2, r0			-- calculate kernel root struct
	sti	r0, *+ar1(ExecRoot.KernelRoot)	-- (BPTR) address and save in
						-- execroot.

	-----------------------------------------------------------------------
	-- Initialise C PCS conformant world
	--
	-- kernel called thus:
	-- 	void Kstart(Channel bootlink, word *nucbase)
	--
	-- On entry:
	--	AR0 = peri map
	--	AR1 = execroot
	--	AR2 = nucleus address (WPTR)
	--	AR3 = CPCR address of boot link

CallKStart:

	-- Setup initial C stack.
	_test _false [
		-- This is a FALLING stack from top of internal RAM.
		ldhi	0x30, R_USP	-- 0x002f ffff
		subi	1, R_USP
	][
		-- Falling stack using the dispatch stack for initialisation.
		-- This relies on the initial kernel thread NEVER blocking
		-- and interrupts NOT being enabled until a new C addressable
		-- stack has allocated from an initialised memory system.
		ldi	ExecRoot.DispatchStack + DISPATCHSTACKSIZE - 1, R_USP
		addi	ar1, R_USP
	]

	-- All registers set the flags.
	or	ST_SET_COND, R_ST

	-- Module table pointer not required by kernel.
	
	-- Setup arguments and root structure pointer.

	-- Bootlink is now transfered as WPTR to bootlinks control reg.
	ldi	ar3, R_A1			-- bootlink is arg 1

	-- Nucleus is a word address.
	ldi	ar2, R_A2			-- nuc base is arg 2

	-- Jump to initial kernel module (kmodule)
	-- jmp addr = *(GetNucBase() + 1) + (GetNucBase() + 1) + sizeof(Module)

	-- Point at kernel slot.
	addi	1, ar2

	-- Convert kernel rptr to address of kernel.
	ldi	*ar2, ar1	-- get kernel rptr - offset to kernel

	lsh	-2, ar1		-- convert to number of words
	addi	ar2, ar1	-- add in address of rptr

	-- Step over module header (.sizeof in terms of bytes).
	addi	Module.sizeof / 4, ar1

	tstb	HW_PseudoIDROM, r9
	bnz	NoDropConfig
	-- End of bootstrap so drop TIM-40 module config line.
	ldi	IIF_TYPE3, ar2
	ldi	ar2, iif
NoDropConfig:

	-- Jump to startup code.
	b	ar1


	-- notes true size of execroot in c40boot.s
	// 'c40 'execroot 'size 'is ExecRoot.sizeof ('in 'bytes)


-- End of c40boot.a
