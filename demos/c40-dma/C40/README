The files in this directory demonstrate how it is possible to program
the COM ports and DMA engines on the C40 directly, from within Helios.
The code was supplied by Ken Blackler at the JET research project.
There is absolutely NO WARRANTY with this code.
The code is supplied under the terms of the GNU Public License,
version 2, a copy of which can be found in the file COPYING.
Below is an extract of the Email message from Ken, describing the code:

-----------------------------------------------------------------------
Date: Thu, 19 Aug 93 18:23:13 BST
From: kb@jet.uk
Subject: My DMA routines

Hi,

Basically CATS_C40.x contains all the C40 stuff to do with DMA.
CATS-PUB.H contains some useful definitions that I use everywhere.

CATSUTIL.x is included as it defines some useful diagnostic routines
that I use everywhere. These provide simple ways to ASSERT and VERIFY
conditions are true, and prints sensible diagnostic messages if they
aren't. Also in there somewhere are memory allocation check routines
that aren't actually used by this stuff but were in there, so I left
them.

Basically the DMA routines allow you to build up a linked list of DMA
transfers (say definiing a ring buffer) and then set it going. There 
are routines to check if it is still busy.

Also there are two simple routines C40SimpleWrite and C40SimpleRead that
perform a blocking transfer, again using DMA transfer. Here I idle between 
checks as I found that if you are doing a transfer into the same memory block
as the program was executing, and other things are happening, it seems that the 
constant bank switching in DRAM really slows the DMA transfer down......
Really though, the loop should fit in the processor cache. Anyway I didn't 
bother to get to the bottom of that one as I now have C40s with SRAM.

Hope this is useful to your customer.

I guess this source code can be considered 'public domain'. Use the GNU license
if you want something legal looking. That is as long as noone wants to sell it 
for millions of pounds, in which case I want 10% 8-)

KenB
