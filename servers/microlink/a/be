/* $Source:$ */
/* $Header:$ */

/*------------------------------------------------------------------------*/
/*                                                      source/binedit.c  */
/*------------------------------------------------------------------------*/

/* This is a simple command-driven editor for editing binary files.       */

/*------------------------------------------------------------------------*/
/*                                                          Header Files  */
/*------------------------------------------------------------------------*/

#include <stddef.h>
#include <stdlib.h>
#include <syslib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

/*------------------------------------------------------------------------*/
/*                                               Look-ahead declarations  */
/*------------------------------------------------------------------------*/

       int  main           (int argc,char **argv);
static int  doHelp         (char *ptr);
static int  doComment      (char *ptr);
static int  doQuit         (char *ptr);
static int  doIncludeFile  (char *ptr);
static void removeSpace    (char **ptr);
static int  ispfx          (char **ptr,char *cmd);

/*------------------------------------------------------------------------*/
/*                                                     The command table  */
/*------------------------------------------------------------------------*/

ComEnt comTab[] = 
{  { "?",      doHelp         , "Print command table"                     },
   { ";",      doComment      , "Add comment (to transcript)"             },
   { "q",      doQuit         , "Quit this test program"                  },
   { NULL,     NULL           , NULL                                      }
};

/*------------------------------------------------------------------------*/
/*                                                Transcript file-stream  */
/*------------------------------------------------------------------------*/

FILE *tf = NULL;
char b[1000];
int promptPresent;

/*------------------------------------------------------------------------*/
/*                               Input and Output file names and handles  */
/*------------------------------------------------------------------------*/



/*------------------------------------------------------------------------*/
/*                                                             main(...)  */
/*------------------------------------------------------------------------*/

int main(int argc,char **argv)
{  char    inpl[1000];
   char          *ptr;
   int           argn;
   char          *arg;
   ComEnt        *cmd;
   
   if(argc!=3)
   {  printf("Format : %s {in-file] [out-file]\n");
      return 1;
   }
   
   fi = fopen(argv[1],"rb");
   if(fi==NULL)

   for(;;)
   {  printf("> "); 
      fflush(stdout);
      gets(inpl);
      promptPresent = 0;
      ptr = inpl;
      removeSpace(&ptr);
      if(*ptr==0) continue;
      for(cmd=comTab;cmd->cmdName;cmd++)
      {  char *lap;
         lap = ptr;
         if(ispfx(&lap,cmd->cmdName)&&*lap<=32)
         {  if((*cmd->cmdFunc)(stm,lap)==1) goto finishProgram;
            break;
         }
      }
      if(!cmd->cmdName)
      { outf((b,"Bad command name : Use '?' for help\n"); }
   }

   finishProgram:
   return 0;
}

/*------------------------------------------------------------------------*/
/*                                                           doHelp(...)  */
/*------------------------------------------------------------------------*/

static int doHelp(char *ptr)
{  ComEnt *cmd;
   int i,wdth;
   
   ptr = NULL; /* Ignore */
   printf("Help command for this test utility\n\n");
   printf("Command are : \n");
   wdth = 0;
   for(cmd=comTab;cmd->cmdName;cmd++)
      if(strlen(cmd->cmdName)>wdth) wdth = strlen(cmd->cmdName);
   for(cmd=comTab;cmd->cmdName;cmd++)
   {  printf("%s",cmd->cmdName);
      for(i=strlen(cmd->cmdName);i<wdth+2;i++) { printf(" "); }
      printf("%s\n",cmd->cmdDesc);
   }
   printf("\n");
   return 0;
}

/*------------------------------------------------------------------------*/
/*                                                        doComment(...)  */
/*------------------------------------------------------------------------*/

static int doComment(Stream *stm,char *ptr)
{  stm = NULL;
   ptr = NULL;
   return 0;
}

/*------------------------------------------------------------------------*/
/*                                                           doQuit(...)  */
/*------------------------------------------------------------------------*/

static int doQuit(Stream *stm,char *ptr)
{  stm = NULL;
   ptr = NULL;
   return 1;
}

/*------------------------------------------------------------------------*/
/*                                                    doIncludeFile(...)  */
/*------------------------------------------------------------------------*/

static int doIncludeFile(Stream *stm,char *ptr)
{  FilRec *rc;

   stm = NULL;
   removeSpace(&ptr);
   rc = (FilRec*)calloc(1,sizeof(FilRec));
   if(rc==NULL)
   {  printf("No memory\n");
      return 1;
   }
   rc->nxt = fstk;
   rc->fh  = fopen(ptr,"rb");
   if(rc->fh==NULL)
   {  printf("Could not open \"%s\" for reading\n",ptr);
      free(rc);
      return 0;
   }
   printf("Including file \"%s\"\n",ptr);
   fstk = rc;
   return 0;
}

/*------------------------------------------------------------------------*/
/*                                                      removeSpace(...)  */
/*------------------------------------------------------------------------*/

static void removeSpace(char **ptr)
{  for(;**ptr<=32&&**ptr;(*ptr)++); }

/*------------------------------------------------------------------------*/
/*                                                           doTxRx(...)  */
/*------------------------------------------------------------------------*/

static int doTxRx(Stream *stm,char *ptr)
{  GeneralMlkRequest   rq;
   GeneralMlkReply     rp;
   word               res;
   int                  i;
   int                 bs;

   rq.txFlag = 1;
   for(i=0;i<34;i++) rq.msg.byt[i]=0;
   i = 0;
   bs = 10;
   while(1)
   {  removeSpace(&ptr);
      if(*ptr=='x'||*ptr=='X') { ptr++; bs=16; continue; }
      if(*ptr=='d'||*ptr=='D') { ptr++; bs=10; continue; }
      if(!isdigit(*ptr))
      {  if(bs==10) break;
         if(!((*ptr>='a'&&*ptr<='f')||(*ptr>='A'&&*ptr<='F'))) break;
      }
      if(i==34)
      {  printf("More than 34 bytes in this message\n");
         return 0;
      }
      rq.msg.byt[i] = (ubyte)strtol(ptr,&ptr,bs);
      i++;
   }

   if(*ptr!=';')
   {  if(*ptr==0)
      {  printf("Type of return packet expected\n");
         return 0;
      }
      printf("Unexpected character 0x%02X in command line\n",*ptr);
      return 0;
   }
   
   ptr++;
   i=0;
   while(1)
   {  removeSpace(&ptr);
      if(*ptr=='x'||*ptr=='X') { ptr++; bs=16; continue; }
      if(*ptr=='d'||*ptr=='D') { ptr++; bs=10; continue; }
      if(!isdigit(*ptr))
      {  if(bs==10) break;
         if(!((*ptr>='a'&&*ptr<='f')||(*ptr>='A'&&*ptr<='F'))) break;
      }
      rq.rxType = (int)strtol(ptr,&ptr,bs);
      i=1;
      break;
   }
   
   if(i==0)
   {  printf("Receive message type not specified\n");
      return 0;
   }
   
   printf("Message to be transmitted : \n");
   
   PrintMessage(&rq.msg);
   
   printff
   ("Expecting return message type %d = 0x%02X\n",rq.rxType,rq.rxType);

   res = SetInfo(stm,(void*)&rq,sizeof(GeneralMlkRequest));
   if(res!=0)
   {  printf("Error number 0x%08lX occured during SetInfo()\n",res);
      PrintError(res);
      return 0;
   }

   res = GetInfo(stm,(void*)&rp);
   if(res!=0)
   {  printf("Error number 0x%08lX occured during GetInfo()\n",res);
      PrintError(res);
      return 0;
   }

   printf
   (  "Return status is %ld whilst return code is 0x%08lX\n",
      rp.status,rp.code
   );

   printf("Returned message ...\n");
   
   PrintMessage(&rp.msg);

   return 0;   
}

/*------------------------------------------------------------------------*/
/*                                                    doEnableEvent(...)  */
/*------------------------------------------------------------------------*/

static int doEnableEvent(Stream *stm,char *ptr)
{  int              evType;
   int                i,bs;
   EvtRec    *er,**el,*nev;

   i=0;
   while(1)
   {  removeSpace(&ptr);
      if(*ptr=='x'||*ptr=='X') { ptr++; bs=16; continue; }
      if(*ptr=='d'||*ptr=='D') { ptr++; bs=10; continue; }
      if(!isdigit(*ptr))
      {  if(bs==10) break;
         if(!((*ptr>='a'&&*ptr<='f')||(*ptr>='A'&&*ptr<='F'))) break;
      }
      evType = (int)strtol(ptr,&ptr,bs);
      i=1;
      break;
   }
   
   if(evType<=0)
   {  printf("The event type must be positive\n");
      return 0;
   }

   if(i==0)
   {  printf("Expected an event type\n");
      return 0;
   }

   if(*ptr!=0)
   {  printf("Format : en <event-type>\n");
      return 0;
   }
   
   nev = (EvtRec*)calloc(1,sizeof(EvtRec));
   if(nev==NULL)
   {  printf("Out of memory");
      return 0;
   }
   
   for(el=&evts;(er=*el)!=NULL;el=&er->nxt);
   *el = nev;
   
   nev->nxt = NULL;
   nev->req = 0;
   nev->typ = evType;
   nev->evp = EnableEvents(stm,evType);
   InitSemaphore(&nev->ack,0);
   
   printf("Event with type 0x%02X enabled\n",evType);
   
   Fork(2000,EventHandler,4,nev);

   return 0;
}

/*------------------------------------------------------------------------*/
/*                                                   doDisableEvent(...)  */
/*------------------------------------------------------------------------*/

static int doDisableEvent (Stream *stm,char *ptr)
{  int              evType;
   int                i,bs;
   EvtRec     *er,**el,*en;

   i=0;
   while(1)
   {  removeSpace(&ptr);
      if(*ptr=='x'||*ptr=='X') { ptr++; bs=16; continue; }
      if(*ptr=='d'||*ptr=='D') { ptr++; bs=10; continue; }
      if(!isdigit(*ptr))
      {  if(bs==10) break;
         if(!((*ptr>='a'&&*ptr<='f')||(*ptr>='A'&&*ptr<='F'))) break;
      }
      evType = (int)strtol(ptr,&ptr,bs);
      i=1;
      break;
   }

   if(evType<0)
   {  printf("The event type must be positive (or zero for 'all events')\n");
      return 0;
   }

   if(i==0)
   {  printf("Expected an event type\n");
      return 0;
   }

   if(*ptr!=0)
   {  printf("Format : dis <event-type>\n");
      return 0;
   }
   
   if(evType!=0)
   {  for(el=&evts;(er=*el)!=NULL;el=&er->nxt) if(er->typ==evType) break;
      if(er==NULL)
      {  printf("No event of type 0x%02X has been enabled\n",evType);
         return 0;
      }
      printf("Diabling event of type 0x%02X ...\n",evType);
      EnableEvents(stm,-(word)evType);  /* Disable events on port       */
      er->req = 1;                /* Send kill-request to event handler */
      AbortPort                   /* Unblock handler process            */
      (  er->evp,                 /* ... continued ...                  */
         EC_Error|EG_Timeout      /* ... continued ...                  */
      );                          /* ... continued                      */
      Signal(&printSem);          /* Allow handler to print messages    */
      Wait(&er->ack);             /* Wait for handler to die            */
      Wait(&printSem);            /* Regain right to print messages     */
      printf("... Event Disabled and event process killed\n");
      *el = er->nxt;              /* Unlink event record from list      */
      free(er);                   /* Free event record                  */
   } else
   {  printf("Disabling all events ...\n");
      EnableEvents(stm,0);
      for(er=evts;er;er=en)
      {  printf("Disabling event of type 0x%02X\n",er->typ);
         er->req = 1;                /* Send kill-request to event handler */
         AbortPort                   /* Unblock handler process            */
         (  er->evp,                 /* ... continued ...                  */
   	         EC_Error|EG_Timeout /* ... continued ...                  */
         );                          /* ... continued                      */
         Signal(&printSem);          /* Allow handler to print messages    */
         Wait(&er->ack);             /* Wait for handler to die            */
         Wait(&printSem);            /* Regain right to print messages     */
         printf("... Event Disabled and event process killed\n");
         en = er->nxt;               /* Unlink event record from list      */
         free(er);                   /* Free event record                  */
      }
      evts = NULL;
   }
   
   return 0;
}

/*------------------------------------------------------------------------*/
/*                                                     EventHandler(...)  */
/*------------------------------------------------------------------------*/

static void EventHandler(EvtRec *er)
{  GeneralEvent          ge;
   MCB                  ecb;
   word                 res;
   GeneralMessageBlock *msg;

   for(;;)
   {  ecb.MsgHdr.Dest =  er->evp;
      ecb.Data        = (byte*) &ge;
      ecb.Control     = NULL;
      ecb.Timeout     =   -1;
      if(er->req) break;
      res = GetMsg(&ecb);
      if(er->req) break;
      if(res<0)
      {  Wait(&printSem);
         if(promptPresent) { printf("\n"); }
         printf
         (  "Event %3d : GetMsg() returns with 0x%08lX. Aborting\n",
            er->typ,res
         );
         PrintError(res);
         Signal(&printSem);
         break;
      }
      if((res=ecb.MsgHdr.FnRc)<0)
      {  Wait(&printSem);
         if(promptPresent) { printf("\n"); }
         printf
         (  "Event %3d : GetMsg() returns with 0x%08lX. Aborting\n",
            er->typ,res
         );
         PrintError(res);
         Signal(&printSem);
         break;
      }
      Wait(&printSem);
      if(promptPresent) { printf("\n"); }
      printf("Event 0x%02X : ",er->typ);
      msg = &ge.Device.microlink;
      
      PrintMessage(msg);

      Signal(&printSem);
   }

   Signal(&er->ack);
}

/*------------------------------------------------------------------------*/
/*                                                           doShow(...)  */
/*------------------------------------------------------------------------*/

static int doShow(Stream *stm,char *ptr)
{  EvtRec *er;
   int cnt;

   stm = NULL;
   ptr = NULL;

   printf("The following event types are enabled : \n");

   for(cnt=0,er=evts;er;er=er->nxt,cnt++) { printf("0x%02X\n",er->typ); }

   if(cnt==0) { printf("(no events)\n"); }
   else       { printf("(total of %d events enabled)\n",cnt); }

   return 0;
}

/*------------------------------------------------------------------------*/
/*                                                            ispfx(...)  */
/*------------------------------------------------------------------------*/

static int ispfx(char **ptr,char *cmd)
{  char *lap;

   for(lap=*ptr;*cmd&&*cmd==*lap;cmd++,lap++);
   if(*cmd) return 0;
   *ptr = lap;
   return 1;
}

/*------------------------------------------------------------------------*/
/*                                                     PrintMessage(...)  */
/*------------------------------------------------------------------------*/

static void PrintMessage(GeneralMessageBlock *msg)
{  int i,byts;

   byts = 1;
   if(msg->byt[0]&0x80)
   {  switch(msg->byt[0]&0x03)
      {  case 0:
            byts = 2; break;
         case 1:
            byts = 3; break;
         case 2:
            byts = 5; break;
         case 3:
            byts = msg->byt[1]+2;
            if(byts>34) byts=32;
      }
   }

   printf("x  : ");
   for(i=0;i<byts;i++) printf("  %02X ",msg->byt[i]));
   printf("\n");

   printf("d  : ");
   for(i=0;i<byts;i++) printf("%+4d ",(signed char)msg->byt[i]));
   printf("\n");

   printf("ud : ");
   for(i=0;i<byts;i++) printf("%4d ",(unsigned char)msg->byt[i]));
   printf("\n");

}

/*------------------------------------------------------------------------*/
/*                                                       PrintError(...)  */
/*------------------------------------------------------------------------*/

static void PrintError(word cd)
{  char buf[256];

   *buf = 0;
   Fault(cd,buf,255);
   printf("Error description : %s\n",buf);
}
