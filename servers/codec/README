Notes on CodecHigh library and codec device driver
--------------------------------------------------

These notes refer to the library and driver for the codec podule
attached to an AB prototype board.

The podule contains 1023 byte fifos on both input and output, and
generates interrupts only when a fifo is half full or empty. As a
result the first read buffer will not start to be filled until the
input fifo is half full, leading to a delay of about 1/16 second.

Conversion of output samples is not enabled until enough data has been
supplied to half-fill the output fifo. This reduces the chance of
getting underrun immediately after starting to write, but gives a
delay of 1/16 second.

There is no PTT switch on the current hardware, so the `start' and
`end' parameters to CodecHigh_Begin() should both be
`CodecHigh_SwitchQueue'.

The `timeout' parameter to CodecHigh_Begin() is ignored at present. It
is not clear that it is very useful: all calls to CodecHigh_Wait() will
return after a predictable time anyway.

The driver gives logical numbers codec podules according to their order in the
backplane slots, so they do not need to be put in particular physical
positions. The first (or only) codec podule is called "codec0" in the
call to CodecHigh_Open(); the next is "codec1", and so on.

The `sampleRate' and `route' parameters to CodecHigh_Open() are
ignored, as there is no hardware support for them.

CodecHigh_Dial() supports pulse dialling only, and returns immediately
after dialling, without attempting to guess when ringing has finished.
Hence `flag' always returns 0 if dialling was completed.
I suspect that this interface is misguided: it is probably better to
wait for the sound expected on answering than to listen for the ringing
tone (which may not occur at all).

CodecHigh_SetGain() is not implemented (as there is no corresponding
hardware). 

Brian Knight  6th February 1990