The Helios Native Keyboard Server
---------------------------------

Paul Beskeen
27/3/91

The Helios keyboard server is designed to provide the standard Helios
keyboard interfaces for an AT type keyboard as a local (native) server.
This server can be used in conjunction with the Helios native window server
to support a completely standalone version of Helios. In future the two
servers may be integrated.

The keyboard server provides two distinct interfaces, the raw undecoded
scancode up/down event interface (/keyboard), and the decoded standard
'typewriter' style (/console) interface.

If -DCONSOLE is not defined at compile time, only the /keyboard interface
will be available from the server.

By choosing different object (.o) extensions, the program can be compiled
to be either included in the Helios nucleus, demand loaded, or executed
standalone (.si, .dl, or .sa).

Programs wishing to indulge in specialist keyboard handling can Open() and
EnableEvents() on the /keyboard server. Programs such as X Windows or games
may wish to do this. If both servers are opened, keys will be passed in
preference to the /keyboard client. When /keyboard has no clients control
will revert back to the /console server.

For more normal keyboard functionality, such as repeating keys, standard
Helios escape sequences from function keys, and shift, alt and ctrl
modification of the key returned, the /console server should be used.
This interface should be used via std Helios Read()s. There is also a
non standard EnableEvents() interface. This sends the decoded ascii key in
the 'Key' field, and the scancode and shift key status in the 'What' field of
the KeyboardEvent structure. If you want to write portable Helios programs
do not use this interface. For multi character escape sequences, as in a fn
key decode, the scancode will remain constant over all the characters sent.
The 'What' field has the following format:

bit:	31		  23		  15		  7	       0
	[toggle keys	][shift keys	][		][scancode	]

Toggle keys:
	bit 24 = caps lock (on/off)
	bit 25 = numlock (on/off) - (Functionality not currently implemented)
	bit 26 = scroll lock (on /off)

Shift keys:
	bit 16 = left shift
	bit 17 = right shift
	bit 18 = left control
	bit 19 = right control
	bit 20 = left alt
	bit 21 = right alt
	bit 22 = left fn (non std extra shift key)
	bit 23 = right fn (non std extra shift key)


The standard Helios escape sequnces for function, cursor and special keys
such as PageUp, are documented in the Console Server section of the Helios
manual (Programming under Helios section 5.4.5 in the Helios 1.2
documentation).

The /console server reads in a keyboard.bkm file (bkm = Binary Keyboard Map)
that defines the translation from keyboard scancodes into ascii. New maps can
be constructed by running buildkeymap (src in /hsrc/cmds/com/ARM) on a
keyboard.akm file (akm = ASCII Keyboard Map). Look at ARM/inkey44.akm and
template.akm for more details. The keyboard.bkm file should be held in
/helios/lib.

The standard  keyboard server will load the file '/helios/lib/keyboard.bkm',
but in ABC's version, the EEPROM (EEPROM_KeyMap) defines which keyboard
map /console should load. This holds an IDD code (such as 44 for the UK)
that is then used to construct a filename i.e. /helios/lib/inkey44.bkd.
If the top bit of this EEPROM byte is set then ctrl and CapsLock are swapped
around on the keyboard. Depending on which keyboard (internal or external)
input is detected from, the keyboard map will be swapped automatically between
the 'inkey' and 'exkey' versions. e.g. inkey44.bkm and exkey44.bkm for the
UK keyboard.

The keyboard server needs to be uprated to prove a proper device driver
interface to getting the key up/down scancodes.

The Helios /console interface has not been fully implemented in that the
Attributes mechanism is ignored completely. This is because the /window
server this server is designed to complement already implements this.
If this is added, beware of the existing uses of SetInfo().


@@@ TODO:

	There should also be a SetInfo() interface to the /console server.
This will allow you to swap the ctrl and capslock keys around, make the
server read in a new keyboard decoding map, or vary the repeat delay or rate.

	CapsLock light on/off needs to be added.
